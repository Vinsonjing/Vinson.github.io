<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2022/10/30/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
      <url>/2022/10/30/%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<p><a href="https://programmercarl.com/%E5%89%8D%E5%BA%8F/%E9%80%9A%E8%BF%87%E4%B8%80%E9%81%93%E9%9D%A2%E8%AF%95%E9%A2%98%E7%9B%AE%EF%BC%8C%E8%AE%B2%E4%B8%80%E8%AE%B2%E9%80%92%E5%BD%92%E7%AE%97%E6%B3%95%E7%9A%84%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%EF%BC%81.html">通过一道面试题目，讲一讲递归算法的时间复杂度</a></p><p>面试题：求x的n次方</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">function1</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;  <span class="comment">// 注意 任何数的0次方等于1</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        result = result * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O(n)</p><p>效率更高的算法–递归算法–O(logn)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">function2</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>; <span class="comment">// return 1 同样是因为0次方是等于1的</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">function2</span>(x, n - <span class="number">1</span>) * x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归了n次，每次进行乘法操作O(1)，还是O(n)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">function3</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">function3</span>(x, n / <span class="number">2</span>) * <span class="built_in">function3</span>(x, n / <span class="number">2</span>)*x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">function3</span>(x, n / <span class="number">2</span>) * <span class="built_in">function3</span>(x, n / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="vx_images/5380613247530.png"><br>每个结点进行一次递归操作<br>求满二叉树节点数量：等比数列的求和公式<br>m为深度，m=log2^n-1，n=16，m=3<br>2^m+2^(m-1)+…+2^0=2^(m+1)-1<br>结果还是O(n)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">function4</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="built_in">function4</span>(x, n / <span class="number">2</span>);<span class="comment">// 这里相对于function3，是把这个递归操作抽取出来</span></span><br><span class="line">    <span class="keyword">if</span> (n % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> t * t * x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> t * t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归操作log2^n次</p><h1 id="斐波那契数列"><a href="#斐波那契数列" class="headerlink" title="斐波那契数列"></a>斐波那契数列</h1><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>);</span><br><span class="line">    &#125; </span><br></pre></td></tr></table></figure><p>每层一个加法操作<br>递归次数<br>每次n-1<br>例如n = 8时，T(n) = 2^0 + 2^1 + 2^2 + 2^3 + 2^4 + 2^5 + 2^6 = 2^7-1=2^(n-1)-1<br>O(n) = 2^7-1 = O(2^n)<br><a href="https://blog.csdn.net/cpt_ljy/article/details/102592598">斐波那契数列时间复杂度</a><br><img src="vx_images/188832113240199.png" alt="watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NwdF9sank=,size_16,color_FFFFFF,t_70"></p><h2 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">        dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            dp[i]=dp[i-<span class="number">1</span>]+dp[i-<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>递归算法的时间复杂度本质上是要看: 递归的次数 * 每次递归中的操作次数<br><img src="vx_images/123164912239497.png"><br>O(n)<br>每次n-1，递归了n次时间复杂度是O(n)，每次进行了一个乘法操作，乘法操作的时间复杂度一个常数项O(1)，所以这份代码的时间复杂度是 n × 1 = O(n)。</p><p><img src="vx_images/83825312227364.png"><br>O(nlogn)</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城-分布式高级</title>
      <link href="/2022/10/21/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7/"/>
      <url>/2022/10/21/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%88%86%E5%B8%83%E5%BC%8F%E9%AB%98%E7%BA%A7/</url>
      
        <content type="html"><![CDATA[<p>idea启动多个服务<br>copy configuration<br><img src="https://img-blog.csdnimg.cn/562f3e16418b4d99b94df224168317c8.png" alt="在这里插入图片描述"><br>问题：redis 删除别人的锁?</p><p>待完成：<br>JUC锁，锁的机制（ 可重入锁，公平锁等）</p><h1 id="ElasticSearch"><a href="#ElasticSearch" class="headerlink" title="ElasticSearch"></a>ElasticSearch</h1><p>具体看资料文档<br><img src="https://img-blog.csdnimg.cn/5d1e49382c7d4c0abe38f57ec51346c5.png" alt="在这里插入图片描述"><br>Index（索引）== 数据库<br>Type（类型）== 表<br>Document（文档）== 一行数据</p><h2 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h2><p><img src="https://img-blog.csdnimg.cn/e0350a60f2084bce914e1ad70b1f1853.png" alt="在这里插入图片描述"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>docker pull elasticsearch:7.4.2 存储和检索数据<br>docker pull kibana:7.4.2 可视化检索数据<br>必须是同一个版本</p><p>mkdir -p /mydata/elasticsearch/config<br>mkdir -p /mydata/elasticsearch/data<br>echo “http.host: 0.0.0.0” &gt;&gt; /mydata/elasticsearch/config/elasticsearch.yml<br>chmod -R 777 /mydata/elasticsearch/ 保证权限<br>docker run –name elasticsearch -p 9200:9200 -p 9300:9300 <br>-e “discovery.type=single-node” <br>-e ES_JAVA_OPTS=”-Xms64m -Xmx512m” <br>-v /mydata/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml <br>-v /mydata/elasticsearch/data:/usr/share/elasticsearch/data <br>-v /mydata/elasticsearch/plugins:/usr/share/elasticsearch/plugins <br>-d elasticsearch:7.4.2</p><p><strong>kibana</strong><br>docker run –name kibana -e ELASTICSEARCH_HOSTS=<a href="http://192.168.56.10:9200/">http://192.168.56.10:9200</a> -p 5601:5601 <br>-d kibana:7.4.2<br><a href="https://blog.csdn.net/weixin_48494936/article/details/125830921">将 ELASTICSEARCH_HOSTS 改为 ELASTICSEARCH_URL 便可成功连上</a></p><h2 id="cat"><a href="#cat" class="headerlink" title="_cat"></a>_cat</h2><p>GET /_cat/nodes：查看所有节点<br>GET /_cat/health：查看 es 健康状况<br>GET /_cat/master：查看主节点<br>GET /_cat/indices：查看所有索引 show databases;</p><h2 id="增加和修改"><a href="#增加和修改" class="headerlink" title="增加和修改"></a>增加和修改</h2><p><strong>PUT customer/external/1；在 customer 索引下的 external 类型下保存 1 号数据为指定Json数据</strong><br>POST 新增。如果不指定 id，会自动生成 id。指定 id 就会修改这个数据，并新增版本号<br>PUT 可以新增可以修改。PUT 必须指定 id；由于 PUT 需要指定 id，我们一般都用来做修改<br>操作，不指定 id 会报错。</p><p><strong>带_update 对比元数据如果一样就不进行任何操作。版本号不会增加、序列号不会增加。</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST customer/external/<span class="number">1</span>/_update</span><br><span class="line">&#123; </span><br><span class="line"><span class="attr">&quot;doc&quot;</span>:&#123; </span><br><span class="line"><span class="attr">&quot;name&quot;</span>: <span class="string">&quot;John Doew&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于大并发更新，不带 update；<br>对于大并发查询偶尔更新，带 update；对比更新，重新计算分配规则。</p><p>“_seq_no”: 1, //并发控制字段，每次更新就会+1，用来做乐观锁<br>“_primary_term”: 1, //同上，主分片重新分配，如重启，就会变化<br>更新携带 ?if_seq_no=0&amp;if_primary_term=1</p><h2 id="批量"><a href="#批量" class="headerlink" title="批量"></a>批量</h2><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">POST /_bulk</span><br><span class="line">&#123; <span class="attr">&quot;delete&quot;</span>: &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;123&quot;</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;create&quot;</span>: &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;123&quot;</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My first blog post&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;index&quot;</span>: &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span> &#125;&#125;</span><br><span class="line">&#123; <span class="attr">&quot;title&quot;</span>: <span class="string">&quot;My second blog post&quot;</span> &#125;</span><br><span class="line">&#123; <span class="attr">&quot;update&quot;</span>: &#123; <span class="attr">&quot;_index&quot;</span>: <span class="string">&quot;website&quot;</span>, <span class="attr">&quot;_type&quot;</span>: <span class="string">&quot;blog&quot;</span>, <span class="attr">&quot;_id&quot;</span>: <span class="string">&quot;123&quot;</span>, <span class="attr">&quot;_retry_on_conflict&quot;</span> : <span class="number">3</span>&#125; &#125;</span><br><span class="line">&#123; <span class="attr">&quot;doc&quot;</span> : &#123;<span class="attr">&quot;title&quot;</span> : <span class="string">&quot;My updated blog post&quot;</span>&#125; &#125;</span><br></pre></td></tr></table></figure><h2 id="进阶检索"><a href="#进阶检索" class="headerlink" title="进阶检索"></a>进阶检索</h2><p>ES 支持两种基本方式检索 :<br> 一个是通过使用 REST request URI 发送搜索参数（uri+检索参数）<br> 另一个是通过使用 REST request body 来发送它们（uri+请求体）</p><p><strong>Query DSL</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123; </span><br><span class="line"><span class="attr">&quot;query&quot;</span>: &#123; </span><br><span class="line"># <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line"><span class="string">&quot;match&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;account_number&quot;</span>: <span class="string">&quot;20&quot;</span></span><br><span class="line"><span class="string">&quot;address&quot;</span>: <span class="string">&quot;mill road&quot;</span></span><br><span class="line"># 包含 mill 或者 road 或者 mill road 的所有记录,并给出相关性得分</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&quot;match_phrase&quot;</span>: &#123;  # 整体-短语匹配</span><br><span class="line"><span class="attr">&quot;address&quot;</span>: <span class="string">&quot;mill road&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&quot;multi_match&quot;</span>: &#123; # 多字段匹配</span><br><span class="line"><span class="attr">&quot;query&quot;</span>: <span class="string">&quot;mill&quot;</span>, </span><br><span class="line"><span class="attr">&quot;fields&quot;</span>: [<span class="string">&quot;state&quot;</span>,<span class="string">&quot;address&quot;</span>]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">&quot;from&quot;</span>: <span class="number">0</span>, </span><br><span class="line"><span class="attr">&quot;size&quot;</span>: <span class="number">5</span>, </span><br><span class="line"># <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;age&quot;</span>,<span class="string">&quot;balance&quot;</span>]</span><br><span class="line"><span class="string">&quot;sort&quot;</span>: [</span><br><span class="line">&#123; </span><br><span class="line"><span class="attr">&quot;account_number&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">GET bank/_search</span><br><span class="line">&#123; </span><br><span class="line"><span class="attr">&quot;query&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;bool&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">&#123; <span class="attr">&quot;match&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;address&quot;</span>: <span class="string">&quot;mill&quot;</span> </span><br><span class="line">&#125; </span><br><span class="line">&#125;, </span><br><span class="line">&#123; <span class="attr">&quot;match&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;gender&quot;</span>: <span class="string">&quot;M&quot;</span> </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;should&quot;</span>: [</span><br><span class="line">&#123;<span class="attr">&quot;match&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;address&quot;</span>: <span class="string">&quot;lane&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;must_not&quot;</span>: [</span><br><span class="line">&#123;<span class="attr">&quot;match&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;email&quot;</span>: <span class="string">&quot;baluba.com&quot;</span> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">&quot;filter&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;range&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;balance&quot;</span>: &#123; </span><br><span class="line"><span class="attr">&quot;gte&quot;</span>: <span class="number">10000</span>, </span><br><span class="line"><span class="attr">&quot;lte&quot;</span>: <span class="number">20000</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>filter不产生相关性得分</p><p>全文检索字段用 match，其他非 text 字段匹配用 term。</p><p>match_phrase包含<br>match address.keyword 精确匹配<br>改为term balance</p><h2 id="ElasticSearch7-去掉type概念"><a href="#ElasticSearch7-去掉type概念" class="headerlink" title="ElasticSearch7-去掉type概念"></a>ElasticSearch7-去掉type概念</h2><p>关系型数据库中两个数据表示是独立的，即使他们里面有相同名称的列也不影响使用，但ES 中不是这样的。elasticsearch是基于Lucene开发的搜索引擎，而ES中不同type下名称相同 的filed最终在Lucene中的处理方式是一样的。<br>两个不同type下的两个user_name，在ES同一个索引下其实被认为是同一个filed，你必 须在两个不同的type中定义相同的filed映射。否则，不同type中的相同字段名称就会在 处理中出现冲突的情况，导致Lucene处理效率下降。<br>去掉type就是为了提高ES处理数据的效率。<br><img src="https://img-blog.csdnimg.cn/5a5ff0ce79bb4287b1a04a3144a08416.png" alt="在这里插入图片描述"><br>要使用es，需要将mysql数据存储到es中，由于es储存在内存中，只存有用数据。</p><p>节省空间就会浪费时间</p><p>index:false不能用于检索<br>doc_values:false 不会用于聚合、排序操作等，es不会维护，节省空间</p><p>使用range查范围，类型不能是keyword，要是double等</p><p>type:nested 嵌入式数据类型<br>数组类型：扁平化处理<br><img src="https://img-blog.csdnimg.cn/36bdce7dd4204955b6ac37d1e1b19a6d.png" alt="在这里插入图片描述"><br>（1）、方便检索{<br>       skuId:1<br>       spuId:11<br>       skuTitle:华为xx<br>       price:998<br>       saleCount:99<br>      attrs:[<br>           {尺寸：5寸},<br>           {CPU：高通945},<br>           {分辨率：全高清}<br>      ]<br>   }<br>  冗余：<br>   100万<em>20=1000000</em>2KB=2000MB=2G 20<br>  （2）、<br>     sku索引{<br>      skuId:1<br>      spuId:11<br>      xxxxx<br>     }</p><p>attr索引{<br>         spuId:11,<br>         attrs:[<br>               {尺寸：5寸},<br>               {CPU：高通945},<br>               {分辨率：全高清}<br>      ]<br>     }</p><p>搜索 小米； 粮食，手机，电器。<br>   10000个，4000个spu<br>    分步，4000个spu对应的所有可能属性；<br>    esClient： spuId:[4000个spuid] 4000*8=32000byte=32kb</p><p> 32kb*10000=32000mb;=32GB</p><p>高亮：</p><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><p>动静分离<br>静：图片，js、css等静态资源（以实际文件存在的方式）<br>动：服务器需要处理的请求</p><p>每个微服务都可以独立部署、运行、升级<br>独立自治：技术、架构、业务</p><p><img src="https://img-blog.csdnimg.cn/f6d6083255a24d3faf3587edbb73e25a.png" alt="在这里插入图片描述"><br>nginx代理网关，丢失信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  gulimall.com;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_pass http://gulimall;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h2><p><img src="https://img-blog.csdnimg.cn/4d351fc4ee3140b6b1137e650880c76f.png" alt="在这里插入图片描述">server块内容单独放在conf.d中</p><h2 id="正向代理与反向代理"><a href="#正向代理与反向代理" class="headerlink" title="正向代理与反向代理"></a>正向代理与反向代理</h2><p><img src="https://img-blog.csdnimg.cn/73b9854f82c94b05b9d11ee763abebc5.png" alt="在这里插入图片描述"></p><h2 id="Nginx动静分离"><a href="#Nginx动静分离" class="headerlink" title="Nginx动静分离"></a>Nginx动静分离</h2><p>1、以后将所有项目的静态资源都应该放在nginx里面  2、规则：/static/**所有请求都由nginx直接返回</p><p>192.168.10.102 gulimall.com<br>192.168.10.102 search.gulimall.com<br><img src="https://img-blog.csdnimg.cn/22b1d4facf3542ada4a6311f999b5143.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=&quot;stylesheet&quot; href=&quot;/static/search/css/index.css&quot;&gt;</span><br></pre></td></tr></table></figure><p> 对应/mydata/nginx/html/static/search目录<br><img src="https://img-blog.csdnimg.cn/46cfc09013934162902dcd4581a5a3df.png" alt="在这里插入图片描述"></p><h1 id="thymeleaf"><a href="#thymeleaf" class="headerlink" title="thymeleaf"></a>thymeleaf</h1><p>模板引擎<br> 1）、thymeleaf-starter：关闭缓存<br> 2）、静态资源都放在static文件夹下就可以按照路径直接访问<br> 3）、页面放在templates下，直接访问<br> SpringBoot，访问项目的时候，默认会找index<br> 4）、页面修改不重启服务器实时更新<br> 1）、引入dev-tools<br> 2)、修改完页面 controller shift f9重新自动编译下页面，代码配置，推荐重启</p><h1 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h1><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><p>压力测试考察当前软硬件环境下系统所能承受的最大负荷并帮助找出系统瓶颈所在。压测都<br>是为了系统在线上的处理能力和稳定性维持在一个标准范围内，做到心中有数。<br>使用压力测试，我们有希望找到很多种用其他测试方法更难发现的错误。有两种错误类型是:<br>内存泄漏，并发与同步。<br>有效的压力测试系统将应用以下这些关键条件:重复，并发，量级，随机变化。</p><ul><li>响应时间（Response Time: RT）<br>响应时间指用户从客户端发起一个请求开始，到客户端接收到从服务器端返回的响<br>应结束，整个过程所耗费的时间。</li><li>HPS（Hits Per Second） ：每秒点击次数，单位是次/秒。</li><li>TPS（Transaction per Second）：系统每秒处理交易数，单位是笔/秒。</li><li>QPS（Query per Second）：系统每秒处理查询次数，单位是次/秒。<br>对于互联网业务中，如果某些业务有且仅有一个请求连接，那么 TPS=QPS=HPS，一<br>般情况下用 TPS 来衡量整个业务流程，用 QPS 来衡量接口查询次数，用 HPS 来表<br>示对服务器单击请求。</li><li>无论 TPS、QPS、HPS,此指标是衡量系统处理能力非常重要的指标，越大越好，根据经<br>验，一般情况下：<br>金融行业：1000TPS<del>50000TPS，不包括互联网化的活动<br>保险行业：100TPS</del>100000TPS，不包括互联网化的活动<br>制造行业：10TPS<del>5000TPS<br>互联网电子商务：10000TPS</del>1000000TPS<br>互联网中型网站：1000TPS<del>50000TPS<br>互联网小型网站：500TPS</del>10000TPS</li><li>最大响应时间（Max Response Time） 指用户发出请求或者指令到系统做出反应（响应）<br>的最大时间。</li><li>最少响应时间（Mininum ResponseTime） 指用户发出请求或者指令到系统做出反应（响<br>应）的最少时间。</li><li>90%响应时间（90% Response Time） 是指所有用户的响应时间进行排序，第 90%的响<br>应时间。</li><li>从外部看，性能测试主要关注如下三个指标<br>吞吐量：每秒钟系统能够处理的请求数、任务数。<br>响应时间：服务处理一个请求或一个任务的耗时。<br>错误率：一批请求中结果出错的请求所占比例。<h2 id="JMeter-压测"><a href="#JMeter-压测" class="headerlink" title="JMeter 压测"></a>JMeter 压测</h2><img src="https://img-blog.csdnimg.cn/473786c2f81145f6a14fc0c238272bda.png" alt="在这里插入图片描述"><br>线程组参数详解：</li><li>线程数：虚拟用户数。一个虚拟用户占用一个进程或线程。设置多少虚拟用户数在这里<br>也就是设置多少个线程数。</li><li>Ramp-Up Period(in seconds)准备时长：设置的虚拟用户数需要多长时间全部启动。如果<br>线程数为 10，准备时长为 2，那么需要 2 秒钟启动 10 个线程，也就是每秒钟启动 5 个<br>线程。</li><li>循环次数：每个线程发送请求的次数。如果线程数为 10，循环次数为 100，那么每个线<br>程发送 100 次请求。总请求数为 10*100=1000 。如果勾选了“永远”，那么所有线程会<br>一直发送请求，一到选择停止运行脚本。</li><li>Delay Thread creation until needed：直到需要时延迟线程的创建。</li><li>调度器：设置线程组启动的开始时间和结束时间(配置调度器时，需要勾选循环次数为<br>永远)</li><li>持续时间（秒）：测试持续时间，会覆盖结束时间</li><li>启动延迟（秒）：测试延迟启动时间，会覆盖启动时间</li><li>启动时间：测试启动时间，启动延迟会覆盖它。当启动时间已过，手动只需测试时当前<br>时间也会覆盖它。</li><li>结束时间：测试结束时间，持续时间会覆盖它。</li></ul><p>高级：从Html文件获取所有内含的资源<br>加载图片等，从服务器下载，并行下载</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>添加-取样器-<br><img src="https://img-blog.csdnimg.cn/1dde28e3148644bd9262cae320919723.png" alt="在这里插入图片描述"></p><h3 id="监听器"><a href="#监听器" class="headerlink" title="监听器"></a>监听器</h3><p><img src="https://img-blog.csdnimg.cn/1562bd7ce99f49c6a20ab06c6a7287c1.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/281e1a9b2f5b43c991025e677273db5e.png" alt="在这里插入图片描述"></p><h3 id="结果分析"><a href="#结果分析" class="headerlink" title="结果分析"></a>结果分析</h3><ul><li>有错误率同开发确认，确定是否允许错误的发生或者错误率允许在多大的范围内；</li><li>Throughput 吞吐量每秒请求的数大于并发数，则可以慢慢的往上面增加；若在压测的机<br>器性能很好的情况下，出现吞吐量小于并发数，说明并发数不能再增加了，可以慢慢的<br>往下减，找到最佳的并发数；</li><li>压测结束，登陆相应的 web 服务器查看 CPU 等性能指标，进行数据的分析;</li><li>最大的 tps，不断的增加并发数，加到 tps 达到一定值开始出现下降，那么那个值就是<br>最大的 tps。</li><li>最大的并发数：最大的并发数和最大的 tps 是不同的概率，一般不断增加并发数，达到<br>一个值后，服务器出现请求超时，则可认为该值为最大的并发数。</li><li>压测过程出现性能瓶颈，若压力机任务管理器查看到的 cpu、网络和 cpu 都正常，未达<br>到 90%以上，则可以说明服务器有问题，压力机没有问题。</li><li>影响性能考虑点包括：<br>数据库、应用程序、中间件（tomact、Nginx）、网络和操作系统等方面</li><li>首先考虑自己的应用属于 CPU 密集型还是 IO 密集型</li></ul><h3 id="JMeter-Address-Already-in-use-错误解决"><a href="#JMeter-Address-Already-in-use-错误解决" class="headerlink" title="JMeter Address Already in use 错误解决"></a>JMeter Address Already in use 错误解决</h3><p>windows 本身提供的端口访问机制的问题。<br>Windows 提供给 TCP/IP 链接的端口为 1024-5000，并且要四分钟来循环回收他们。就导致<br>我们在短时间内跑大量的请求时将端口占满了。<br>1.cmd 中，用 regedit 命令打开注册表<br>2.在 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters 下，<br>1 .右击 parameters，添加一个新的 DWORD，名字为 MaxUserPort<br>2 .然后双击 MaxUserPort，输入数值数据为 65534，基数选择十进制（如果是分布式运<br>行的话，控制机器和负载机器都需要这样操作哦）<br>3. 修改配置完毕之后记得重启机器才会生效<br><a href="https://support.microsoft.com/zh-cn/help/196271/when-you-try-to-connect-from-tcp-ports-grea">https://support.microsoft.com/zh-cn/help/196271/when-you-try-to-connect-from-tcp-ports-grea</a><br>ter-than-5000-you-receive-t<br>TCPTimedWaitDelay：30</p><h2 id="性能监控"><a href="#性能监控" class="headerlink" title="性能监控"></a>性能监控</h2><h3 id="jvm-内存模型"><a href="#jvm-内存模型" class="headerlink" title="jvm 内存模型"></a>jvm 内存模型</h3><p>正好在学jvm</p><h3 id="jconsole-与-jvisualvm"><a href="#jconsole-与-jvisualvm" class="headerlink" title="jconsole 与 jvisualvm"></a>jconsole 与 jvisualvm</h3><p>运行：正在运行的<br>休眠：sleep<br>等待：wait<br>驻留：线程池里面的空闲线程<br>监视：阻塞的线程，正在等待锁</p><h3 id="监控指标"><a href="#监控指标" class="headerlink" title="监控指标"></a>监控指标</h3><h4 id="中间件指标"><a href="#中间件指标" class="headerlink" title="中间件指标"></a>中间件指标</h4><p><img src="https://img-blog.csdnimg.cn/66074d0356c44a1a8cba5cb03bb71b04.png" alt="在这里插入图片描述"></p><ul><li>当前正在运行的线程数不能超过设定的最大值。一般情况下系统性能较好的情况下，线<br>程数最小值设置 50 和最大值设置 200 比较合适。</li><li>当前运行的 JDBC 连接数不能超过设定的最大值。一般情况下系统性能较好的情况下，<br>JDBC 最小值设置 50 和最大值设置 200 比较合适。</li><li>ＧＣ频率不能频繁，特别是 FULL GC 更不能频繁，一般情况下系统性能较好的情况下，<br>JVM 最小堆大小和最大堆大小分别设置 1024M 比较合适。</li></ul><h4 id="数据库指标"><a href="#数据库指标" class="headerlink" title="数据库指标"></a>数据库指标</h4><p><img src="https://img-blog.csdnimg.cn/1f81497d15b7461394721a99f51ccbe6.png" alt="在这里插入图片描述"></p><ul><li><p>SQL 耗时越小越好，一般情况下微秒级别。</p></li><li><p>命中率越高越好，一般情况下不能低于 95%。</p></li><li><p>锁等待次数越低越好，等待时间越短越好。</p><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><p><img src="https://img-blog.csdnimg.cn/a9a0b16550f04e91b8aaaa7864cda888.png" alt="在这里插入图片描述"></p></li><li><p>中间件越多，性能损失越大，大多都损失在网络交互了；</p></li><li><p>业务：</p><ul><li>Db（MySQL 优化）</li><li>模板的渲染速度（缓存）</li><li>静态资源</li></ul></li><li><p>优化</p><ul><li>开发时关闭缓存，上线时开启缓存<br>thymeleaf.cache= false</li><li>上线时 打印日志的级别要低</li><li>数据库加索引</li><li>业务逻辑修改：避免频繁数据库交互<br>比如三级分类，不要每次从数据库中查，可以一次查所有，然后通过filter，选出自己需要的</li></ul></li></ul><h3 id="JVM-分析-amp-调优"><a href="#JVM-分析-amp-调优" class="headerlink" title="JVM 分析&amp;调优"></a>JVM 分析&amp;调优</h3><p>jvm 调优，调的是稳定，并不能带给你性能的大幅提升。服务稳定的重要性就不用多说了，<br>保证服务的稳定，gc 永远会是 Java 程序员需要考虑的不稳定因素之一。复杂和高并发下的<br>服务，必须保证每次 gc 不会出现性能下降，各种性能指标不会出现波动，gc 回收规律而且<br>干净，找到合适的 jvm 设置。Full gc 最会影响性能，根据代码问题，避免 full gc 频率。可以<br>适当调大年轻代容量，让大对象可以在年轻代触发 yong gc，调整大对象在年轻代的回收频<br>次，尽可能保证大对象在年轻代回收，减小老年代缩短回收时间；</p><p>垃圾回收太频繁，消耗时间<br>-Xmx1024m -Xms1024m -Xmn512m<br>将初始最大调成1024<br>Eden区调到512m</p><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><p>为了系统性能的提升，我们一般都会将部分数据放入缓存中，加速访问。而 db 承担数据落<br>盘工作。<br>哪些数据适合放入缓存？</p><ul><li>即时性、数据一致性要求不高的</li><li>访问量大且更新频率不高的数据（读多，写少）<br>举例：电商类应用，商品分类，商品列表等适合缓存并加一个失效时间(根据数据更新频率<br>来定)，后台如果发布一个商品，买家需要 5 分钟才能看到新的商品一般还是可以接受的。</li></ul><p><img src="https://img-blog.csdnimg.cn/535c1d7a15d64eb9af0b05ee93925136.png" alt="在这里插入图片描述"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">data = cache.load(id);//从缓存加载数据</span><br><span class="line">If(data == null)&#123;</span><br><span class="line">data = db.load(id);//从数据库加载数据</span><br><span class="line">cache.put(id,data);//保存到 cache 中</span><br><span class="line">&#125;</span><br><span class="line">return data;</span><br></pre></td></tr></table></figure><p>注意：在开发中，凡是放入缓存中的数据我们都应该指定过期时间，使其可以在系统即使没有主动更新数据也能自动触发数据加载进缓存的流程。避免业务崩溃导致的数据永久不一致<br>问题。</p><h2 id="本地缓存"><a href="#本地缓存" class="headerlink" title="本地缓存"></a>本地缓存</h2><p>最简单的缓存–Map<br>本地模式在分布式下的问题：</p><ul><li>重复查询，重复存储</li><li>一致性问题<h2 id="分布式缓存-中间件"><a href="#分布式缓存-中间件" class="headerlink" title="分布式缓存-中间件"></a>分布式缓存-中间件</h2>redis也可以使用分布式集群，进行分片存储，打破容量限制<br><img src="https://img-blog.csdnimg.cn/f8e85683bfd1472ebd3011baef67a34d.png" alt="在这里插入图片描述"><h2 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h2>6、整合redis<br>1）、引入data-redis-starter<br>2）、简单配置redis的host等信息<br>3）、使用SpringBoot自动配置好的StringRedisTemplate来操作redis<br>redis-》Map；存放数据key，数据值value<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">spring:</span><br><span class="line">  redis:</span><br><span class="line">    host: 192.168.10.102</span><br><span class="line">    port: 6379</span><br><span class="line"></span><br></pre></td></tr></table></figure>给缓存中放json字符串，拿出的json字符串，还用逆转为能用的对象类型；【序列化与反序列化】<br>JSON跨语言，跨平台兼容。<h3 id="产生堆外内存溢出：OutOfDirectMemoryError"><a href="#产生堆外内存溢出：OutOfDirectMemoryError" class="headerlink" title="产生堆外内存溢出：OutOfDirectMemoryError"></a>产生堆外内存溢出：OutOfDirectMemoryError</h3></li></ul><p><strong>ps:我使用高版本没遇到问题</strong><br>1）、springboot2.0以后默认使用lettuce作为操作redis的客户端。它使用netty进行网络通信。<br>2）、lettuce的bug导致netty堆外内存溢出<br> -Xmx300m；netty如果没有指定堆外内存，默认使用指定的值作为堆外内存<br>可以通过-Dio.netty.maxDirectMemory进行设置<br><strong>解决方案：</strong> 不能使用-Dio.netty.maxDirectMemory只去调大堆外内存。<br>1）、升级lettuce客户端。<br>2）、切换使用jedis<br><strong>redisTemplate：</strong><br>lettuce、jedis操作redis的底层客户端。Spring再次封装redisTemplate；<br><strong>切换使用 jedis</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.lettuce<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lettuce-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="高并发下缓存失效问题"><a href="#高并发下缓存失效问题" class="headerlink" title="高并发下缓存失效问题"></a>高并发下缓存失效问题</h2><h3 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h3><p>指查询一个一定不存在的数据，由于缓存是不命中，将去查询数据库，但是 数据库也无此记录，我们没有将这次查询的null写入缓存，这将导致这个不 存在的数据每次请求都要到存储层去查询，失去了缓存的意义<br><strong>风险：</strong><br>利用不存在的数据进行攻击，数据库瞬时压力增大，最终导致崩溃<br><strong>解决：</strong><br>null结果缓存，并加入短暂过期时间</p><h3 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h3><p>缓存雪崩是指在我们设置缓存时key采用了相同的过期时间，  导致缓存在某一时刻同时失效，请求全部转发到DB，DB瞬时 压力过重雪崩。<br><strong>解决：</strong><br>原有的失效时间基础上增加一个随机值，比如1-5分钟随机，这 样每一个缓存的过期时间的重复率就会降低，就很难引发集体失效的事件。</p><h3 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h3><p>对于一些设置了过期时间的key，如果这些key可能会在某些 时间点被超高并发地访问，是一种非常“热点”的数据。<br>如果这个key在大量请求同时进来前正好失效，那么所有对 这个key的数据查询都落到db，我们称为缓存击穿。<br><strong>解决：</strong><br>加锁<br>大量并发只让一个去查，其他人等待，查到以后释放锁，其他 人获取到锁，先查缓存，就会有数据，不用去db。</p><h3 id="修改业务逻辑"><a href="#修改业务逻辑" class="headerlink" title="修改业务逻辑"></a>修改业务逻辑</h3><p>1、空结果缓存：解决缓存穿透<br>2、设置过期时间（加随机值）：解决缓存雪崩<br>3、加锁：解决缓存击穿</p><h4 id="加锁"><a href="#加锁" class="headerlink" title="加锁"></a>加锁</h4><p>只要是同一把锁，就能锁住需要这个锁的所有线程<br>需要考虑：在哪加锁</p><ul><li>在这个类上加锁：synchronized (this)：SpringBoot所有的组件在容器中都是单例的。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; getCatalogJsonFromDbWithLocalLock() &#123;</span><br><span class="line"><span class="comment">//加锁</span></span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        <span class="comment">//业务逻辑</span></span><br><span class="line">            <span class="keyword">return</span> getDataFromDB();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">private</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; getDataFromDB() &#123;</span><br><span class="line">        <span class="comment">//1、先确认缓存确实没有</span></span><br><span class="line">        String catalogJSON = stringRedisTemplate.opsForValue().get(<span class="string">&quot;catalogJSON&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(catalogJSON)) &#123;</span><br><span class="line">            <span class="comment">//缓存不为null直接返回</span></span><br><span class="line">            Map&lt;String, List&lt;Catelog2Vo&gt;&gt; result = JSON.parseObject(catalogJSON, <span class="keyword">new</span> TypeReference&lt;Map&lt;String, List&lt;Catelog2Vo&gt;&gt;&gt;() &#123;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2、查询数据库</span></span><br><span class="line">        System.out.println(<span class="string">&quot;查询了数据库.....&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3、查到的数据再放入缓存，将对象转为json放在缓存中</span></span><br><span class="line">        String s = JSON.toJSONString(parent_cid);</span><br><span class="line">       stringRedisTemplate.opsForValue().set(<span class="string">&quot;catalogJSON&quot;</span>, s, <span class="number">1</span>, TimeUnit.DAYS);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> parent_cid;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>本地锁：synchronized，JUC（Lock）<br>不会只让一个请求进来，有8个服务器，会有8个请求进来，但是也可以接受。</li><li>得到锁以后，我们应该再去缓存中确定一次，如果没有才需要继续查询。<br><img src="https://img-blog.csdnimg.cn/0cc99c187e814d8b92544c6c756a2c11.png" alt="在这里插入图片描述"></li><li>在分布式情况下，想要锁住所有，必须使用分布式锁，分布式锁效率较差。<h4 id="锁的时序问题"><a href="#锁的时序问题" class="headerlink" title="锁的时序问题"></a>锁的时序问题</h4>如果1号请求查完数据库立马就释放锁，则结果还没放入缓存，2号请求就进来了，放入缓存需要网络交互，是个较慢的过程。因此2号确认缓存存在时依然没有，又会进行数据库交互。<br><img src="https://img-blog.csdnimg.cn/0701eb37a1a44607a3e2f487d5e69097.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f69390b8ad7d4defbb8eabc9d4d6a17f.png" alt="在这里插入图片描述"><h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><img src="https://img-blog.csdnimg.cn/91b07a072e24412482657d7df1d09300.png" alt="在这里插入图片描述"></li></ul><p>我们可以同时去一个地方“占坑”，如果占到，就执行逻辑。否则就必须等待，直到释放锁。<br>“占坑”可以去redis，可以去数据库，可以去任何大家都能访问的地方。 等待可以自旋的方式。</p><p>set lock 1111 EX 300 NX<br>EX秒 PX毫秒<br><img src="https://img-blog.csdnimg.cn/b71e610090cd442e9b9a8026ad399b02.png" alt="在这里插入图片描述"><br>问题：<br>1、setnx占好了位，业务代码异常或者程序在页面过程 中宕机。没有执行删除锁逻辑，这就造成了死锁</p><p>解决：<br>设置锁的自动过期，即使没有删除，会自动删除</p><p>问题：<br>1、setnx设置好，正要去设置过期时间，宕机。又死锁了。</p><p>解决：<br>设置过期时间和占位必须是原子的。redis支持使用setnx ex<br>命令</p><p>问题：<br>1、删除锁直接删除？？？<br>如果由于业务时间很长，锁自己过期了，我们 直接删除，有可能把别人正在持有的锁删除了。</p><p>解决：<br>占锁的时候，值指定为uuid，每个人匹配是自己的锁才删除。</p><p>问题：<br>1、如果正好判断是当前值，正要删除锁的时候，锁已经过期， 别人已经设置到了新的值。那么我们删除的是别人的锁</p><p>解决：<br>删除锁必须保证原子性。使用redis+Lua脚本完成<br><strong>脚本能够保证原子性：</strong>因为这个比较操作和删除操作是在Redis里面运行的，就不会因为网络阻塞原因把别人的锁删掉</p><p>String script = “if redis.call(‘get’, KEYS[1]) == ARGV[1] then return  redis.call(‘del’, KEYS[1]) else return 0 end”;<br>保证加锁【占位+过期时间】和删除锁【判断+删除】的原子性。 更难的事情，<strong>锁的自动续期–将锁的时间放长点</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, List&lt;Catelog2Vo&gt;&gt; getCatalogJsonFromDbWithRedisLock() &#123;</span><br><span class="line">        <span class="comment">//1、占分布式锁。去redis占坑</span></span><br><span class="line">        String uuid = UUID.randomUUID().toString();</span><br><span class="line">        Boolean lock = redisTemplate.opsForValue().setIfAbsent(<span class="string">&quot;lock&quot;</span>, uuid, <span class="number">300</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">if</span> (lock) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;获取分布式锁成功...&quot;</span>);</span><br><span class="line">            <span class="comment">//加锁成功... 执行业务</span></span><br><span class="line">            <span class="comment">//2、设置过期时间，必须和加锁是同步的，原子的</span></span><br><span class="line">            <span class="comment">//redisTemplate.expire(&quot;lock&quot;,30,TimeUnit.SECONDS);</span></span><br><span class="line">            Map&lt;String, List&lt;Catelog2Vo&gt;&gt; dataFromDb;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                dataFromDb = getDataFromDb();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">                <span class="comment">//删除锁</span></span><br><span class="line">                Long lock1 = redisTemplate.execute(<span class="keyword">new</span> DefaultRedisScript&lt;Long&gt;(script, Long.class)</span><br><span class="line">                        , Arrays.asList(<span class="string">&quot;lock&quot;</span>), uuid);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取值对比+对比成功删除=原子操作  lua脚本解锁</span></span><br><span class="line"><span class="comment">//            String lockValue = redisTemplate.opsForValue().get(&quot;lock&quot;);</span></span><br><span class="line"><span class="comment">//            if(uuid.equals(lockValue))&#123;</span></span><br><span class="line"><span class="comment">//                //删除我自己的锁</span></span><br><span class="line"><span class="comment">//                redisTemplate.delete(&quot;lock&quot;);//删除锁</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line">            <span class="keyword">return</span> dataFromDb;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//加锁失败...重试。synchronized ()</span></span><br><span class="line">            <span class="comment">//休眠100ms重试</span></span><br><span class="line">            System.out.println(<span class="string">&quot;获取分布式锁失败...等待重试&quot;</span>);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> getCatalogJsonFromDbWithRedisLock();<span class="comment">//自旋的方式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2><p>redisson的锁继承了JUC的锁<br>7、整合redisson作为分布式锁等功能框架<br> 1）、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.12.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 2）、配置redisson<br> MyRedissonConfig给容器中配置一个RedissonClient实例即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRedissonConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 所有对Redisson的使用都是通过RedissonClient对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(destroyMethod=&quot;shutdown&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redisson</span><span class="params">(<span class="meta">@Value(&quot;$&#123;spring.redis.host&#125;&quot;)</span> String url)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//1、创建配置</span></span><br><span class="line">        <span class="comment">//Redis url should start with redis:// or rediss://</span></span><br><span class="line">        Config config = <span class="keyword">new</span> Config();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://&quot;</span>+url+<span class="string">&quot;:6379&quot;</span>);</span><br><span class="line">        <span class="comment">//2、根据Config创建出RedissonClient示例</span></span><br><span class="line">        RedissonClient redissonClient = Redisson.create(config);</span><br><span class="line">        <span class="keyword">return</span> redissonClient;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 3）、使用<br> 参照文档做。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>1、获取一把锁，只要锁的名字一样，就是同一把锁<br>2、加锁</p><pre><code>    lock.lock(); //阻塞式等待。默认加的锁都是30s时间。</code></pre><p>1）、锁的自动续期，如果业务超长，运行期间自动给锁续上新的30s。不用担心业务时间长，锁自动过期被删掉<br>2）、加锁的业务只要运行完成，就不会给当前锁续期，即使不手动解锁，锁默认在30s以后自动删除。</p><pre><code>lock.lock(10,TimeUnit.SECONDS); //10秒自动解锁,自动解锁时间一定要大于业务的执行时间。</code></pre><p>问题：lock.lock(10,TimeUnit.SECONDS); 在锁时间到了以后，不会自动续期。<br>1、如果我们传递了锁的超时时间，就发送给redis执行脚本，进行占锁，默认超时就是我们指定的时间<br>2、如果我们未指定锁的超时时间，就使用30 * 1000【LockWatchdogTimeout看门狗的默认时间】;<br>只要占锁成功，就会启动一个定时任务【重新给锁设置过期时间，新的过期时间就是看门狗的默认时间】,每隔10s都会自动再次续期，续成30s<br>    internalLockLeaseTime【看门狗时间】 / 3,10s</p><p><strong>因此，使用lock.lock(30,TimeUnit.SECONDS);省掉了整个续期操作。手动解锁。</strong></p><h3 id="读写锁"><a href="#读写锁" class="headerlink" title="读写锁"></a>读写锁</h3><p>保证一定能读到最新数据,修改期间，写锁是一个排他锁（互斥锁、独享锁）。读锁是一个共享锁<br>写锁没释放读就必须等待<br>读 + 读： 相当于无锁，并发读，只会在redis中记录好，所有当前的读锁。他们都会同时加锁成功<br>写 + 读： 等待写锁释放<br>写 + 写： 阻塞方式<br>读 + 写： 有读锁。写也需要等待。<br>只要有写的存在，都必须等待</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@GetMapping(&quot;/write&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">writeValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RReadWriteLock lock = redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        RLock rLock = lock.writeLock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//1、改数据加写锁，读数据加读锁</span></span><br><span class="line">            rLock.lock();</span><br><span class="line">            System.out.println(<span class="string">&quot;写锁加锁成功...&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">            s = UUID.randomUUID().toString();</span><br><span class="line">            Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">            redisTemplate.opsForValue().set(<span class="string">&quot;writeValue&quot;</span>,s);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rLock.unlock();</span><br><span class="line">            System.out.println(<span class="string">&quot;写锁释放&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/read&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">readValue</span><span class="params">()</span></span>&#123;</span><br><span class="line">        RReadWriteLock lock = redisson.getReadWriteLock(<span class="string">&quot;rw-lock&quot;</span>);</span><br><span class="line"><span class="comment">//        ReentrantReadWriteLock writeLock = new ReentrantReadWriteLock();</span></span><br><span class="line">        String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="comment">//加读锁</span></span><br><span class="line">        RLock rLock = lock.readLock();</span><br><span class="line">        rLock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;读锁加锁成功&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">            s = redisTemplate.opsForValue().get(<span class="string">&quot;writeValue&quot;</span>);</span><br><span class="line">            Thread.sleep(<span class="number">30000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            rLock.unlock();</span><br><span class="line">            System.out.println(<span class="string">&quot;读锁释放&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 车库停车，</span></span><br><span class="line"><span class="comment">     * 3车位</span></span><br><span class="line"><span class="comment">     * 信号量也可以用作分布式限流；</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/park&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">park</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        RSemaphore park = redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line"><span class="comment">//        park.acquire();//获取一个信号，获取一个值,占一个车位(阻塞方法：获取不到一直请求)</span></span><br><span class="line">        <span class="keyword">boolean</span> b = park.tryAcquire();<span class="comment">//只请求一次</span></span><br><span class="line">        <span class="keyword">if</span>(b)&#123;</span><br><span class="line">            <span class="comment">//执行业务</span></span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok=&gt;&quot;</span>+b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/go&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">go</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        RSemaphore park = redisson.getSemaphore(<span class="string">&quot;park&quot;</span>);</span><br><span class="line">        park.release();<span class="comment">//释放一个车位</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line"><span class="comment">//        Semaphore semaphore = new Semaphore(5);</span></span><br><span class="line"><span class="comment">//        semaphore.release();</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        semaphore.acquire();</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ok&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="闭锁"><a href="#闭锁" class="headerlink" title="闭锁"></a>闭锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 放假，锁门</span></span><br><span class="line"><span class="comment">     * 1班没人了，2</span></span><br><span class="line"><span class="comment">     * 5个班全部走完，我们可以锁大门</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/lockDoor&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lockDoor</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        RCountDownLatch door = redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">        door.trySetCount(<span class="number">5</span>);</span><br><span class="line">        door.await(); <span class="comment">//等待闭锁都完成</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;放假了...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/gogogo/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">gogogo</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span></span>&#123;</span><br><span class="line">        RCountDownLatch door = redisson.getCountDownLatch(<span class="string">&quot;door&quot;</span>);</span><br><span class="line">        door.countDown();<span class="comment">//计数减一；</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        CountDownLatch</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> id+<span class="string">&quot;班的人都走了...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="锁的粒度："><a href="#锁的粒度：" class="headerlink" title="锁的粒度："></a>锁的粒度：</h3><p>锁的名字。 锁的粒度，越细越快。<br>具体缓存的是某个数据，11-号商品；  product-11-lock product-12-lock   product-lock</p><h3 id="缓存数据一致性"><a href="#缓存数据一致性" class="headerlink" title="缓存数据一致性"></a>缓存数据一致性</h3><p>缓存数据一致性</p><h4 id="双写模式"><a href="#双写模式" class="headerlink" title="双写模式"></a>双写模式</h4><p><img src="https://img-blog.csdnimg.cn/e3d6f532c0f641749e55798975882a4b.png" alt="在这里插入图片描述"></p><h4 id="失效模式"><a href="#失效模式" class="headerlink" title="失效模式"></a>失效模式</h4><p><img src="https://img-blog.csdnimg.cn/ed8efda9de5c4a3787343d63fcf0721f.png" alt="在这里插入图片描述"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>无论是双写模式还是失效模式，都会导致缓存的不一致问题。即多个实例同时更新会出事。怎么办？<br>1、如果是用户纬度数据（订单数据、用户数据），这种并发几率非常小，不用考虑这个问题，缓存数据加 上过期时间，每隔一段时间触发读的主动更新即可<br>2、如果是菜单，商品介绍等基础数据，延时更新不会影响业务。也可以去使用canal订阅binlog的方式。<br>3、缓存数据+过期时间也足够解决大部分业务对于缓存的要求。<br>4、通过加锁保证并发读写，写写的时候按顺序排好队。读读无所谓。所以适合使用读写锁。（业务不关心 脏数据，允许临时脏数据可忽略）；</p><p>总结：<br>我们能放入缓存的数据本就不应该是实时性、一致性要求超高的。所以缓存数据的时候加上过期时间，保 证每天拿到当前最新数据即可。<br>我们不应该过度设计，增加系统的复杂性<br>遇到实时性、一致性要求高的数据，就应该查数据库，即使慢点。</p><h4 id="Canal"><a href="#Canal" class="headerlink" title="Canal"></a>Canal</h4><p>canal伪装mysql的从服务器<br><strong>使用Canal更新缓存</strong><br><img src="https://img-blog.csdnimg.cn/e2ec356e7275465a85abcf6a75da5b2c.png" alt="在这里插入图片描述"><br><strong>使用Canal解决数据异构</strong><br>推荐<br><img src="https://img-blog.csdnimg.cn/e82c98ffd093485a816a23ecc97c5d0a.png" alt="在这里插入图片描述"></p><h2 id="Spring-Cache"><a href="#Spring-Cache" class="headerlink" title="Spring Cache"></a>Spring Cache</h2><p>Spring 从 3.1 开始定义了 org.springframework.cache.Cache<br>和 org.springframework.cache.CacheManager 接口来统一不同的缓存技术；<br>并支持使用 JCache（JSR-107）注解简化我们开发；<br><img src="https://img-blog.csdnimg.cn/17150d189309490fbb363ab398948a87.png" alt="在这里插入图片描述"><br>整合SpringCache简化缓存开发<br> 1）、引入依赖<br> spring-boot-starter-cache、spring-boot-starter-data-redis<br> 2）、写配置<br> （1）、自动配置了哪些<br> CacheAuroConfiguration会导入 RedisCacheConfiguration；<br> 自动配好了缓存管理器RedisCacheManager<br> （2）、配置使用redis作为缓存<br> spring.cache.type=redis<br> 3）、测试使用缓存<br> @Cacheable: Triggers cache population.：触发将数据保存到缓存的操作<br> @CacheEvict: Triggers cache eviction.：触发将数据从缓存删除的操作<br> @CachePut: Updates the cache without interfering with the method execution.：不影响方法执行更新缓存<br> @Caching: Regroups multiple cache operations to be applied on a method.：组合以上多个操作<br> @CacheConfig: Shares some common cache-related settings at class-level.：在类级别共享缓存的相同配置<br> 1）、开启缓存功能 @EnableCaching<br> 2）、只需要使用注解就能完成缓存操作</p><p> 4）、原理：<br> CacheAutoConfiguration -&gt;  RedisCacheConfiguration -&gt;<br> 自动配置了RedisCacheManager-&gt;初始化所有的缓存-&gt;每个缓存决定使用什么配置<br> -&gt;如果redisCacheConfiguration有就用已有的，没有就用默认配置<br> -&gt;想改缓存的配置，只需要给容器中放一个RedisCacheConfiguration即可<br> -&gt;就会应用到当前RedisCacheManager管理的所有缓存分区中</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>1、每一个需要缓存的数据我们都来指定要放到那个名字的缓存。【缓存的分区(按照业务类型分)】<br>2、 @Cacheable({“category”})<br>代表当前方法的结果需要缓存，如果缓存中有，方法不用调用。<br>如果缓存中没有，会调用方法，最后将方法的结果放入缓存<br>3、默认行为<br>1）、如果缓存中有，方法不用调用。<br>2）、key默认自动生成；缓存的名字::<code>SimpleKey [](自主生成的key值)</code><br>3）、缓存的value的值。默认使用jdk序列化机制，将序列化后的数据存到redis<br>4）、默认ttl时间 -1；</p><p>自定义：<br>1）、指定生成的缓存使用的key：  key属性指定，接受一个SpEL（动态获取）<br>SpEL的详细<a href="https://docs.spring.io/spring/docs/5.1.12.RELEASE/spring-framework-reference/integration.html#cache-spel-context">https://docs.spring.io/spring/docs/5.1.12.RELEASE/spring-framework-reference/integration.html#cache-spel-context</a><br>@Cacheable(value = {“category”},key = “‘level1Categorys’”)<br>由于””中是变量，用单引号表示字符串<br>    @Cacheable(value = {“category”},key = “#root.method.name”)<br>2）、指定缓存的数据的存活时间： 配置文件中修改ttl</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">spring</span><br><span class="line">  cache:</span><br><span class="line">    type: redis</span><br><span class="line">    redis:</span><br><span class="line">      time-to-live: 3600000</span><br><span class="line">      use-key-prefix: true #默认分区名-&gt; 分区：key</span><br><span class="line">      cache-null-values: true #缓存穿透，缓存空值</span><br></pre></td></tr></table></figure><p>3）、将数据保存为json格式:<br>自定义RedisCacheConfiguration即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(CacheProperties.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCacheConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function">RedisCacheConfiguration <span class="title">redisCacheConfiguration</span><span class="params">(CacheProperties cacheProperties)</span></span>&#123;</span><br><span class="line">        RedisCacheConfiguration config = RedisCacheConfiguration.defaultCacheConfig();</span><br><span class="line"></span><br><span class="line">        config=config.serializeKeysWith(RedisSerializationContext.SerializationPair.fromSerializer(</span><br><span class="line">               <span class="keyword">new</span> StringRedisSerializer()</span><br><span class="line">        ));</span><br><span class="line">        config=config.serializeValuesWith(RedisSerializationContext.SerializationPair.fromSerializer(</span><br><span class="line">                <span class="keyword">new</span> GenericJackson2JsonRedisSerializer()</span><br><span class="line">        ));</span><br><span class="line">        CacheProperties.Redis redisProperties = cacheProperties.getRedis();</span><br><span class="line">        <span class="comment">//将配置文件中的所有配置都生效</span></span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getTimeToLive() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            config = config.entryTtl(redisProperties.getTimeToLive());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (redisProperties.getKeyPrefix() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            config = config.prefixKeysWith(redisProperties.getKeyPrefix());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isCacheNullValues()) &#123;</span><br><span class="line">            config = config.disableCachingNullValues();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!redisProperties.isUseKeyPrefix()) &#123;</span><br><span class="line">            config = config.disableKeyPrefix();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> config;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置文件中的东西没有用上；</strong></p><p>1、原来和配置文件绑定的配置类是这样子的<br>@ConfigurationProperties(prefix = “spring.cache”)<br>public class CacheProperties<br>不在容器中<br>2、要让他生效<br>@EnableConfigurationProperties(CacheProperties.class)</p><p><strong>级联更新所有关联的数据</strong><br>@CacheEvict:失效模式<br>1、同时进行多种缓存操作  @Caching</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Caching(evict = &#123;</span></span><br><span class="line"><span class="meta">     @CacheEvict(value = &quot;category&quot;,key = &quot;&#x27;getLevel1Categorys&#x27;&quot;),</span></span><br><span class="line"><span class="meta">     @CacheEvict(value = &quot;category&quot;,key = &quot;&#x27;getCatalogJson&#x27;&quot;)</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br></pre></td></tr></table></figure><p>2、指定删除某个分区下的所有数据 @CacheEvict(value = “category”,allEntries = true)<br>3、存储同一类型的数据，都可以指定成同一个分区。分区名默认就是缓存的前缀</p><p><strong>@CacheEvict(value = “category”,allEntries = true) //失效模式<br>@CachePut //双写模式:要有返回值</strong></p><p><strong>4、Spring-Cache的不足；</strong><br>1）、读模式：<br>缓存穿透：查询一个null数据。解决：缓存空数据；ache-null-values=true<br>缓存击穿：大量并发进来同时查询一个正好过期的数据。解决：加锁；？默认是无加锁的;sync = true（加锁，解决击穿）<br>    @Cacheable(value = {“category”},key = “#root.method.name”,sync = true)<br>只有 @Cacheable中有加本地锁，也够用了<br>缓存雪崩：大量的key同时过期。解决：加随机时间。加上过期时间。：spring.cache.redis.time-to-live=3600000<br>2）、写模式：（缓存与数据库一致）<br>1）、读写加锁。<br>2）、引入Canal，感知到MySQL的更新去更新数据库<br>3）、读多写多，直接去数据库查询就行</p><p>总结：<br>常规数据（读多写少，即时性，一致性要求不高的数据）；完全可以使用Spring-Cache；写模式（只要缓存的数据有过期时间就足够了）<br>特殊数据：特殊设计</p><p>原理：<br>CacheManager(RedisCacheManager)-&gt;Cache(RedisCache)-&gt;Cache负责缓存的读写</p><h1 id="检索"><a href="#检索" class="headerlink" title="检索"></a>检索</h1><h2 id="查询条件实体类"><a href="#查询条件实体类" class="headerlink" title="查询条件实体类"></a>查询条件实体类</h2><p><strong>封装页面所有可能传递过来的查询条件</strong>，否则每个条件都作为方法参数过于不方便<br>catalog3Id=225&amp;keyword=小米&amp;sort=saleCount_asc&amp;hasStock=0/1&amp;brandId=1&amp;brandId=2<br>&amp;attrs=1_5寸:8寸&amp;attrs=2_16G:8G</p><p>自定义拼装检索条件</p><p><strong>全文检索：skuTitle-》keyword</strong><br>1、从主页点击分类进入<br>2、搜索关键词</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String keyword;<span class="comment">//页面传递过来的全文匹配关键字  v</span></span><br><span class="line"><span class="keyword">private</span> Long catalog3Id;<span class="comment">//三级分类id   v</span></span><br></pre></td></tr></table></figure><p><strong>排序：saleCount（销量）、hotScore（热度分-综合排序）、skuPrice（价格）（每次只能一个）</strong><br>sort=saleCount_asc/desc<br>sort=skuPrice_asc/desc<br>sort=hotScore_asc/desc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> String sort;<span class="comment">//排序条件 v</span></span><br></pre></td></tr></table></figure><p><strong>过滤：hasStock(有货)、skuPrice区间、brandId、catalog3Id、attrs</strong><br>hasStock(是否有货)、skuPrice区间、brandId、catalog3Id、attrs<br>hasStock=0/1<br>skuPrice=1_500/<em>500/500</em><br>brandId=1 (允许多选)<br>attrs=2_5寸:6寸 (2号属性：2个值)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer hasStock;<span class="comment">//是否只显示有货  v 0（无库存）1（有库存）</span></span><br><span class="line"><span class="keyword">private</span> String skuPrice;<span class="comment">//价格区间查询  v</span></span><br><span class="line"><span class="keyword">private</span> List&lt;Long&gt; brandId;<span class="comment">//按照品牌进行查询，可以多选  v</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; attrs;<span class="comment">//按照属性进行筛选  v</span></span><br><span class="line"><span class="keyword">private</span> Integer pageNum = <span class="number">1</span>;<span class="comment">//页码</span></span><br></pre></td></tr></table></figure><p><strong>聚合：attrs</strong><br><img src="https://img-blog.csdnimg.cn/b858f41ff95541a8936295355f3787bc.png" alt="在这里插入图片描述"></p><h2 id="返回结果实体类"><a href="#返回结果实体类" class="headerlink" title="返回结果实体类"></a>返回结果实体类</h2><p>商品信息、分页信息、涉及到的品牌、涉及到的所有分类、涉及到的所有属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SearchResult</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询到的所有商品信息</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SkuEsModel&gt; products;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 以下是分页信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Integer pageNum;<span class="comment">//当前页码</span></span><br><span class="line">    <span class="keyword">private</span> Long total;<span class="comment">//总记录数</span></span><br><span class="line">    <span class="keyword">private</span> Integer totalPages;<span class="comment">//总页码</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Integer&gt; pageNavs;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;BrandVo&gt; brands;<span class="comment">//当前查询到的结果，所有涉及到的品牌</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;CatalogVo&gt; catalogs;<span class="comment">//当前查询到的结果，所有涉及到的所有分类</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;AttrVo&gt; attrs;<span class="comment">//当前查询到的结果，所有涉及到的所有属性</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//==========以上是返回给页面的所有信息============</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//面包屑导航数据</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;NavVo&gt; navs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> List&lt;Long&gt; attrIds = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NavVo</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String navName;</span><br><span class="line">        <span class="keyword">private</span> String navValue;</span><br><span class="line">        <span class="keyword">private</span> String link;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">BrandVo</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Long brandId;</span><br><span class="line">        <span class="keyword">private</span> String brandName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> String brandImg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CatalogVo</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Long catalogId;</span><br><span class="line">        <span class="keyword">private</span> String catalogName;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">AttrVo</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> Long attrId;</span><br><span class="line">        <span class="keyword">private</span> String attrName;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; attrValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="es设计"><a href="#es设计" class="headerlink" title="es设计"></a>es设计</h2><p>全文检索用match，参与评分<br>其他条件用filter，不参与评分，速度更快</p><p>如果是嵌入式的属性，查询、聚合，分析都应使用嵌入式的</p><p><strong>模糊匹配、过滤(按照属性、分类、品牌、价格区间、库存)、排序、分页、高亮</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line">GET gulimall_product/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;match&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;skuTitle&quot;</span>: <span class="string">&quot;华为&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;catalogId&quot;</span>: <span class="string">&quot;225&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;brandId&quot;</span>: [</span><br><span class="line">              <span class="string">&quot;1&quot;</span>,</span><br><span class="line">              <span class="string">&quot;2&quot;</span></span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;nested&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;attrs&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;attrs.attrId&quot;</span>: &#123;</span><br><span class="line">                        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;3&quot;</span></span><br><span class="line">                      &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;,</span><br><span class="line">                  &#123;</span><br><span class="line">                    <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">                      <span class="attr">&quot;attrs.attrValue&quot;</span>: [</span><br><span class="line">                        <span class="string">&quot;黑色&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;白色&quot;</span></span><br><span class="line">                      ]</span><br><span class="line">                    &#125;</span><br><span class="line">                  &#125;</span><br><span class="line">                ]</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;hasStock&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;true&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;range&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;skuPrice&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;gte&quot;</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">&quot;lte&quot;</span>: <span class="number">10000</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;skuPrice&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">5</span>,</span><br><span class="line">  <span class="attr">&quot;highlight&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;fields&quot;</span>: &#123;<span class="attr">&quot;skuTitle&quot;</span>: &#123;&#125;&#125;, </span><br><span class="line">    <span class="attr">&quot;pre_tags&quot;</span>: <span class="string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;post_tags&quot;</span>: <span class="string">&quot;&lt;/b&gt;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>聚合分析</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">GET gulimall_product/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;match_all&quot;</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;brand_agg&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;brandId&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;brand_name_agg&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;brandName&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;brand_img_agg&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;brandImg&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;catalog_agg&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;catalogId&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;catalog_name_agg&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;catalogName&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;attr_agg&quot;</span>:&#123;</span><br><span class="line">      <span class="attr">&quot;nested&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;path&quot;</span>: <span class="string">&quot;attrs&quot;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;attr_id_agg&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;attrs.attrId&quot;</span>,</span><br><span class="line">            <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;attr_name_agg&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;attrs.attrName&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">&quot;attr_value_agg&quot;</span>:&#123;</span><br><span class="line">              <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">                <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;attrs.attrValue&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;size&quot;</span>: <span class="number">10</span></span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="将dsl转为代码"><a href="#将dsl转为代码" class="headerlink" title="将dsl转为代码"></a>将dsl转为代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SearchRequest <span class="title">buildSearchRequrest</span><span class="params">(SearchParam param)</span> </span>&#123;</span><br><span class="line">    SearchSourceBuilder sourceBuilder = <span class="keyword">new</span> SearchSourceBuilder();<span class="comment">//构建DSL语句的</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询：过滤（按照属性，分类，品牌，价格区间，库存）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//1、构建bool - query</span></span><br><span class="line">    BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line">    <span class="comment">//1.1、must-模糊匹配，</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(param.getKeyword())) &#123;</span><br><span class="line">        boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;skuTitle&quot;</span>, param.getKeyword()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.2、bool - filter - 按照三级分类id查询</span></span><br><span class="line">    <span class="keyword">if</span> (param.getCatalog3Id() != <span class="keyword">null</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;catalogId&quot;</span>, param.getCatalog3Id()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.2、bool - filter - 按照品牌id查询</span></span><br><span class="line">    <span class="keyword">if</span> (param.getBrandId() != <span class="keyword">null</span> &amp;&amp; param.getBrandId().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termsQuery(<span class="string">&quot;brandId&quot;</span>, param.getBrandId()));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//1.2、bool - filter - 按照所有指定的属性进行查询</span></span><br><span class="line">    <span class="keyword">if</span> (param.getAttrs() != <span class="keyword">null</span> &amp;&amp; param.getAttrs().size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String attrStr : param.getAttrs()) &#123;</span><br><span class="line">            <span class="comment">//attrs=1_5寸:8寸&amp;attrs=2_16G:8G</span></span><br><span class="line">            BoolQueryBuilder nestedboolQuery = QueryBuilders.boolQuery();</span><br><span class="line">            <span class="comment">//attr = 1_5寸:8寸</span></span><br><span class="line">            String[] s = attrStr.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">            String attrId = s[<span class="number">0</span>]; <span class="comment">//检索的属性id</span></span><br><span class="line">            String[] attrValues = s[<span class="number">1</span>].split(<span class="string">&quot;:&quot;</span>); <span class="comment">//这个属性的检索用的值</span></span><br><span class="line">            nestedboolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;attrs.attrId&quot;</span>, attrId));</span><br><span class="line">            nestedboolQuery.must(QueryBuilders.termsQuery(<span class="string">&quot;attrs.attrValue&quot;</span>, attrValues));</span><br><span class="line">            <span class="comment">//每一个必须都得生成一个nested查询</span></span><br><span class="line">            NestedQueryBuilder nestedQuery = QueryBuilders.nestedQuery(<span class="string">&quot;attrs&quot;</span>, nestedboolQuery, ScoreMode.None);</span><br><span class="line">            boolQuery.filter(nestedQuery);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.2、bool - filter - 按照库存是否有进行查询</span></span><br><span class="line">    <span class="keyword">if</span>(param.getHasStock() != <span class="keyword">null</span>)&#123;</span><br><span class="line">        boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;hasStock&quot;</span>, param.getHasStock() == <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.2、bool - filter - 按照价格区间</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(param.getSkuPrice())) &#123;</span><br><span class="line">        <span class="comment">//1_500/_500/500_</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * &quot;range&quot;: &#123;</span></span><br><span class="line"><span class="comment">         *             &quot;skuPrice&quot;: &#123;</span></span><br><span class="line"><span class="comment">         *               &quot;gte&quot;: 0,</span></span><br><span class="line"><span class="comment">         *               &quot;lte&quot;: 6000</span></span><br><span class="line"><span class="comment">         *             &#125;</span></span><br><span class="line"><span class="comment">         *           &#125;</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(<span class="string">&quot;skuPrice&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String[] s = param.getSkuPrice().split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (s.length == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">//区间</span></span><br><span class="line">            rangeQuery.gte(s[<span class="number">0</span>]).lte(s[<span class="number">1</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s.length == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (param.getSkuPrice().startsWith(<span class="string">&quot;_&quot;</span>)) &#123;</span><br><span class="line">                rangeQuery.lte(s[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (param.getSkuPrice().endsWith(<span class="string">&quot;_&quot;</span>)) &#123;</span><br><span class="line">                rangeQuery.gte(s[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        boolQuery.filter(rangeQuery);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//把以前的所有条件都拿来进行封装</span></span><br><span class="line">    sourceBuilder.query(boolQuery);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 排序，分页，高亮，</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.1、排序</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(param.getSort())) &#123;</span><br><span class="line">        String sort = param.getSort();</span><br><span class="line">        <span class="comment">//sort=hotScore_asc/desc</span></span><br><span class="line">        String[] s = sort.split(<span class="string">&quot;_&quot;</span>);</span><br><span class="line">        SortOrder order = s[<span class="number">1</span>].equalsIgnoreCase(<span class="string">&quot;asc&quot;</span>) ? SortOrder.ASC : SortOrder.DESC;</span><br><span class="line">        sourceBuilder.sort(s[<span class="number">0</span>], order);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//2.2、分页  pageSize:5</span></span><br><span class="line">    <span class="comment">//  pageNum:1  from:0  size:5  [0,1,2,3,4]</span></span><br><span class="line">    <span class="comment">// pageNum:2  from:5   size:5</span></span><br><span class="line">    <span class="comment">//from = (pageNum-1)*size</span></span><br><span class="line">    sourceBuilder.from((param.getPageNum() - <span class="number">1</span>) * EsConstant.PRODUCT_PAGESIZE);</span><br><span class="line">    sourceBuilder.size(EsConstant.PRODUCT_PAGESIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.3、高亮</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(param.getKeyword())) &#123;</span><br><span class="line">        HighlightBuilder builder = <span class="keyword">new</span> HighlightBuilder();</span><br><span class="line">        builder.field(<span class="string">&quot;skuTitle&quot;</span>);</span><br><span class="line">        builder.preTags(<span class="string">&quot;&lt;b style=&#x27;color:red&#x27;&gt;&quot;</span>);</span><br><span class="line">        builder.postTags(<span class="string">&quot;&lt;/b&gt;&quot;</span>);</span><br><span class="line">        sourceBuilder.highlighter(builder);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 聚合分析</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//1、品牌聚合</span></span><br><span class="line">    TermsAggregationBuilder brand_agg = AggregationBuilders.terms(<span class="string">&quot;brand_agg&quot;</span>);</span><br><span class="line">    brand_agg.field(<span class="string">&quot;brandId&quot;</span>).size(<span class="number">50</span>);</span><br><span class="line">    <span class="comment">//品牌聚合的子聚合</span></span><br><span class="line">    brand_agg.subAggregation(AggregationBuilders.terms(<span class="string">&quot;brand_name_agg&quot;</span>).field(<span class="string">&quot;brandName&quot;</span>).size(<span class="number">1</span>));</span><br><span class="line">    brand_agg.subAggregation(AggregationBuilders.terms(<span class="string">&quot;brand_img_agg&quot;</span>).field(<span class="string">&quot;brandImg&quot;</span>).size(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//TODO 1、聚合brand</span></span><br><span class="line">    sourceBuilder.aggregation(brand_agg);</span><br><span class="line">    <span class="comment">//2、分类聚合 catalog_agg</span></span><br><span class="line">    TermsAggregationBuilder catalog_agg = AggregationBuilders.terms(<span class="string">&quot;catalog_agg&quot;</span>).field(<span class="string">&quot;catalogId&quot;</span>).size(<span class="number">20</span>);</span><br><span class="line">    catalog_agg.subAggregation(AggregationBuilders.terms(<span class="string">&quot;catalog_name_agg&quot;</span>).field(<span class="string">&quot;catalogName&quot;</span>).size(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//TODO 2、聚合catalog</span></span><br><span class="line">    sourceBuilder.aggregation(catalog_agg);</span><br><span class="line">    <span class="comment">//3、属性聚合 attr_agg</span></span><br><span class="line">    NestedAggregationBuilder attr_agg = AggregationBuilders.nested(<span class="string">&quot;attr_agg&quot;</span>, <span class="string">&quot;attrs&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合出当前所有的attrId</span></span><br><span class="line">    TermsAggregationBuilder attr_id_agg = AggregationBuilders.terms(<span class="string">&quot;attr_id_agg&quot;</span>).field(<span class="string">&quot;attrs.attrId&quot;</span>);</span><br><span class="line">    <span class="comment">//聚合分析出当前attr_id对应的名字</span></span><br><span class="line">    attr_id_agg.subAggregation(AggregationBuilders.terms(<span class="string">&quot;attr_name_agg&quot;</span>).field(<span class="string">&quot;attrs.attrName&quot;</span>).size(<span class="number">1</span>));</span><br><span class="line">    <span class="comment">//聚合分析出当前attr_id对应的所有可能的属性值attrValue</span></span><br><span class="line">    attr_id_agg.subAggregation(AggregationBuilders.terms(<span class="string">&quot;attr_value_agg&quot;</span>).field(<span class="string">&quot;attrs.attrValue&quot;</span>).size(<span class="number">50</span>));</span><br><span class="line">    attr_agg.subAggregation(attr_id_agg);</span><br><span class="line">    <span class="comment">//TODO 3、聚合attr</span></span><br><span class="line">    sourceBuilder.aggregation(attr_agg);</span><br><span class="line"></span><br><span class="line">    String s = sourceBuilder.toString();</span><br><span class="line">    System.out.println(<span class="string">&quot;构建的DSL&quot;</span> + s);</span><br><span class="line"></span><br><span class="line">    SearchRequest searchRequest = <span class="keyword">new</span> SearchRequest(<span class="keyword">new</span> String[]&#123;EsConstant.PRODUCT_INDEX&#125;, sourceBuilder);</span><br><span class="line">    <span class="keyword">return</span> searchRequest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>分页</strong>  pageSize:5<br>pageNum:1  from:0  size:5  [0,1,2,3,4]<br>pageNum:2  from:5   size:5<br>from = (pageNum-1)*size</p><p>总页码-计算  11/2 = 5 .. 1</p><h2 id="返回结果"><a href="#返回结果" class="headerlink" title="返回结果"></a>返回结果</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">SearchResult result = <span class="keyword">new</span> SearchResult();</span><br><span class="line">        <span class="comment">//1、返回的所有查询到的商品</span></span><br><span class="line">        SearchHits hits = response.getHits();</span><br><span class="line">        List&lt;SkuEsModel&gt; esModels = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (hits.getHits() != <span class="keyword">null</span> &amp;&amp; hits.getHits().length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (SearchHit hit : hits.getHits()) &#123;</span><br><span class="line">                String sourceAsString = hit.getSourceAsString();</span><br><span class="line">                SkuEsModel esModel = JSON.parseObject(sourceAsString, SkuEsModel.class);</span><br><span class="line">                <span class="keyword">if</span>(!StringUtils.isEmpty(param.getKeyword()))&#123;</span><br><span class="line">                    HighlightField skuTitle = hit.getHighlightFields().get(<span class="string">&quot;skuTitle&quot;</span>);</span><br><span class="line">                    String string = skuTitle.getFragments()[<span class="number">0</span>].string();</span><br><span class="line">                    esModel.setSkuTitle(string);</span><br><span class="line">                &#125;</span><br><span class="line">                esModels.add(esModel);</span><br><span class="line">            &#125;</span><br><span class="line">            ;</span><br><span class="line">        &#125;</span><br><span class="line">        result.setProducts(esModels);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //2、当前所有商品涉及到的所有属性信息</span></span><br><span class="line">        List&lt;SearchResult.AttrVo&gt; attrVos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ParsedNested attr_agg = response.getAggregations().get(<span class="string">&quot;attr_agg&quot;</span>);</span><br><span class="line">        ParsedLongTerms attr_id_agg = attr_agg.getAggregations().get(<span class="string">&quot;attr_id_agg&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : attr_id_agg.getBuckets()) &#123;</span><br><span class="line">            SearchResult.AttrVo attrVo = <span class="keyword">new</span> SearchResult.AttrVo();</span><br><span class="line">            <span class="comment">//1、得到属性的id</span></span><br><span class="line">            <span class="keyword">long</span> attrId = bucket.getKeyAsNumber().longValue();</span><br><span class="line">            <span class="comment">//2、得到属性的名字</span></span><br><span class="line">            String attrName = ((ParsedStringTerms) bucket.getAggregations().get(<span class="string">&quot;attr_name_agg&quot;</span>)).getBuckets().get(<span class="number">0</span>).getKeyAsString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3、得到属性的所有值</span></span><br><span class="line">            List&lt;String&gt; attrValues = ((ParsedStringTerms) bucket.getAggregations().get(<span class="string">&quot;attr_value_agg&quot;</span>)).getBuckets().stream().map(item -&gt; &#123;</span><br><span class="line">                String keyAsString = ((Terms.Bucket) item).getKeyAsString();</span><br><span class="line">                <span class="keyword">return</span> keyAsString;</span><br><span class="line">            &#125;).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">            attrVo.setAttrId(attrId);</span><br><span class="line">            attrVo.setAttrName(attrName);</span><br><span class="line">            attrVo.setAttrValue(attrValues);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            attrVos.add(attrVo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        result.setAttrs(attrVos);</span><br><span class="line"><span class="comment">//        //3、当前所有商品涉及到的所有品牌信息</span></span><br><span class="line">        List&lt;SearchResult.BrandVo&gt; brandVos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ParsedLongTerms brand_agg = response.getAggregations().get(<span class="string">&quot;brand_agg&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : brand_agg.getBuckets()) &#123;</span><br><span class="line">            SearchResult.BrandVo brandVo = <span class="keyword">new</span> SearchResult.BrandVo();</span><br><span class="line">            <span class="comment">//1、得到品牌的id</span></span><br><span class="line">            <span class="keyword">long</span> brandId = bucket.getKeyAsNumber().longValue();</span><br><span class="line">            <span class="comment">//2、得到品牌的名</span></span><br><span class="line">            String brandName = ((ParsedStringTerms) bucket.getAggregations().get(<span class="string">&quot;brand_name_agg&quot;</span>)).getBuckets().get(<span class="number">0</span>).getKeyAsString();</span><br><span class="line">            <span class="comment">//3、得到品牌的图片</span></span><br><span class="line">            String brandImg = ((ParsedStringTerms) bucket.getAggregations().get(<span class="string">&quot;brand_img_agg&quot;</span>)).getBuckets().get(<span class="number">0</span>).getKeyAsString();</span><br><span class="line">            brandVo.setBrandId(brandId);</span><br><span class="line">            brandVo.setBrandName(brandName);</span><br><span class="line">            brandVo.setBrandImg(brandImg);</span><br><span class="line">            brandVos.add(brandVo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        result.setBrands(brandVos);</span><br><span class="line"><span class="comment">//        //4、当前所有商品涉及到的所有分类信息</span></span><br><span class="line">        ParsedLongTerms catalog_agg = response.getAggregations().get(<span class="string">&quot;catalog_agg&quot;</span>);</span><br><span class="line">        List&lt;SearchResult.CatalogVo&gt; catalogVos = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;? extends Terms.Bucket&gt; buckets = catalog_agg.getBuckets();</span><br><span class="line">        <span class="keyword">for</span> (Terms.Bucket bucket : buckets) &#123;</span><br><span class="line">            SearchResult.CatalogVo catalogVo = <span class="keyword">new</span> SearchResult.CatalogVo();</span><br><span class="line">            <span class="comment">//得到分类id</span></span><br><span class="line">            String keyAsString = bucket.getKeyAsString();</span><br><span class="line">            catalogVo.setCatalogId(Long.parseLong(keyAsString));</span><br><span class="line"></span><br><span class="line">            <span class="comment">//得到分类名</span></span><br><span class="line">            ParsedStringTerms catalog_name_agg = bucket.getAggregations().get(<span class="string">&quot;catalog_name_agg&quot;</span>);</span><br><span class="line">            String catalog_name = catalog_name_agg.getBuckets().get(<span class="number">0</span>).getKeyAsString();</span><br><span class="line">            catalogVo.setCatalogName(catalog_name);</span><br><span class="line">            catalogVos.add(catalogVo);</span><br><span class="line">        &#125;</span><br><span class="line">        result.setCatalogs(catalogVos);</span><br><span class="line"><span class="comment">//        ========以上从聚合信息中获取======</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//        //5、分页信息-页码</span></span><br><span class="line">        result.setPageNum(param.getPageNum());</span><br><span class="line"><span class="comment">//        //5、分页信息-总记录树</span></span><br><span class="line">        <span class="keyword">long</span> total = hits.getTotalHits().value;</span><br><span class="line">        result.setTotal(total);</span><br><span class="line"><span class="comment">//        //5、分页信息-总页码-计算  11/2 = 5 .. 1</span></span><br><span class="line">        <span class="keyword">int</span> totalPages = (<span class="keyword">int</span>) total % EsConstant.PRODUCT_PAGESIZE == <span class="number">0</span> ? (<span class="keyword">int</span>) total / EsConstant.PRODUCT_PAGESIZE : ((<span class="keyword">int</span>) total / EsConstant.PRODUCT_PAGESIZE + <span class="number">1</span>);</span><br><span class="line">        result.setTotalPages(totalPages);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;Integer&gt; pageNavs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=totalPages;i++)&#123;</span><br><span class="line">            pageNavs.add(i);</span><br><span class="line">        &#125;</span><br><span class="line">        result.setPageNavs(pageNavs);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="异步-amp-线程池"><a href="#异步-amp-线程池" class="headerlink" title="异步&amp;线程池"></a>异步&amp;线程池</h1><p>待完成：juc</p><h2 id="初始化线程的-4-种方式"><a href="#初始化线程的-4-种方式" class="headerlink" title="初始化线程的 4 种方式"></a>初始化线程的 4 种方式</h2><h3 id="继承-Thread"><a href="#继承-Thread" class="headerlink" title="继承 Thread"></a>继承 Thread</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;main...start...&quot;</span>);</span><br><span class="line">    Thread thread=<span class="keyword">new</span> Thread01();</span><br><span class="line">    thread.start();</span><br><span class="line">    System.out.println(<span class="string">&quot;main...end...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread01</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;当前线程&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">        <span class="keyword">int</span> i=<span class="number">10</span>/<span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">&quot;运行结果&quot;</span>+i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main…start…<br>main…end…<br>当前线程20<br>运行结果5</p><p>main先完成，然后线程后台慢慢启动完成</p><h3 id="实现-Runnable-接口"><a href="#实现-Runnable-接口" class="headerlink" title="实现 Runnable 接口"></a>实现 Runnable 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main...start...&quot;</span>);</span><br><span class="line">        Runnable01 runnable01 = <span class="keyword">new</span> Runnable01();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable01).start();</span><br><span class="line">        System.out.println(<span class="string">&quot;main...end...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Runnable01</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">            <span class="keyword">int</span> i=<span class="number">10</span>/<span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结果&quot;</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="实现-Callable-接口-FutureTask-（可以拿到返回结果，可以处理异常）"><a href="#实现-Callable-接口-FutureTask-（可以拿到返回结果，可以处理异常）" class="headerlink" title="实现 Callable 接口 + FutureTask （可以拿到返回结果，可以处理异常）"></a>实现 Callable 接口 + FutureTask （可以拿到返回结果，可以处理异常）</h3><p>Callable的泛型就是返回结果<br>FutureTask也可以接受Runnable参数，同时通过result参数获取返回结果<br>public FutureTask(Runnable runnable, V result) {}</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      System.out.println(<span class="string">&quot;main...start...&quot;</span>);</span><br><span class="line"><span class="comment">//FutureTask继承了Runnable</span></span><br><span class="line">      FutureTask&lt;Integer&gt; futureTask = <span class="keyword">new</span> FutureTask&lt;&gt;(<span class="keyword">new</span> Callable01());</span><br><span class="line">      <span class="keyword">new</span> Thread(futureTask).start();</span><br><span class="line">      <span class="comment">//阻塞等待整个线程执行完成，获取返回结果，只有异步方法执行完了，才可以获取到结果</span></span><br><span class="line">      Integer integer = futureTask.get();</span><br><span class="line">      System.out.println(<span class="string">&quot;main...end...&quot;</span>+integer);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Callable01</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;当前线程&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">          <span class="keyword">int</span> i=<span class="number">10</span>/<span class="number">2</span>;</span><br><span class="line">          System.out.println(<span class="string">&quot;运行结果&quot;</span>+i);</span><br><span class="line">          <span class="keyword">return</span> i;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>main…start…<br>当前线程20<br>运行结果5<br>main…end…5</p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p>方式 1 和方式 2：主进程无法获取线程的运算结果。不适合当前场景<br>方式 3：主进程可以获取线程的运算结果，但是不利于控制服务器中的线程资源。可以导致服务器资源耗尽。</p><p>我们以后再业务代码里面，以上三种启动线程的方式都不用。【将所有的多线程异步任务都交给线程池执行】<br>1、2、3都不能控制资源 4可以控制资源，性能稳定。<br>当前系统中池只有一两个，每个异步任务，提交给线程池让他自己去执行就行。</p><ol><li><p>Excutors</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">            service.execute(<span class="keyword">new</span> Runnable01());</span><br><span class="line"><span class="comment">//execute无返回值，submit有返回值</span></span><br></pre></td></tr></table></figure></li><li><p>ThreadPoolExecutor </p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">int</span> maximumPoolSize,</span></span></span><br><span class="line"><span class="params"><span class="function">                              <span class="keyword">long</span> keepAliveTime,</span></span></span><br><span class="line"><span class="params"><span class="function">                              TimeUnit unit,</span></span></span><br><span class="line"><span class="params"><span class="function">                              BlockingQueue&lt;Runnable&gt; workQueue,</span></span></span><br><span class="line"><span class="params"><span class="function">                              ThreadFactory threadFactory,</span></span></span><br><span class="line"><span class="params"><span class="function">                              RejectedExecutionHandler handler)</span> </span>&#123;</span><br></pre></td></tr></table></figure><p><strong>七大参数：</strong></p><ul><li>corePoolSize:[5] 核心线程数[一直存在除非（allowCoreThreadTimeOut）允许超时]; 线程池，创建好以后就准备就绪的线程数量，就等待来接受异步任务去执行。 5个  Thread thread = new Thread();<br>thread.start(); </li><li>maximumPoolSize:[200] 最大线程数量;  控制资源并发。</li><li>keepAliveTime:存活时间。如果当前的线程数量大于core数量。释放空闲的线程（maximumPoolSize-corePoolSize）。只要线程空闲大于指定的keepAliveTime；</li><li>unit:时间单位</li><li><code>BlockingQueue&lt;Runnable&gt; workQueue</code>: 阻塞队列。如果任务有很多，就会将目前多的任务放在队列里面。 只要有线程空闲，就会去队列里面取出新的任务继续执行。</li><li>threadFactory:线程的创建工厂。 </li><li>RejectedExecutionHandler handler:如果队列满了，按照我们指定的拒绝策略拒绝执行任务</li></ul><p><strong>工作顺序:</strong><br>1、线程池创建，准备好 core 数量的核心线程，准备接受任务<br>2、新的任务进来，用 core 准备好的空闲线程执行。<br>(1) 、core 满了，就将再进来的任务放入阻塞队列中。空闲的 core 就会自己去阻塞队列获取任务执行<br>     new LinkedBlockingDeque&lt;&gt;()：默认是Integer的最大值。内存不够。<br>(2) 、阻塞队列满了，就直接开新线程执行，最大只能开到 max 指定的数量<br>(3) 、max 都执行好了。(Max-core) 的数量空闲的线程会在 keepAliveTime 指定的时间后自动销毁。最终保持到 core 大小<br>(4) 、如果线程数开到了 max 的数量，还有新任务进来，就会使用RejectedExecutionHandler指定的拒绝策略进行处理<br>3、所有的线程创建都是由指定的 factory 创建的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">5</span>,</span><br><span class="line">                <span class="number">200</span>,</span><br><span class="line">                <span class="number">10</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">100000</span>),</span><br><span class="line">                 Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>一个线程池 core 7； max 20 ，queue：50，100并发进来怎么分配的；</strong><br>7个会立即得到执行，50个会进入队列，再开13个进行执行。剩下的30个就使用拒绝策略。如果不想抛弃还要执行。CallerRunsPolicy（同步的方式）；</p><p>Executors.newCachedThreadPool() core是0，所有都可回收<br>Executors.newFixedThreadPool() 固定大小，core=max；都不可回收<br>Executors.newScheduledThreadPool() 定时任务的线程池<br>Executors.newSingleThreadExecutor() 单线程的线程池，后台从队列里面获取任务，挨个执行</p><h2 id="开发中为什么使用线程池"><a href="#开发中为什么使用线程池" class="headerlink" title="开发中为什么使用线程池"></a>开发中为什么使用线程池</h2><ul><li>降低资源的消耗<br>通过重复利用已经创建好的线程降低线程的创建和销毁带来的损耗</li><li>提高响应速度<br>因为线程池中的线程数没有超过线程池的最大上限时，有的线程处于等待分配任务的状态，当任务来时无需创建新的线程就能执行</li><li>提高线程的可管理性<br>线程池会根据当前系统特点对池内的线程进行优化处理，减少创建和销毁线程带来的系统开销。无限的创建和销毁线程不仅消耗系统资源，还降低系统的稳定性，使用线程池进行统一分配。</li><li>将核心业务放在核心线程运行，非核心业务放在非核心线程运行，当资源紧张时关闭非核心业务如验证码等</li></ul><h2 id="CompletableFuture-异步编排"><a href="#CompletableFuture-异步编排" class="headerlink" title="CompletableFuture 异步编排"></a>CompletableFuture 异步编排</h2><p>通过线程池性能稳定，也可以获取执行结果，并捕获异常。但是，在业务复杂情况下，一个异步调用可能会依赖于另一个异步调用的执行结果。<br>业务场景：<br>查询商品详情页的逻辑比较复杂，有些数据还需要远程调用，必然需要花费更多的时间。<br><img src="https://img-blog.csdnimg.cn/5840e623cb7c4872b1b11765db191da4.png" alt="在这里插入图片描述"><br>假如商品详情页的每个查询，需要如下标注的时间才能完成<br>那么，用户需要 5.5s 后才能看到商品详情页的内容。很显然是不能接受的。<br>如果有多个线程同时完成这 6 步操作，也许只需要 1.5s 即可完成响应。<br>1，2，3可以异步完成，只要1s。4，5，6依赖于1完成后才能异步进行。</p><p>Future:可以获取到异步结果：函数式接口</p><h3 id="创建异步对象"><a href="#创建异步对象" class="headerlink" title="创建异步对象"></a>创建异步对象</h3><p><img src="https://img-blog.csdnimg.cn/db9fbb1333c747c18e277f1fcdaedf88.png" alt="在这里插入图片描述"><br>1、runXxxx 都是没有返回结果的，supplyXxx 都是可以获取返回结果的<br>2、可以传入自定义的线程池，否则就用默认的线程池；</p><p>无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Void&gt; future = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结果&quot;</span> + i);</span><br><span class="line">        &#125;, service);</span><br></pre></td></tr></table></figure><p>有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结果&quot;</span> + i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;, service);</span><br><span class="line">        Integer integer = future.get();</span><br></pre></td></tr></table></figure><h3 id="计算完成时回调方法"><a href="#计算完成时回调方法" class="headerlink" title="计算完成时回调方法"></a>计算完成时回调方法</h3><p><img src="https://img-blog.csdnimg.cn/0b82b2e928ae4bd9a2d7629bc65f9f13.png" alt="在这里插入图片描述"><br>whenComplete 可以处理正常和异常的计算结果，exceptionally 处理异常情况。<br>whenComplete 和 whenCompleteAsync 的区别：<br>whenComplete：是执行当前任务的线程执行继续执行 whenComplete 的任务。<br>whenCompleteAsync：是执行把 whenCompleteAsync 这个任务继续提交给线程池<br>来进行执行。<br>方法不以 Async 结尾，意味着 Action 使用相同的线程执行，而 Async 可能会使用其他线程执行（如果是使用相同的线程池，也可能会被同一个线程选中执行）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;当前线程&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">            <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">2</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;运行结果&quot;</span> + i);</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;, service).whenComplete((res,exception)-&gt;&#123;</span><br><span class="line">        <span class="comment">//void accept(T t, U u);</span></span><br><span class="line">        <span class="comment">//虽然能得到异常信息，但是没法修改返回数据。</span></span><br><span class="line">            System.out.println(<span class="string">&quot;异步任务成功完成了，结果是&quot;</span>+res+<span class="string">&quot;异常是&quot;</span>+exception);</span><br><span class="line">        &#125;).exceptionally(throwable -&gt; &#123;</span><br><span class="line">        <span class="comment">//R apply(T t);</span></span><br><span class="line">        <span class="comment">//可以感知异常，同时返回默认值</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">        &#125;);</span><br><span class="line">        Integer integer = future.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;main...end...&quot;</span>+integer);</span><br></pre></td></tr></table></figure><p>当前线程20<br>运行结果5<br>异步任务成功完成了，结果是5异常是null</p><hr><p>10/0<br>当前线程20<br>异步任务成功完成了，结果是null异常是java.util.concurrent.CompletionException: java.lang.ArithmeticException: / by zero</p><p>没有exceptionally直接报错，有了integer是10</p><h3 id="handle-方法"><a href="#handle-方法" class="headerlink" title="handle 方法"></a>handle 方法</h3><p>和 complete 一样，可对结果做最后的处理（可处理异常），可改变返回值。<br><img src="https://img-blog.csdnimg.cn/16f14eeb2891474b8593fade56470e1b.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; future = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;当前线程&quot;</span> + Thread.currentThread().getId());</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;运行结果&quot;</span> + i);</span><br><span class="line">    <span class="keyword">return</span> i;</span><br><span class="line">&#125;, service).handle((res,thr)-&gt;&#123;</span><br><span class="line">    <span class="comment">//R apply(T t, U u);</span></span><br><span class="line">    <span class="keyword">if</span> (res!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> res*<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (thr!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="线程串行化方法"><a href="#线程串行化方法" class="headerlink" title="线程串行化方法"></a>线程串行化方法</h3><p><img src="https://img-blog.csdnimg.cn/9e6330712cf148e2932b63fdbb329907.png" alt="在这里插入图片描述"><br>thenApply 方法：当一个线程依赖另一个线程时，获取上一个任务返回的结果，并返回当前任务的返回值。<br>thenAccept 方法：消费处理结果。接收任务的处理结果，并消费处理，无返回结果。<br>thenRun 方法：只要上面的任务执行完成，就开始执行 thenRun，只是处理完任务后，执行thenRun 的后续操作<br>带有 Async 默认是异步执行的。同之前。<br>以上都要前置任务成功完成。</p><p>1）、thenRun：不能获取到上一步的执行结果，无返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.thenRunAsync(() -&gt; &#123;</span><br><span class="line">System.out.println(<span class="string">&quot;任务2启动了...&quot;</span>);</span><br><span class="line">&#125;, executor);</span><br></pre></td></tr></table></figure><p>2）、thenAcceptAsync;能接受上一步结果，但是无返回值<br>3）、thenApplyAsync：;能接受上一步结果，有返回值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.thenApplyAsync(res -&gt; &#123;            </span><br><span class="line">System.out.println(<span class="string">&quot;任务2启动了...&quot;</span> + res);            </span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Hello &quot;</span> + res;        </span><br><span class="line">&#125;, executor);</span><br></pre></td></tr></table></figure><h3 id="两任务组合-都要完成"><a href="#两任务组合-都要完成" class="headerlink" title="两任务组合 - 都要完成"></a>两任务组合 - 都要完成</h3><p><img src="https://img-blog.csdnimg.cn/7497336f2bcd4e23953939f39a6531dd.png" alt="在这里插入图片描述"><br>public class CompletableFuture<T> implements Future<T>, CompletionStage<T> {}</p><p>两个任务必须都完成，触发该任务。<br>thenCombine：组合两个 future，获取两个 future 的返回结果，并返回当前任务的返回值<br>thenAcceptBoth：组合两个 future，获取两个 future 任务的返回结果，然后处理任务，没有返回值。<br>runAfterBoth：组合两个 future，不需要获取 future 的结果，只需两个 future 处理完任务后，处理该任务。<br><img src="https://img-blog.csdnimg.cn/90c59d6bc55f47a1a440e80eca0bbf4a.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">future1.runAfterBothAsync(future2,()-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;任务3开始&quot;</span>);</span><br><span class="line">        &#125;,service);</span><br><span class="line">        future1.thenAcceptBothAsync(future2,(f1,f2)-&gt;&#123;</span><br><span class="line">            System.out.println(f1+f2);</span><br><span class="line">        &#125;,service);</span><br><span class="line">        future1.thenCombineAsync(future2,(f1,f2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span>  f1+f2+<span class="string">&quot;hellp&quot;</span>;</span><br><span class="line">        &#125;,service);</span><br></pre></td></tr></table></figure><h3 id="两任务组合-一个完成"><a href="#两任务组合-一个完成" class="headerlink" title="两任务组合 - 一个完成"></a>两任务组合 - 一个完成</h3><p>Both改为Either</p><h3 id="多任务组合"><a href="#多任务组合" class="headerlink" title="多任务组合"></a>多任务组合</h3><p><img src="https://img-blog.csdnimg.cn/94b45a0e15464b8c9e7d435affeb5ace.png" alt="在这里插入图片描述"><br>allOf：等待所有任务完成<br>anyOf：只要有一个任务完成</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Object&gt; anyOf = CompletableFuture.anyOf(futureImg, futureAttr, futureDesc);</span><br><span class="line">anyOf.get();<span class="comment">//阻塞等待所有结果完成，等价于anyOf.join()</span></span><br><span class="line">System.out.println(<span class="string">&quot;main....end....&quot;</span>+futureImg.get()+<span class="string">&quot;=&gt;&quot;</span>+futureAttr.get()+<span class="string">&quot;=&gt;&quot;</span>+futureDesc.get());</span><br><span class="line">System.out.println(<span class="string">&quot;main....end....&quot;</span>+anyOf.get());<span class="comment">//拿到成功的那个的数据</span></span><br></pre></td></tr></table></figure><h2 id="商品详情页-异步编排优化"><a href="#商品详情页-异步编排优化" class="headerlink" title="商品详情页-异步编排优化"></a>商品详情页-异步编排优化</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    resultType 返回集合里面元素的类型，只要有嵌套属性就要封装自定义结果--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;spuItemAttrGroupVo&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.vinson.gulimall.product.vo.SpuItemAttrGroupVo&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--        spu_id  attr_group_name  attr_group_id  attr_id  attr_name             attr_value  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;groupName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;attr_group_name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;attrs&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.vinson.gulimall.product.vo.Attr&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;attr_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;attrName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;attr_value&quot;</span> <span class="attr">property</span>=<span class="string">&quot;attrValue&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getAttrGroupWithAttrsBySpuId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.vinson.gulimall.product.vo.SpuItemAttrGroupVo&quot;</span>&gt;</span></span><br><span class="line">        SELECT</span><br><span class="line">            pav.`spu_id`,</span><br><span class="line">            ag.`attr_group_name`,</span><br><span class="line">            ag.`attr_group_id`,</span><br><span class="line">            aar.`attr_id`,</span><br><span class="line">            attr.`attr_name`,</span><br><span class="line">            pav.`attr_value`</span><br><span class="line">        FROM `pms_attr_group` ag</span><br><span class="line">                 LEFT JOIN `pms_attr_attrgroup_relation` aar ON aar.`attr_group_id` = ag.`attr_group_id`</span><br><span class="line">                 LEFT JOIN `pms_attr` attr ON attr.`attr_id` = aar.`attr_id`</span><br><span class="line">                 LEFT JOIN `pms_product_attr_value` pav ON pav.`attr_id` = attr.`attr_id`</span><br><span class="line">        WHERE ag.catelog_id=#&#123;catalogId&#125; AND pav.`spu_id`=#&#123;spuId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>内部类要么抽取到外面，要么使用的时候，用<code>$代替. </code>即用vo.SkuItemVo$SpuBaseAttrVo代替vo.SkuItemVo.SpuBaseAttrVo</p><p>颜色有A,B,C三种<br>尺寸有d,e两种<br>怎么通过一个颜色和尺寸确定唯一的sku？<br><img src="https://img-blog.csdnimg.cn/6ea9088820cc42938ba837d6e0bdff23.png" alt="在这里插入图片描述"><br>如颜色为绿色的有15，16，17<br>版本为64G的有11，14，17….<br>重复的是17,因此对应的是17号sku</p><h2 id="创建可修改配置的线程池"><a href="#创建可修改配置的线程池" class="headerlink" title="创建可修改配置的线程池"></a>创建可修改配置的线程池</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;gulimall.thread&quot;)</span> <span class="comment">//配置的前缀</span></span><br><span class="line"><span class="meta">@Component</span> <span class="comment">//将其加入到容器中</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadPoolConfigProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer coreSize;</span><br><span class="line">    <span class="keyword">private</span> Integer maxSize;</span><br><span class="line">    <span class="keyword">private</span> Integer keepAliveTime;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启后即可在properties中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">gulimall:</span></span><br><span class="line">  <span class="attr">thread:</span></span><br><span class="line">    <span class="attr">core-size:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">max-size:</span> <span class="number">200</span></span><br><span class="line">    <span class="attr">keep-alive-time:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@EnableConfigurationProperties(ThreadPoolConfigProperties.class) 如果没有将配置文件加入到容器中，则需要手动开启指定是哪个配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThreadConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">//容器中创建一个线程池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ThreadPoolExecutor <span class="title">threadPoolExecutor</span><span class="params">(ThreadPoolConfigProperties pool)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                pool.getCoreSize(),</span><br><span class="line">                pool.getMaxSize(),</span><br><span class="line">                pool.getKeepAliveTime(),</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;(<span class="number">100000</span>),</span><br><span class="line">                Executors.defaultThreadFactory(),</span><br><span class="line">                <span class="keyword">new</span> ThreadPoolExecutor.AbortPolicy()</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3,4,5需要1完成后提供的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> SkuItemVo <span class="title">item</span><span class="params">(Long skuId)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        SkuItemVo skuItemVo  = <span class="keyword">new</span> SkuItemVo();</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;SkuInfoEntity&gt; infoFuture = CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">            <span class="comment">//1、sku基本信息获取  pms_sku_info</span></span><br><span class="line">            SkuInfoEntity info = getById(skuId);</span><br><span class="line">            skuItemVo.setInfo(info);</span><br><span class="line">            <span class="keyword">return</span> info;</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Void&gt; saleAttrFuture = infoFuture.thenAcceptAsync((res) -&gt; &#123;</span><br><span class="line">            <span class="comment">//3、获取spu的销售属性组合。</span></span><br><span class="line">            List&lt;SkuItemSaleAttrVo&gt; saleAttrVos = skuSaleAttrValueService.getSaleAttrsBySpuId(res.getSpuId());</span><br><span class="line">            skuItemVo.setSaleAttr(saleAttrVos);</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Void&gt; descFuture = infoFuture.thenAcceptAsync(res -&gt; &#123;</span><br><span class="line">            <span class="comment">//4、获取spu的介绍  pms_spu_info_desc</span></span><br><span class="line">            SpuInfoDescEntity spuInfoDescEntity = spuInfoDescService.getById(res.getSpuId());</span><br><span class="line">            skuItemVo.setDesp(spuInfoDescEntity);</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        CompletableFuture&lt;Void&gt; baseAttrFuture = infoFuture.thenAcceptAsync(res -&gt; &#123;</span><br><span class="line">            <span class="comment">//5、获取spu的规格参数信息。</span></span><br><span class="line">            List&lt;SpuItemAttrGroupVo&gt; attrGroupVos = attrGroupService.getAttrGroupWithAttrsBySpuId(res.getSpuId(), res.getCatalogId());</span><br><span class="line">            skuItemVo.setGroupAttrs(attrGroupVos);</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2、sku的图片信息  pms_sku_images</span></span><br><span class="line">        CompletableFuture&lt;Void&gt; imageFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line">            List&lt;SkuImagesEntity&gt; images = imagesService.getImagesBySkuId(skuId);</span><br><span class="line">            skuItemVo.setImages(images);</span><br><span class="line">        &#125;, executor);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3、查询当前sku是否参与秒杀优惠</span></span><br><span class="line"><span class="comment">//        CompletableFuture&lt;Void&gt; secKillFuture = CompletableFuture.runAsync(() -&gt; &#123;</span></span><br><span class="line"><span class="comment">//            R seckillInfo = seckillFeignService.getSkuSeckillInfo(skuId);</span></span><br><span class="line"><span class="comment">//            if (seckillInfo.getCode() == 0) &#123;</span></span><br><span class="line"><span class="comment">//                SeckillInfoVo seckillInfoVo = seckillInfo.getData(new TypeReference&lt;SeckillInfoVo&gt;() &#123;</span></span><br><span class="line"><span class="comment">//                &#125;);</span></span><br><span class="line"><span class="comment">//                skuItemVo.setSeckillInfo(seckillInfoVo);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;, executor);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//可以省略inforFuture，其他必须等待它完成</span></span><br><span class="line">        <span class="comment">//等到所有任务都完成</span></span><br><span class="line">        CompletableFuture.allOf(saleAttrFuture,descFuture,baseAttrFuture,imageFuture).get();</span><br><span class="line"><span class="comment">//        CompletableFuture.allOf(saleAttrFuture,descFuture,baseAttrFuture,imageFuture,secKillFuture).get();</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> skuItemVo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="社交登陆-amp-单点登陆"><a href="#社交登陆-amp-单点登陆" class="headerlink" title="社交登陆&amp;单点登陆"></a>社交登陆&amp;单点登陆</h1><h2 id="SpringMVC-viewcontroller"><a href="#SpringMVC-viewcontroller" class="headerlink" title="SpringMVC viewcontroller"></a>SpringMVC viewcontroller</h2><p>发送一个请求直接跳转到一个页面。<br>SpringMVC viewcontroller；将请求和页面映射过来.<br>不需要写空方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/login.html&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">loginPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="meta">@GetMapping(&quot;/reg.html&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">regPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="string">&quot;reg&quot;</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/login.html&quot;</span>).setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        registry.addViewController(<span class="string">&quot;/reg.html&quot;</span>).setViewName(<span class="string">&quot;reg&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>报错：Request method ‘POST’ not supported<br>用户注册-&gt;/regist[post]—-》转发/reg.html（路径映射默认都是get方式访问的。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:/reg.html&quot;</span>;<span class="comment">//失效</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;forward:http://auth.gulimall.com/reg.html&quot;</span>;<span class="comment">//使用thymeleaf直接渲染</span></span><br></pre></td></tr></table></figure></li><li><p>return “redirect:/login.html”;//使用重定向:防止数据重复提交<br>forward是转发，携带原来的数据，可以取到Model中的数据</p></li><li><p>但是只用”redirect:” Model无法携带数据，使用RedirectAttributes redirectAttributes：模拟重定向携带数据。<br>return “redirect:/reg.html”;不能访问域名auth.gulimall.con，会直接到192.168…<br>变成return “redirect:<a href="http://auth.gulimall.com/reg.html&quot;">http://auth.gulimall.com/reg.html&quot;</a>;<br>重定向携带数据，利用session原理。将数据放在session中。<br>只要跳到下一个页面取出这个数据以后，session里面的数据就会删掉。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redirectAttributes.addFlashAttribute(<span class="string">&quot;errors&quot;</span>,errors);<span class="comment">//只取一次</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;redirect:http://auth.gulimall.com/reg.html&quot;</span>;</span><br><span class="line">           </span><br></pre></td></tr></table></figure><p>？？？<br>RedirectAttributes ra<br>ra.addFlashAttribute();将数据放在session里面可以在页面取出，但是只能取一次<br>ra.addAttribute(“skuId”,skuId);将数据放在url后面</p><p>但是分布式下使用session存在问题。使用springSession。</p><h2 id="发送短信验证码"><a href="#发送短信验证码" class="headerlink" title="发送短信验证码"></a>发送短信验证码</h2><h3 id="阿里短信服务"><a href="#阿里短信服务" class="headerlink" title="阿里短信服务"></a>阿里短信服务</h3><p>使用的阿里最新的接口，和老师的不一样。第一次免费测试200次。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>alibabacloud-dysmsapi20170525<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>需要申请accessKeyId。使用测试接口，正式的需要申请签名，只有企业级才可以。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SmsComponent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSmsCode</span><span class="params">(String phone,String code)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">// HttpClient Configuration</span></span><br><span class="line">        <span class="comment">/*HttpClient httpClient = new ApacheAsyncHttpClientBuilder()</span></span><br><span class="line"><span class="comment">                .connectionTimeout(Duration.ofSeconds(10)) // Set the connection timeout time, the default is 10 seconds</span></span><br><span class="line"><span class="comment">                .responseTimeout(Duration.ofSeconds(10)) // Set the response timeout time, the default is 20 seconds</span></span><br><span class="line"><span class="comment">                .maxConnections(128) // Set the connection pool size</span></span><br><span class="line"><span class="comment">                .maxIdleTimeOut(Duration.ofSeconds(50)) // Set the connection pool timeout, the default is 30 seconds</span></span><br><span class="line"><span class="comment">                // Configure the proxy</span></span><br><span class="line"><span class="comment">                .proxy(new ProxyOptions(ProxyOptions.Type.HTTP, new InetSocketAddress(&quot;&lt;your-proxy-hostname&gt;&quot;, 9001))</span></span><br><span class="line"><span class="comment">                        .setCredentials(&quot;&lt;your-proxy-username&gt;&quot;, &quot;&lt;your-proxy-password&gt;&quot;))</span></span><br><span class="line"><span class="comment">                // If it is an https connection, you need to configure the certificate, or ignore the certificate(.ignoreSSL(true))</span></span><br><span class="line"><span class="comment">                .x509TrustManagers(new X509TrustManager[]&#123;&#125;)</span></span><br><span class="line"><span class="comment">                .keyManagers(new KeyManager[]&#123;&#125;)</span></span><br><span class="line"><span class="comment">                .ignoreSSL(false)</span></span><br><span class="line"><span class="comment">                .build();*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Configure Credentials authentication information, including ak, secret, token</span></span><br><span class="line">        StaticCredentialProvider provider = StaticCredentialProvider.create(Credential.builder()</span><br><span class="line">                .accessKeyId(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                .accessKeySecret(<span class="string">&quot;&quot;</span>)</span><br><span class="line">                <span class="comment">//.securityToken(&quot;&lt;your-token&gt;&quot;) // use STS token</span></span><br><span class="line">                .build());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Configure the Client</span></span><br><span class="line">        AsyncClient client = AsyncClient.builder()</span><br><span class="line">                .region(<span class="string">&quot;cn-hangzhou&quot;</span>) <span class="comment">// Region ID</span></span><br><span class="line">                <span class="comment">//.httpClient(httpClient) // Use the configured HttpClient, otherwise use the default HttpClient (Apache HttpClient)</span></span><br><span class="line">                .credentialsProvider(provider)</span><br><span class="line">                <span class="comment">//.serviceConfiguration(Configuration.create()) // Service-level configuration</span></span><br><span class="line">                <span class="comment">// Client-level configuration rewrite, can set Endpoint, Http request parameters, etc.</span></span><br><span class="line">                .overrideConfiguration(</span><br><span class="line">                        ClientOverrideConfiguration.create()</span><br><span class="line">                                .setEndpointOverride(<span class="string">&quot;dysmsapi.aliyuncs.com&quot;</span>)</span><br><span class="line">                        <span class="comment">//.setConnectTimeout(Duration.ofSeconds(30))</span></span><br><span class="line">                )</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Parameter settings for API request</span></span><br><span class="line">        SendSmsRequest sendSmsRequest = SendSmsRequest.builder()</span><br><span class="line">                .signName(<span class="string">&quot;阿里云短信测试&quot;</span>)</span><br><span class="line">                .templateCode(<span class="string">&quot;SMS_154950909&quot;</span>)</span><br><span class="line">                .phoneNumbers(phone)</span><br><span class="line"><span class="comment">//                .templateParam(&quot;&#123;\&quot;code\&quot;:\&quot;1234\&quot;&#125;&quot;)</span></span><br><span class="line">                .templateParam(<span class="string">&quot;&#123;\&quot;code\&quot;:\&quot;&quot;</span>+code+<span class="string">&quot;\&quot;&#125;&quot;</span>)</span><br><span class="line">                <span class="comment">// Request-level configuration rewrite, can set Http request parameters, etc.</span></span><br><span class="line">                <span class="comment">// .requestConfiguration(RequestConfiguration.create().setHttpHeaders(new HttpHeaders()))</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Asynchronously get the return value of the API request</span></span><br><span class="line">        CompletableFuture&lt;SendSmsResponse&gt; response = client.sendSms(sendSmsRequest);</span><br><span class="line">        <span class="comment">// Synchronously get the return value of the API request</span></span><br><span class="line">        SendSmsResponse resp = response.get();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Gson().toJson(resp));</span><br><span class="line">        <span class="comment">// Asynchronous processing of return values</span></span><br><span class="line">        <span class="comment">/*response.thenAccept(resp -&gt; &#123;</span></span><br><span class="line"><span class="comment">            System.out.println(new Gson().toJson(resp));</span></span><br><span class="line"><span class="comment">        &#125;).exceptionally(throwable -&gt; &#123; // Handling exceptions</span></span><br><span class="line"><span class="comment">            System.out.println(throwable.getMessage());</span></span><br><span class="line"><span class="comment">            return null;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// Finally, close the client</span></span><br><span class="line">        client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p>需要考虑一下几点：<br>1.校验验证码，将验证码缓存在redis中，并设置10分钟过期时间。<br>key-phone，value-code   sms:code:17512080612 -&gt; 45678<br>2. 60s内不能多次发送。即发送后即使页面刷新了，也不能再调用接口。<br>将验证码拼上一个时间戳，作为value保存在redis中。每次发送时首先检查是否过了60s，没有的话就不能调用短信接口。<br>3. 防止盗刷：所以不能直接在前端使用Js调用服务，在后端进行。同时不能暴露路由地址，即不能在查看网页源代码内看到。<br>TODO</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    ThirdPartFeignService thirdPartFeignService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sms/sendcode&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//TODO 3、接口防刷。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2. 60s内不能多次发送。</span></span><br><span class="line">        String redisCode = stringRedisTemplate.opsForValue().get(AuthServerConstant.SMS_CODE_CACHE_PREFIX + phone);</span><br><span class="line">        <span class="keyword">if</span> (!StringUtils.isEmpty(redisCode))&#123;</span><br><span class="line">            Long time = Long.parseLong(redisCode.split(<span class="string">&quot;_&quot;</span>)[<span class="number">1</span>]);</span><br><span class="line">            <span class="keyword">if</span> (System.currentTimeMillis()-time&lt;<span class="number">60000</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> R.error(BizCodeEnum.SMS_CODE_EXCEPTION.getCode(),BizCodeEnum.SMS_CODE_EXCEPTION.getMsg());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//        String code = UUID.randomUUID().toString().substring(0, 4);</span></span><br><span class="line">        String code =<span class="string">&quot;1234&quot;</span>;</span><br><span class="line">        System.out.println(code);</span><br><span class="line">        String substring = code+<span class="string">&quot;_&quot;</span>+System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//1、验证码的再次校验。redis。存key-phone，value-code   sms:code:17512080612 -&gt; 45678</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(AuthServerConstant.SMS_CODE_CACHE_PREFIX +phone,substring,<span class="number">10</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//redis缓存验证码，防止同一个phone在60秒内再次发送验证码</span></span><br><span class="line">        thirdPartFeignService.sendCode(phone,code);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="加密机制"><a href="#加密机制" class="headerlink" title="加密机制"></a>加密机制</h2><p>密码应存为不可逆的加密算法：存储过程中会随机丢失部分信息</p><h3 id="MD5-amp-MD5盐值加密"><a href="#MD5-amp-MD5盐值加密" class="headerlink" title="MD5&amp;MD5盐值加密"></a>MD5&amp;MD5盐值加密</h3><p><strong>MD5</strong><br>Message Digest algorithm 5，信息摘要算法</p><ul><li>压缩性：任意长度的数据，算出的MD5值长度都是固定的。</li><li>容易计算：从原数据计算出MD5值很容易。</li><li>抗修改性：对原数据进行任何改动，哪怕只修改1个字节，所得到的MD5值都有很大区别。</li><li>强抗碰撞：想找到两个不同的数据，使它们具有相同的MD5值，是非常困难的。</li><li>不可逆<br><code>String s = DigestUtils.md5Hex(&quot;123456&quot;);</code><br>彩虹表：暴力破解。因为 抗修改性，每个都不一样。<br>所以MD5不能直接进行密码的加密存储;</li></ul><p><strong>加盐：</strong><br>盐值加密；随机值 加盐：<code>$1$+8位字符</code><br><code>$1$Q4jfb2Xz$jbIxdBvSdYXUQRNjyITL11</code></p><ul><li>通过生成随机数与MD5生成字符串进行组合</li><li>数据库同时存储MD5值与salt值。验证正确性时使用salt进行MD5即可<br><code>String s1 = Md5Crypt.md5Crypt(&quot;123456&quot;.getBytes(),&quot;$1$qqqqqqqq&quot;);</code></li></ul><p><strong>spring提供的</strong><br>每次生成的都不一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BCryptPasswordEncoder passwordEncoder = <span class="keyword">new</span> BCryptPasswordEncoder();</span><br><span class="line"><span class="comment">//$2a$10$4IP4F/2iFO2gbSvQKyJzGuI3RhU5Qdtr519KsyoXGAy.b7WT4P1RW</span></span><br><span class="line"><span class="comment">//$2a$10$iv6H6nqQ/NWOMkzgZSJdPeMOBGbn0ayhZ9WAewOk0ssWScSHOgsAW</span></span><br><span class="line">String encode = passwordEncoder.encode(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> matches = passwordEncoder.matches(<span class="string">&quot;123456&quot;</span>, <span class="string">&quot;$2a$10$4IP4F/2iFO2gbSvQKyJzGuI3RhU5Qdtr519KsyoXGAy.b7WT4P1RW&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>秒传原理：</strong><br>对文件进行md5计算，如果别人上传过或者以前上传过，则不用上传了。</p><h2 id="社交登陆OAuth2-0"><a href="#社交登陆OAuth2-0" class="headerlink" title="社交登陆OAuth2.0"></a>社交登陆OAuth2.0</h2><p>QQ、微博、github 等网站的用户量非常大，别的网站为了<br>简化自我网站的登陆与注册逻辑，引入社交登陆功能；<br>步骤：<br>1）、用户点击 QQ 按钮<br>2）、引导跳转到 QQ 授权页<br>3）、用户主动点击授权，跳回之前网页。</p><p>OAuth2.0：对于用户相关的 OpenAPI（例如获取用户信息，动态同步，照片，日志，分<br>享等），为了保护用户数据的安全和隐私，第三方网站访问用户数据前都需要显式的向<br>用户征求授权。</p><h3 id="官方版流程："><a href="#官方版流程：" class="headerlink" title="官方版流程："></a>官方版流程：</h3><p><img src="https://img-blog.csdnimg.cn/9271a51196e44401b23aec4ce975e601.png" alt="在这里插入图片描述"><br>client指csdn等需要通过qq登录的</p><h3 id="github接口"><a href="#github接口" class="headerlink" title="github接口"></a>github接口</h3><p><a href="https://blog.csdn.net/qq_15015743/article/details/123973898">GitHub OAuth第三方登录</a><br><img src="https://img-blog.csdnimg.cn/944a86a6eaa94ed4a1d2235f0baebfe2.png" alt="在这里插入图片描述"><br>1、访问<a href="https://github.com/login/oauth/authorize?client_id=766da51684962d9f7e19&amp;redirect_uri=http://auth.gulimall.com/oauth2.0/github/success%EF%BC%8C%E5%B9%B6%E6%8E%88%E6%9D%83%E5%BE%97%E5%88%B0code">https://github.com/login/oauth/authorize?client_id=766da51684962d9f7e19&amp;redirect_uri=http://auth.gulimall.com/oauth2.0/github/success，并授权得到code</a> <a href="http://auth.gulimall.com/oauth2.0/github/success?code=a1c9d9450871b0b8b534">http://auth.gulimall.com/oauth2.0/github/success?code=a1c9d9450871b0b8b534</a><br>2、通过code得到access_token<br><a href="https://github.com/login/oauth/access_token?code=a1c9d9450871b0b8b534&amp;client_id=...&amp;client_secret=....&amp;redirect_uri=http://auth.gulimall.com/oauth2.0/github/success">https://github.com/login/oauth/access_token?code=a1c9d9450871b0b8b534&amp;client_id=...&amp;client_secret=....&amp;redirect_uri=http://auth.gulimall.com/oauth2.0/github/success</a><br>得到的json为<br>access_token=…&amp;scope=&amp;token_type=bearer<br>3、通过access_token访问<a href="https://api.github.com/user">https://api.github.com/user</a><br>得到用户数据</p><p>github_oauth默认无过期时间，可以设但是我的可选项页为空，不整了。</p><h4 id="哪个傻逼申请的gulimall-com的域名"><a href="#哪个傻逼申请的gulimall-com的域名" class="headerlink" title="!!! 哪个傻逼申请的gulimall.com的域名"></a>!!! 哪个傻逼申请的gulimall.com的域名</h4><p>大无语事件，是哪个傻逼申请的gulimall.com的域名的！！！<br>做谷粒商城项目，学到社交登录这块，微博要认证比较麻烦，就看弹幕说用github，代码都整完了，结果gulimall.com会被自动重定向到这个网页ww62.gulimall.com(还是2022年申请的，真不是有人故意搞怪嘛)，我本地域名和他冲突了。其实只要不去外网就没事，可是我github不开vpn，就没法上，真是服了！</p><h3 id="gitee接口"><a href="#gitee接口" class="headerlink" title="gitee接口"></a>gitee接口</h3><p>1、请求并授权得到code<br><a href="https://gitee.com/oauth/authorize?client_id=5e55ee524810d5f57246fa6c7f78586be6a03d59558900f58ebae936f315328d&amp;redirect_uri=http://gulimall.com/oauth2.0/gitee/success&amp;response_type=code">https://gitee.com/oauth/authorize?client_id=5e55ee524810d5f57246fa6c7f78586be6a03d59558900f58ebae936f315328d&amp;redirect_uri=http%3A%2F%2Fgulimall.com%2Foauth2.0%2Fgitee%2Fsuccess&amp;response_type=code</a><br>返回<a href="http://gulimall.com/oauth2.0/gitee/success?code=84b9149681e9896f67a6e1f6bfbb592dff12f0a2ab74e27323ecb497c84f203f">http://gulimall.com/oauth2.0/gitee/success?code=84b9149681e9896f67a6e1f6bfbb592dff12f0a2ab74e27323ecb497c84f203f</a><br>2、通过code得到access_token<br><a href="https://gitee.com/oauth/token?grant_type=authorization_code&amp;code=60fa093df96ad6e3d7f8f35bbe97a45705a2208c67490ad5853da7c3bc080410&amp;client_id=5e55ee524810d5f57246fa6c7f78586be6a03d59558900f58ebae936f315328d&amp;redirect_uri=http://auth.gulimall.com/oauth2.0/gitee/success&amp;client_secret=83b414ed50ba58154561cdfbd59c995f17d93c55a2016321d581b01cffb05bb0">https://gitee.com/oauth/token?grant_type=authorization_code&amp;code=60fa093df96ad6e3d7f8f35bbe97a45705a2208c67490ad5853da7c3bc080410&amp;client_id=5e55ee524810d5f57246fa6c7f78586be6a03d59558900f58ebae936f315328d&amp;redirect_uri=http://auth.gulimall.com/oauth2.0/gitee/success&amp;client_secret=83b414ed50ba58154561cdfbd59c995f17d93c55a2016321d581b01cffb05bb0</a><br>3、获取用户信息<br><a href="https://gitee.com/api/v5/user?access_token=e99ab6b9ebf9c9238509b663ed7fbea0">https://gitee.com/api/v5/user?access_token=e99ab6b9ebf9c9238509b663ed7fbea0</a></p><p>当前用户如果是第一次进网站，自动注册进来(为当前社交用户生成一个会员信息账号，以后这个社交账号就对应指定的会员)</p><h2 id="分布式session"><a href="#分布式session" class="headerlink" title="分布式session"></a>分布式session</h2><h3 id="Session共享问题-session原理"><a href="#Session共享问题-session原理" class="headerlink" title="Session共享问题-session原理"></a>Session共享问题-session原理</h3><p><img src="https://img-blog.csdnimg.cn/9612c00e16d5419aad783cbd53f858c0.png" alt="在这里插入图片描述"><br>session只能在当前域名auth.gulimall.com下起效。</p><p><img src="https://img-blog.csdnimg.cn/dd90640b2aa54229b24b562b48de5bb9.png" alt="在这里插入图片描述"><br>同一服务同一域名但是不同服务器 session也不行起效。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><h4 id="session复制"><a href="#session复制" class="headerlink" title="session复制"></a>session复制</h4><p><img src="https://img-blog.csdnimg.cn/b5b94801b10e4212acdb55e6dc989e3d.png" alt="在这里插入图片描述"><br>优点：<br>web-server（Tomcat）原生支持，只需要修改配置 文件</p><p>缺点：<br>1.session同步需要数据传输，占用大量网络带宽，降低了服务器群的业务处理能力<br>2.任意一台web-server保存的数据都是所有web-server的session总和，受到内存限制无法水平扩展更多的web-server<br>3.大型分布式集群情况下，由于所有web-server都全量保存数据，所以此方案不可取。</p><h4 id="客户端存储"><a href="#客户端存储" class="headerlink" title="客户端存储"></a>客户端存储</h4><p><img src="https://img-blog.csdnimg.cn/6c59744800ba43f0a1bbddb055aac770.png" alt="在这里插入图片描述"><br>优点：<br>服务器不需存储session，用户保存自己的session信息到cookie中。节省服务端资源</p><p>缺点：<br>每次http请求，携带用户在cookie中的完整信息， 浪费网络带宽。<br>session数据放在cookie中，cookie有长度限制4K，不能保存大量信息。<br>session数据放在cookie中，存在泄漏、篡改。</p><h4 id="hash一致性"><a href="#hash一致性" class="headerlink" title="hash一致性"></a>hash一致性</h4><p><img src="https://img-blog.csdnimg.cn/da5c626d32534aa1a3ab23e73dac27a1.png" alt="在这里插入图片描述"><br>优点：<br>只需要改nginx配置，不需要修改应用代码<br>负载均衡，只要hash属性的值分布是均匀的，多台web-server的负载是均衡的<br>可以支持web-server水平扩展（session同步法是不行的，受内存限制）</p><p>缺点：<br>session还是存在web-server中的，所以web-server重启可能导致部分session丢失，影响业务，如部分用户需要重新登录<br>如果web-server水平扩展，rehash后session重新分布，<br>也会有一部分用户路由不到正确的session</p><p>但是以上缺点问题也不是很大，因为session本来都是有有效期的。所以这两种反向代理的方式可以使用。</p><h4 id="统一存储"><a href="#统一存储" class="headerlink" title="统一存储"></a>统一存储</h4><p><img src="https://img-blog.csdnimg.cn/c4fee5c011c749b4a6a226c90548e235.png" alt="在这里插入图片描述"><br>优点：<br>没有安全隐患<br>可以水平扩展，数据库/缓存水平切分即可<br>web-server重启或者扩容都不会有 session丢失<br>缺点：<br>增加了一次网络调用，并且需要修改应用代码；如将所有的getSession方法替换为从Redis查数据的方式。redis获取数据比内存慢很多</p><p>上面缺点可以用SpringSession完美解决</p><p>对于不同域名无法携带session的问题，只需要放大域的范围即可。如原来的auth.gulimall.com变为.gulimall.com</p><h3 id="不同服务，子域session共享"><a href="#不同服务，子域session共享" class="headerlink" title="不同服务，子域session共享"></a>不同服务，子域session共享</h3><p><img src="https://img-blog.csdnimg.cn/7bfe42d3b15042c0946326a95349a040.png" alt="在这里插入图片描述"><br>1、第一次使用session；命令浏览器保存卡号。JSESSIONID这个cookie；<br>以后浏览器访问哪个网站就会带上这个网站的cookie；<br>jsessionid这个cookie默认是当前系统域名的。<br>子域之间； gulimall.com  auth.gulimall.com  order.gulimall.com<br>发卡的时候(指定域名为父域名)，即使是子域系统发的卡，也能让父域直接使用。</p><h3 id="SpringSession"><a href="#SpringSession" class="headerlink" title="SpringSession"></a>SpringSession</h3><p>每新建一个新服务，创建session别遗忘漏了步骤<br> 1、spring-session依赖，<br> 2、spring-session配置<br> 3、引入LoginInterceptor、WebMvcConfigure</p><h4 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>整合redis作为session存储<br>spring.session.store-type=redis<br>@EnableRedisHttpSession<br>网络传输 implements Serializable </p><p>1、默认发的令牌。session=dsajkdjl。作用域：当前域；（解决子域session共享问题）<br>2、使用JSON的序列化方式来序列化对象数据到redis中<br>不然每个类都要implements Serializable </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallSessionConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改域的范围</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CookieSerializer <span class="title">cookieSerializer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        DefaultCookieSerializer cookieSerializer = <span class="keyword">new</span> DefaultCookieSerializer();</span><br><span class="line">        cookieSerializer.setDomainName(<span class="string">&quot;gulimall.com&quot;</span>);</span><br><span class="line">        cookieSerializer.setCookieName(<span class="string">&quot;GULISESSION&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cookieSerializer;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改序列化</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisSerializer&lt;Object&gt; <span class="title">springSessionDefaultRedisSerializer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> GenericJackson2JsonRedisSerializer();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p> SpringSession 核心原理<br> 1)、@EnableRedisHttpSession导入RedisHttpSessionConfiguration配置<br>    1、给容器中添加了一个组件<br>        SessionRepository = 》》》【RedisOperationsSessionRepository】==》redis操作session。session的增删改查封装类<br>    2、SessionRepositoryFilter == 》Filter： session’存储过滤器；每个请求过来都必须经过filter<br>        1、创建的时候，就自动从容器中获取到了SessionRepository；<br>        2、原始的request，response都被包装。SessionRepositoryRequestWrapper， SessionRepositoryResponseWrapper<br>        3、以后获取session。request.getSession();<br>            //SessionRepositoryRequestWrapper<br>        4、wrappedRequest.getSession();===&gt; SessionRepository 中获取到的。</p><p> 装饰者模式；</p><p> 自动延期；redis中的数据也是有过期时间。</p><p><img src="https://img-blog.csdnimg.cn/fe888ebe6ce145c9809a53a083f7f85a.png" alt="在这里插入图片描述"></p><h2 id="多系统-单点登录"><a href="#多系统-单点登录" class="headerlink" title="多系统-单点登录"></a>多系统-单点登录</h2><p><img src="https://img-blog.csdnimg.cn/139b572ddae947da916dadd1d1ec0781.png" alt="在这里插入图片描述"></p><h3 id="SSO（单点登陆）"><a href="#SSO（单点登陆）" class="headerlink" title="SSO（单点登陆）"></a>SSO（单点登陆）</h3><p>Single Sign On 一处登陆、处处可用</p><p>/xxl-sso-server 登录服务器 8080    ssoserver.com<br>/xxl-sso-web-sample-springboot 项目1    8081    client1.com<br>/xxl-sso-web-sample-springboot 项目2    8082    client2.com</p><p>127.0.0.1 ssoserver.com<br>127.0.0.1 client1.com<br>127.0.0.1 client2.com</p><p>核心：三个系统即使域名不一样，想办法给三个系统同步同一个用户的票据；</p><ol><li>中央认证服务器；ssoserver.com</li><li>其他系统，想要登录去ssoserver.com登录，登录成功跳转回来<br>3）只要有一个登录，其他都不用登录<br>4）全系统统一一个sso-sessionid；所有系统可能域名都不相同</li></ol><p>感知这次是在 ssoserver 登录成功跳回来的。<br>不加token，无法感知，会陷入死循环<br><img src="https://img-blog.csdnimg.cn/873a7ec3b078411e94454eb33a70a8cc.png" alt="在这里插入图片描述"></p><h1 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制</h1><p>如果该方法没有返回值，但是又想让上层感知到该错误并返回给前端，使用异常机制。<br>如注册时，发现用户名已存在。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/regist&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">regist</span><span class="params">(<span class="meta">@RequestBody</span> MemberRegistVo vo)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            memberService.regist(vo);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (PhoneExistException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(BizCodeEnum.PHONE_EXIST_EXCEPTION.getCode(), BizCodeEnum.PHONE_EXIST_EXCEPTION.getMsg());</span><br><span class="line">        &#125;<span class="keyword">catch</span> (UsernameExistException e)&#123;</span><br><span class="line">            <span class="keyword">return</span> R.error(BizCodeEnum.USER_EXIST_EXCEPTION.getCode(), BizCodeEnum.USER_EXIST_EXCEPTION.getMsg());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkPhoneUnique</span><span class="params">(String phone)</span> <span class="keyword">throws</span> PhoneExistException</span>&#123;</span><br><span class="line">    MemberDao memberDao = <span class="keyword">this</span>.baseMapper;</span><br><span class="line">    Integer mobile = memberDao.selectCount(<span class="keyword">new</span> QueryWrapper&lt;MemberEntity&gt;().eq(<span class="string">&quot;mobile&quot;</span>, phone));</span><br><span class="line">    <span class="keyword">if</span> (mobile &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> PhoneExistException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PhoneExistException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PhoneExistException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">&quot;手机号已存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="购物车"><a href="#购物车" class="headerlink" title="购物车"></a>购物车</h1><h2 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h2><p>购物车需要高并发的读和写能力，不适合mysql。可以使用nosql保存每一条购物车的数据，但是mongoDB性能也不高，采用redis，读写速度都很高，但是redis使用内存保存数据，因此需要指定持久化策略，虽然会降低一定的吞吐量，但是依旧比其他高。</p><p>购物车分为离线购物车和在线购物车。<br>离线购物车可以不存在redis，而是存在Localstorage(浏览器，即客户端存储，后台不存)、cookie、WebSQL等。但是对于大数据时代，即使离线，平台也想要进行推荐服务等，因此需要借助购物车的信息。将离线在线的购物车信息都存到redis中。离线的购物车一旦登录就需要清空并加入到在线购物车中。</p><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><p>对象的数组。<br>每个用户对应两个购物车，临时和在线<br>购物车结构是一个双层 Map：Map&lt;String,Map&lt;String,String&gt;&gt;</p><ul><li>第一层 Map，Key 是用户 id</li><li>第二层 Map，Key 是购物车中商品 id，值是购物项数据</li></ul><p><img src="https://img-blog.csdnimg.cn/649dd55275e6407e9d50c65835c81ae0.png" alt="在这里插入图片描述"></p><h2 id="离线购物车"><a href="#离线购物车" class="headerlink" title="离线购物车"></a>离线购物车</h2><p>虽然京东已经取消了离线购物车</p><p>浏览器有一个cookie；user-key；标识用户身份，一个月后过期；<br>如果第一次使用jd的购物车功能，都会给一个临时的用户身份；<br>浏览器以后保存，每次访问都会带上这个cookie；</p><p>登录：session有<br>没登录：按照cookie里面带来user-key来做。<br>第一次：如果没有临时用户，帮忙创建一个临时用户。</p><h2 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h2><p>使用<strong>拦截器</strong>在执行目标方法之前，判断用户的登录状态。并封装传递(用户信息)给controller<br>拦截器全部放行，方法需要快速得到用户信息。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CartInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;UserInfoTo&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">     <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span></span><br><span class="line"><span class="params"><span class="function">                             Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        UserInfoTo userInfoTo = <span class="keyword">new</span> UserInfoTo();</span><br><span class="line"></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        MemberRespVo member = (MemberRespVo) session.getAttribute(AuthServerConstant.LOGIN_USER);</span><br><span class="line">        <span class="keyword">if</span>(member != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//用户登录</span></span><br><span class="line">            userInfoTo.setUserId(member.getId());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Cookie[] cookies = request.getCookies();</span><br><span class="line">        <span class="keyword">if</span>(cookies!=<span class="keyword">null</span> &amp;&amp; cookies.length&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">                <span class="comment">//user-key</span></span><br><span class="line">                String name = cookie.getName();</span><br><span class="line">                <span class="keyword">if</span>(name.equals(CartConstant.TEMP_USER_COOKIE_NAME))&#123;</span><br><span class="line">                    userInfoTo.setUserKey(cookie.getValue());</span><br><span class="line">                    userInfoTo.setTempUser(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有临时用户一定分配一个临时用户</span></span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isEmpty(userInfoTo.getUserKey()))&#123;</span><br><span class="line">            String uuid = UUID.randomUUID().toString();</span><br><span class="line">            userInfoTo.setUserKey(uuid);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//目标方法执行之前</span></span><br><span class="line">        threadLocal.set(userInfoTo);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 业务执行之后；分配临时用户，让浏览器保存</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        UserInfoTo userInfoTo = threadLocal.get();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果没有临时用户一定保存一个临时用户</span></span><br><span class="line">        <span class="keyword">if</span>(!userInfoTo.isTempUser())&#123;</span><br><span class="line">            <span class="comment">//持续的延长临时用户的过期时间</span></span><br><span class="line">            Cookie cookie = <span class="keyword">new</span> Cookie(CartConstant.TEMP_USER_COOKIE_NAME, userInfoTo.getUserKey());</span><br><span class="line">            cookie.setDomain(<span class="string">&quot;gulimall.com&quot;</span>);</span><br><span class="line">            cookie.setMaxAge(CartConstant.TEMP_USER_COOKIE_TIMEOUT);</span><br><span class="line">            response.addCookie(cookie);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>拦截器需要注册，仅仅一个@Component无法工作<br>放行所有请求”/**”</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallWebConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> CartInterceptor()).addPathPatterns(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ThreadLocal-同一个线程共享数据"><a href="#ThreadLocal-同一个线程共享数据" class="headerlink" title="ThreadLocal-同一个线程共享数据"></a>ThreadLocal-同一个线程共享数据</h2><p><img src="https://img-blog.csdnimg.cn/a9c485fbcdc54bfa8d8d05c29bd77893.png" alt="在这里插入图片描述"></p><p>每次都需要操作同一个key<br><code>stringRedisTemplate.opsForValue().get(cartKey,&quot;1&quot;) </code><br>简化操作<br><code>BoundHashOperations&lt;String, Object, Object&gt; operations = stringRedisTemplate.boundHashOps(cartKey);</code></p><p>如果多个远程调用服务，串行调用费时，采用异步调用。<br>自己创建一个线程池。</p><h1 id="消息队列Message-Queue"><a href="#消息队列Message-Queue" class="headerlink" title="消息队列Message Queue"></a>消息队列Message Queue</h1><p>消息中间件</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="异步处理"><a href="#异步处理" class="headerlink" title="异步处理"></a>异步处理</h3><p><img src="https://img-blog.csdnimg.cn/3657e65c3a724bccbb6b52919f2b15ea.png" alt="在这里插入图片描述"></p><h3 id="应用解耦"><a href="#应用解耦" class="headerlink" title="应用解耦"></a>应用解耦</h3><p>接口会变<br><img src="https://img-blog.csdnimg.cn/6ce8e704e34f4c878e9f8ee22a9115b2.png" alt="在这里插入图片描述"></p><h3 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h3><p><img src="https://img-blog.csdnimg.cn/b5fed7d7ee924af79856d2f7eca0dd2c.png" alt="在这里插入图片描述"></p><h2 id="重要概念："><a href="#重要概念：" class="headerlink" title="重要概念："></a>重要概念：</h2><p><strong>消息代理（message broker）</strong>和<strong>目的地（destination）</strong><br>当消息发送者发送消息以后，将由消息代理接管，消息代理保证消息传递到指定目的地。<br>消息队列主要有两种形式的目的地<br>队列（queue）：点对点消息通信（point-to-point）<br>主题（topic）：发布（publish）/订阅（subscribe）消息通信</p><p>点对点式：<br>消息发送者发送消息，消息代理将其放入一个队列中，消息接收者从队列中获 取消息内容，消息读取后被移出队列<br>消息只有唯一的发送者和接受者，但并不是说只能有一个接收者</p><p>发布订阅式：<br>发送者（发布者）发送消息到主题，多个接收者（订阅者）监听（订阅）这个 主题，那么就会在消息到达时同时收到消息</p><h3 id="两种规范"><a href="#两种规范" class="headerlink" title="两种规范"></a>两种规范</h3><p>JMS（Java Message Service）JAVA消息服务：<br>基于JVM消息代理的规范。ActiveMQ、HornetMQ是JMS实现</p><p>AMQP（Advanced Message Queuing Protocol）<br>高级消息队列协议，也是一个消息代理的规范，兼容JMS<br>RabbitMQ是AMQP的实现</p><p><img src="https://img-blog.csdnimg.cn/5f758d2d60c2407b93f59aaa0ff6f129.png" alt="在这里插入图片描述"></p><p>Spring支持：<br>spring-jms提供了对JMS的支持<br>spring-rabbit提供了对AMQP的支持<br>需要ConnectionFactory的实现来连接消息代理<br>提供JmsTemplate、RabbitTemplate来发送消息<br>@JmsListener（JMS）、@RabbitListener（AMQP）注解在方法上监听消息 代理发布的消息<br>@EnableJms、@EnableRabbit开启支持</p><p>Spring Boot自动配置：<br>JmsAutoConfiguration  RabbitAutoConfiguration</p><p>市面的MQ产品：<br>ActiveMQ、RabbitMQ、RocketMQ、Kafka</p><h2 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h2><p>RabbitMQ是一个由erlang开发的AMQP(Advanved Message Queue Protocol)的开源实现。</p><p>核心概念<br>Message<br>消息，消息是不具名的，它由消息头和消息体组成。消息体是不透明的，而消息头则由一系列的可选属性组成， 这些属性包括routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。</p><p>Publisher<br>消息的生产者，也是一个向交换器发布消息的客户端应用程序。</p><p>Exchange<br>交换器，用来接收生产者发送的消息并将这些消息路由给服务器中的队列。<br>Exchange有4种类型：direct(默认)，fanout, topic, 和headers，不同类型的Exchange转发消息的策略有所区别</p><p>Queue<br>消息队列，用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直 在队列里面，等待消费者连接到这个队列将其取走。</p><p>Binding<br>绑定，用于消息队列和交换器之间的关联。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交 换器理解成一个由绑定构成的路由表。<br>Exchange 和Queue的绑定可以是多对多的关系。</p><p>Connection<br>网络连接，比如一个TCP连接。</p><p>Channel<br>信道，多路复用连接中的一条独立的双向数据流通道。信道是建立在真实的TCP连接内的虚拟连接，AMQP 命令都是通过信道 发出去的，不管是发布消息、订阅队列还是接收消息，这些动作都是通过信道完成。因为对于操作系统来说建立和销毁 TCP 都 是非常昂贵的开销，所以引入了信道的概念，以复用一条 TCP 连接。</p><p>Consumer<br>消息的消费者，表示一个从消息队列中取得消息的客户端应用程序。</p><p>Virtual Host<br>虚拟主机，表示一批交换器、消息队列和相关对象。虚拟主机是共享相同的身份认证和加 密环境的独立服务器域。每个 vhost 本质上就是一个 mini 版的 RabbitMQ 服务器，拥 有自己的队列、交换器、绑定和权限机制。vhost 是 AMQP 概念的基础，必须在连接时 指定，RabbitMQ 默认的 vhost 是 / 。</p><p>Broker<br>表示消息队列服务器实体</p><p><img src="https://img-blog.csdnimg.cn/4aef6be3ff0b4adf89ccd474f8bbd29d.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/e7ca79e1fd1d4aacbcff6f14eb50ef91.png" alt="在这里插入图片描述"></p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>docker run -d –name rabbitmq -p 5671:5671 -p 5672:5672 -p 4369:4369 -p  25672:25672 -p 15671:15671 -p 15672:15672 rabbitmq:management</p><p>4369, 25672 (Erlang发现&amp;集群端口)<br>5672, 5671 (AMQP端口)<br>15672 (web管理后台端口)<br>61613, 61614 (STOMP协议端口)<br>1883, 8883 (MQTT协议端口)<br><a href="https://www.rabbitmq.com/networking.html">https://www.rabbitmq.com/networking.html</a></p><p><a href="http://192.168.10.102:15672/#/">http://192.168.10.102:15672/#/</a><br>账号密码guest</p><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><p>AMQP 中的消息路由<br>AMQP 中消息的路由过程和 Java 开发者熟悉的 JMS 存在一些差别，AMQP 中增加了 Exchange 和Binding 的角色。生产者把消息发布到 Exchange 上，消息最终到达队列并被消费者接收，而 Binding 决定交换器的消息应该发送到那个队列。</p><p>Exchange分发消息时根据类型的不同分发策略有区别，目前共四种类型：<strong>direct、<br>fanout、topic、headers</strong> 。headers 匹配 AMQP 消息的 header 而不是路由键，<br>headers 交换器(点对点)和 direct 交换器完全一致，但性能差很多，目前几乎用不到了，所以直接 看另外三种类型：</p><h4 id="direct"><a href="#direct" class="headerlink" title="direct"></a>direct</h4><p>消息中的路由键（routing key）如果和<br>Binding 中的 binding key 一致， 交换器 就将消息发到对应的队列中。路由键与队列名完全匹配，如果一个队列绑定到交换 机要求路由键为“dog”，则只转发 routing key 标记为“dog”的消息，不会转发“dog.puppy”，也不会转发“dog.guard”  等等。它是完全匹配、单播的模式。</p><h4 id="fanout"><a href="#fanout" class="headerlink" title="fanout"></a>fanout</h4><p>每个发到 fanout 类型交换器的消息都会分到所有绑定的队列上去。fanout 交换器不处理路由键，只是简单的将队列 绑定到交换器上，每个发送到交换器的 消息都会被转发到与该交换器绑定的所 有队列上。很像子网广播，每台子网内 的主机都获得了一份复制的消息。<br>fanout 类型转发消息是最快的。</p><h4 id="topic"><a href="#topic" class="headerlink" title="topic"></a>topic</h4><p>topic 交换器通过模式匹配分配消息的 路由键属性，将路由键和某个模式进行<br>匹配，此时队列需要绑定到一个模式上。 它将路由键和绑定键的字符串切分成单 词，这些单词之间用点隔开。它同样也 会识别两个通配符：符号“#”和符号“<em>”。#匹配0个或多个单词，</em> 匹配一 个单词。</p><p><img src="https://img-blog.csdnimg.cn/dd9246934f5048bb97c1214231c74920.png" alt="在这里插入图片描述"></p><h3 id="RabbitMQ整合"><a href="#RabbitMQ整合" class="headerlink" title="RabbitMQ整合"></a>RabbitMQ整合</h3><ol><li>引入 spring-boot-starter-amqp</li><li>application.yml配置</li><li>测试RabbitMQ<br> AmqpAdmin：管理组件<br> RabbitTemplate：消息发送处理组件<br> @RabbitListener 监听消息的方法可以有三种参数（不分数量，顺序）<br> Object content, Message message, Channel channel</li></ol><p> 使用RabbitMQ<br> 1、引入amqp场景；RabbitAutoConfiguration 就会自动生效<br> 2、给容器中自动配置了<br>    RabbitTemplate、AmqpAdmin、CachingConnectionFactory、RabbitMessagingTemplate;<br>    所有的属性都是 spring.rabbitmq<br>    @ConfigurationProperties(prefix = “spring.rabbitmq”)<br>    public class RabbitProperties<br> 3、给配置文件中配置 spring.rabbitmq 信息<br>   rabbitmq:<br>    host: 192.168.10.102<br>    virtual-host: /<br>    port: 5672<br> 4、@EnableRabbit: @EnableXxxxx；开启功能<br>不监听消息，可以不用这个注解</p><ol><li>发送消息，如果发送的消息是个对象，我们会使用序列化机制，将对象写出去。对象必须实现Serializable</li><li>发送的对象类型的消息，可以转成一个json</li></ol><h4 id="创建Exchange、Queue、Binding"><a href="#创建Exchange、Queue、Binding" class="headerlink" title="创建Exchange、Queue、Binding"></a>创建Exchange、Queue、Binding</h4><p><code>@Bean Binding，Queue，Exchange</code><br> 容器中的 Binding，Queue，Exchange 都会自动创建（RabbitMQ没有的情况）<br>RabbitMQ 只要有。@Bean声明属性发生变化也不会覆盖</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">orderDelayQueue</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Exchange <span class="title">orderEventExchange</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">orderCreateOrderBinding</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 AmqpAdmin 进行创建，太复杂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//amqpAdmin</span></span><br><span class="line">    <span class="comment">//Exchange</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * DirectExchange(String name, boolean durable, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    DirectExchange directExchange = <span class="keyword">new</span> DirectExchange(<span class="string">&quot;hello-java-exchange&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>);</span><br><span class="line">    amqpAdmin.declareExchange(directExchange);</span><br><span class="line">    log.info(<span class="string">&quot;Exchange[&#123;&#125;]创建成功&quot;</span>, <span class="string">&quot;hello-java-exchange&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//public Queue(String name, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments)</span></span><br><span class="line">    Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;hello-java-queue&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>);</span><br><span class="line">    amqpAdmin.declareQueue(queue);</span><br><span class="line">    log.info(<span class="string">&quot;Queue[&#123;&#125;]创建成功&quot;</span>, <span class="string">&quot;hello-java-queue&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createBinding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//(String destination【目的地】,</span></span><br><span class="line">    <span class="comment">// DestinationType destinationType【目的地类型】,</span></span><br><span class="line">    <span class="comment">// String exchange【交换机】,</span></span><br><span class="line">    <span class="comment">// String routingKey【路由键】,</span></span><br><span class="line">    <span class="comment">//Map&lt;String, Object&gt; arguments【自定义参数】)</span></span><br><span class="line">    <span class="comment">//将exchange指定的交换机和destination目的地进行绑定，使用routingKey作为指定的路由键</span></span><br><span class="line">    Binding binding = <span class="keyword">new</span> Binding(<span class="string">&quot;hello-java-queue&quot;</span>,</span><br><span class="line">            Binding.DestinationType.QUEUE,</span><br><span class="line">            <span class="string">&quot;hello-java-exchange&quot;</span>,</span><br><span class="line">            <span class="string">&quot;hello.java&quot;</span>, <span class="keyword">null</span>);</span><br><span class="line">    amqpAdmin.declareBinding(binding);</span><br><span class="line">    log.info(<span class="string">&quot;Binding[&#123;&#125;]创建成功&quot;</span>, <span class="string">&quot;hello-java-binding&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRabbitConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用JSON序列化机制，进行消息转换</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> MessageConverter <span class="title">messageConverter</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Jackson2JsonMessageConverter();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">OrderEntity entity = <span class="keyword">new</span> OrderEntity();</span><br><span class="line">entity.setOrderSn(UUID.randomUUID().toString());</span><br><span class="line">rabbitTemplate.convertAndSend(<span class="string">&quot;hello-java-exchange&quot;</span>, <span class="string">&quot;hello.java&quot;</span>, entity,<span class="keyword">new</span> CorrelationData(UUID.randomUUID().toString()));<span class="comment">//指定消息唯一Id</span></span><br></pre></td></tr></table></figure><h4 id="接受消息"><a href="#接受消息" class="headerlink" title="接受消息"></a>接受消息</h4><p>queues：声明需要监听的所有队列</p><p>org.springframework.amqp.core.Message</p><p>参数可以写一下类型<br>1、Message message：原生消息详细信息。头+体<br>2、T&lt;发送的消息的类型&gt; OrderReturnReasonEntity content；<br>3、Channel channel：当前传输数据的通道</p><p>Queue：可以很多人都来监听。只要收到消息，队列删除消息，而且只能有一个收到此消息<br>场景：<br>1）、订单服务启动多个；同一个消息，只能有一个客户端收到<br>2)、 只有一个消息完全处理完，方法运行结束，我们就可以接收到下一个消息</p><p> 5、监听消息：使用@RabbitListener；必须有@EnableRabbit<br> @RabbitListener: 类+方法上（监听哪些队列即可）<br> @RabbitHandler：标在方法上（重载区分不同的消息）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RabbitListener(queues = &#123;&quot;hello-java-queue&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Service(&quot;orderItemService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderItemServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">OrderItemDao</span>, <span class="title">OrderItemEntity</span>&gt; <span class="keyword">implements</span> <span class="title">OrderItemService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RabbitListener(queues = &#123;&quot;hello-java-queue&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(Message message,</span></span></span><br><span class="line"><span class="params"><span class="function">                               OrderReturnReasonEntity content,</span></span></span><br><span class="line"><span class="params"><span class="function">                               Channel channel)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage2</span><span class="params">(OrderEntity content)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;哈哈&quot;,&quot;sort&quot;:null,&quot;status&quot;:null,&quot;createTime&quot;:1581144531744&#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到消息...&quot;</span>+content);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="消息确认机制-可靠抵达"><a href="#消息确认机制-可靠抵达" class="headerlink" title="消息确认机制-可靠抵达"></a>消息确认机制-可靠抵达</h3><p>保证消息不丢失，可靠抵达，可以使用事务消息，性能下降250倍，为此引入<strong>确认机制</strong><br>publisher confirmCallback 确认模式<br>publisher returnCallback 未投递到 queue 退回模式<br>consumer ack机制</p><p><img src="https://img-blog.csdnimg.cn/c6dc567a73654d508565fbb8c8d385cd.png" alt="在这里插入图片描述"></p><p>定制RabbitTemplate<br>1、服务器收到消息就回调<br>    1、<code>spring.rabbitmq.publisher-confirms=true 弃用</code><br>    <code>publisher-confirm-type: correlated</code><br>    2、设置确认回调ConfirmCallback<br>2、消息正确抵达队列进行回调<br>    1、 <code>spring.rabbitmq.publisher-returns=true</code><br>    <code>spring.rabbitmq.template.mandatory=true</code><br>    2、设置确认回调ReturnCallback</p><p>3、消费端确认（保证每个消息被正确消费，此时才可以broker删除这个消息）。<br><code>spring.rabbitmq.listener.simple.acknowledge-mode=manual </code>手动签收<br>1、默认是自动确认的，只要消息接收到，客户端会自动确认，服务端就会移除这个消息<br>问题：<br>我们收到很多消息，自动回复给服务器ack，只有一个消息处理成功，宕机了。就会发生消息丢失；<br>消费者手动确认模式。只要我们没有明确告诉MQ，货物被签收。没有Ack，<br>消息就一直是unacked状态。即使Consumer宕机。消息不会丢失，会重新变为Ready，下一次有新的Consumer连接进来就发给他<br>2、如何签收:<br>channel.basicAck(deliveryTag,false);签收；业务成功完成就应该签收<br>channel.basicNack(deliveryTag,false,true);拒签；业务失败，拒签</p><h4 id="ConfirmCallback"><a href="#ConfirmCallback" class="headerlink" title="ConfirmCallback"></a>ConfirmCallback</h4><p>~~spring.rabbitmq.publisher-confirms=true ~~ <strong>已启用</strong><br>在创建 connectionFactory 的时候设置 PublisherConfirms(true) 选项，开启<br>confirmcallback 。<br>CorrelationData：用来表示当前消息唯一性。<br>消息只要被 broker 接收到就会执行 confirmCallback，如果是 cluster 模式，需要所有<br>broker 接收到才会调用 confirmCallback。</p><h4 id="ReturnCallback"><a href="#ReturnCallback" class="headerlink" title="ReturnCallback"></a>ReturnCallback</h4><p>spring.rabbitmq.publisher-returns=true<br>spring.rabbitmq.template.mandatory=true<br>confirm 模式只能保证消息到达 broker，不能保证消息准确投递到目标 queue 里。在有 些业务场景下，我们需要保证消息一定要投递到目标 queue 里，此时就需要用到<br>return 退回模式。<br>这样如果未能投递到目标 queue 里将调用 returnCallback ，可以记录下详细到投递数 据，定期的巡检或者自动纠错都需要这些数据。</p><h4 id="Ack消息确认机制"><a href="#Ack消息确认机制" class="headerlink" title="Ack消息确认机制"></a>Ack消息确认机制</h4><p>消费者获取到消息，成功处理，可以回复Ack给Broker<br>basic.ack用于肯定确认；broker将移除此消息<br>basic.nack用于否定确认；可以指定broker是否丢弃此消息，可以批量<br>basic.reject用于否定确认；同上，但不能批量<br>默认自动ack，消息被消费者收到，就会从broker的queue中移除<br>queue无消费者，消息依然会被存储，直到消费者消费<br>消费者收到消息，默认会自动ack。但是如果无法确定此消息是否被处理完成， 或者成功处理。我们可以开启手动ack模式<br>消息处理成功，ack()，接受下一个消息，此消息broker就会移除<br>消息处理失败，nack()/reject()，重新发送给其他人进行处理，或者容错处理后ack<br>消息一直没有调用ack/nack方法，broker认为此消息正在被处理，不会投递给别人，此时客户 端断开，消息不会被broker移除，会投递给别人</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recieveMessage</span><span class="params">(Message message,</span></span></span><br><span class="line"><span class="params"><span class="function">                               OrderReturnReasonEntity content,</span></span></span><br><span class="line"><span class="params"><span class="function">                               Channel channel)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="comment">//&#123;&quot;id&quot;:1,&quot;name&quot;:&quot;哈哈&quot;,&quot;sort&quot;:null,&quot;status&quot;:null,&quot;createTime&quot;:1581144531744&#125;</span></span><br><span class="line">        System.out.println(<span class="string">&quot;接收到消息...&quot;</span>+content);</span><br><span class="line">        <span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line">        <span class="comment">//消息头属性信息</span></span><br><span class="line">        MessageProperties properties = message.getMessageProperties();</span><br><span class="line"><span class="comment">//        Thread.sleep(3000);</span></span><br><span class="line">        System.out.println(<span class="string">&quot;消息处理完成=&gt;&quot;</span>+content.getName());</span><br><span class="line">        <span class="comment">//channel内按顺序自增的。</span></span><br><span class="line">        <span class="keyword">long</span> deliveryTag = message.getMessageProperties().getDeliveryTag();</span><br><span class="line">        System.out.println(<span class="string">&quot;deliveryTag==&gt;&quot;</span>+deliveryTag);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//签收货物,非批量模式</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(deliveryTag%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//收货</span></span><br><span class="line">                channel.basicAck(deliveryTag,<span class="keyword">false</span>);</span><br><span class="line">                System.out.println(<span class="string">&quot;签收了货物...&quot;</span>+deliveryTag);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//退货 requeue=false 丢弃  requeue=true 发回服务器，服务器重新入队。</span></span><br><span class="line">                <span class="comment">//long deliveryTag, boolean multiple, boolean requeue</span></span><br><span class="line">                <span class="comment">//签收了货物...6</span></span><br><span class="line">                channel.basicNack(deliveryTag,<span class="keyword">false</span>,<span class="keyword">true</span>);</span><br><span class="line">                <span class="comment">//long deliveryTag, boolean requeue</span></span><br><span class="line"><span class="comment">//                channel.basicReject();</span></span><br><span class="line">                System.out.println(<span class="string">&quot;没有签收了货物...&quot;</span>+deliveryTag);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            <span class="comment">//网络中断</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @PostConstruct //MyRabbitConfig对象创建完成以后，执行这个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initRabbitTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置确认回调</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 1、只要消息抵达Broker就ack=true</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> correlationData 当前消息的唯一关联数据（这个是消息的唯一id）</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> ack  消息是否成功收到</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cause 失败的原因</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 1、做好消息确认机制（pulisher，consumer【手动ack】）</span></span><br><span class="line"><span class="comment">                 * 2、每一个发送的消息都在数据库做好记录。定期将失败的消息再次发送一遍</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">//服务器收到了；</span></span><br><span class="line">                <span class="comment">//修改消息的状态</span></span><br><span class="line">                System.out.println(<span class="string">&quot;confirm...correlationData[&quot;</span>+correlationData+<span class="string">&quot;]==&gt;ack[&quot;</span>+ack+<span class="string">&quot;]==&gt;cause[&quot;</span>+cause+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置消息抵达队列的确认回调</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">new</span> RabbitTemplate.ReturnCallback() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 只要消息没有投递给指定的队列，就触发这个失败回调</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> message   投递失败的消息详细信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyCode 回复的状态码</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyText 回复的文本内容</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exchange  当时这个消息发给哪个交换机</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> routingKey 当时这个消息用哪个路由键</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//报错误了。修改数据库当前消息的状态-&gt;错误。</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Fail Message[&quot;</span>+returnedMessage.getMessage()+</span><br><span class="line">                        <span class="string">&quot;]==&gt;replyCode[&quot;</span>+returnedMessage.getReplyCode()+</span><br><span class="line">                        <span class="string">&quot;]==&gt;replyText[&quot;</span>+returnedMessage.getReplyText()+</span><br><span class="line">                        <span class="string">&quot;]===&gt;exchange[&quot;</span>+returnedMessage.getExchange()+</span><br><span class="line">                        <span class="string">&quot;]===&gt;routingKey[&quot;</span>+returnedMessage.getRoutingKey()+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="延时队列（实现定时任务）"><a href="#延时队列（实现定时任务）" class="headerlink" title="延时队列（实现定时任务）"></a>延时队列（实现定时任务）</h3><p>场景：<br>比如未付款订单，超过一定时间后，系统自动取消订单并释放占有物品。<br><img src="https://img-blog.csdnimg.cn/cbe0006d35be453baabdd7cabdfb6b7a.png" alt="在这里插入图片描述"></p><p>常用解决方案：<br>spring的 schedule 定时任务轮询数据库<br>缺点：<br>消耗系统内存、增加了数据库的压力、存在较大的时间误差<br>下单的具体时间不确定，有时间差<br><img src="https://img-blog.csdnimg.cn/ee890d890e0749cb8c9a2deba9380ffb.png" alt="在这里插入图片描述"></p><p>解决：rabbitmq的消息TTL和死信Exchange结合</p><h4 id="消息的TTL（Time-To-Live）"><a href="#消息的TTL（Time-To-Live）" class="headerlink" title="消息的TTL（Time To Live）"></a>消息的TTL（Time To Live）</h4><p>消息的TTL就是消息的存活时间。<br>RabbitMQ可以对队列和消息分别设置TTL。<br>对队列设置就是队列没有消费者连着的保留时间，也可以对每一个单独的消息做单独的 设置。超过了这个时间，我们认为这个消息就死了，称之为死信。<br>如果队列设置了，消息也设置了，那么会取小的。所以一个消息如果被路由到不同的队 列中，这个消息死亡的时间有可能不一样（不同的队列设置）。这里单讲单个消息的<br>TTL，因为它才是实现延迟任务的关键。可以通过设置消息的expiration字段或者x-  message-ttl属性来设置时间，两者是一样的效果。</p><h4 id="Dead-Letter-Exchanges（DLX）"><a href="#Dead-Letter-Exchanges（DLX）" class="headerlink" title="Dead Letter Exchanges（DLX）"></a>Dead Letter Exchanges（DLX）</h4><p>一个消息在满足如下条件下，会进死信路由，记住这里是路由而不是队列， 一个路由可以对应很多队列。（什么是死信）</p><ul><li>一个消息被Consumer拒收了，并且reject方法的参数里requeue是false。也就是说不 会被再次放在队列里，被其他消费者使用。（basic.reject/ basic.nack）requeue=false</li><li>上面的消息的TTL到了，消息过期了。</li><li>队列的长度限制满了。排在前面的消息会被丢弃或者扔到死信路由上</li></ul><p>Dead Letter Exchange其实就是一种普通的exchange，和创建其他exchange没有两样。只是在某一个设置Dead Letter Exchange的队列中有 消息过期了，会自动触发消息的转发，发送到Dead Letter Exchange中去。<br>我们既可以控制消息在一段时间后变成死信，又可以控制变成死信的消息 被路由到某一个指定的交换机，结合二者，其实就可以实现一个延时队列</p><p><img src="https://img-blog.csdnimg.cn/b7bb993b77c246d8b90f79bc932f70df.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/e9dc2cf91a934d2190891264b33cf6d1.png" alt="在这里插入图片描述"><br>推荐给队列设置，因为rabbitMQ使用的是惰性检查机制（懒检查）。<br>即设置3个消息，分别是5分钟到期，3分钟到期，1分钟到期。首先检查到第一个5分钟，则等5分钟后再来取这个消息。后面的消息必须等待前面到期后才能到期。</p><h1 id="订单"><a href="#订单" class="headerlink" title="订单"></a>订单</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="1、订单中心"><a href="#1、订单中心" class="headerlink" title="1、订单中心"></a>1、订单中心</h3><p>电商系统涉及到 3 流，分别时信息流，资金流，物流，而订单系统作为中枢将三者有机的集<br>合起来。<br>订单模块是电商系统的枢纽，在订单这个环节上需求获取多个模块的数据和信息，同时对这<br>些信息进行加工处理后流向下个环节，这一系列就构成了订单的信息流通。</p><p><img src="https://img-blog.csdnimg.cn/ec8671892e7b41b4bdfc1a51010ad61c.png" alt="在这里插入图片描述"></p><h3 id="2、订单状态"><a href="#2、订单状态" class="headerlink" title="2、订单状态"></a>2、订单状态</h3><ol><li>待付款<br>用户提交订单后，订单进行预下单，目前主流电商网站都会唤起支付，便于用户快速完成支<br>付，需要注意的是待付款状态下可以对库存进行锁定，锁定库存需要配置支付超时时间，超<br>时后将自动取消订单，订单变更关闭状态。</li><li>已付款/待发货<br>用户完成订单支付，订单系统需要记录支付时间，支付流水单号便于对账，订单下放到 WMS<br>系统，仓库进行调拨，配货，分拣，出库等操作。</li><li>待收货/已发货<br>仓储将商品出库后，订单进入物流环节，订单系统需要同步物流信息，便于用户实时知悉物<br>品物流状态</li><li>已完成<br>用户确认收货后，订单交易完成。后续支付侧进行结算，如果订单存在问题进入售后状态</li><li>已取消<br>付款之前取消订单。包括超时未付款或用户商户取消订单都会产生这种订单状态。</li><li>售后中<br>用户在付款后申请退款，或商家发货后用户申请退换货。<br>售后也同样存在各种状态，当发起售后申请后生成售后订单，售后订单状态为待审核，等待<br>商家审核，商家审核通过后订单状态变更为待退货，等待用户将商品寄回，商家收货后订单<br>状态更新为待退款状态，退款到用户原账户后订单状态更新为售后成功。</li></ol><h3 id="3、订单流程"><a href="#3、订单流程" class="headerlink" title="3、订单流程"></a>3、订单流程</h3><p><img src="https://img-blog.csdnimg.cn/9bef3a116d6b470a80abb723ca0018e1.png" alt="在这里插入图片描述"></p><h2 id="订单必须在登录状态进行"><a href="#订单必须在登录状态进行" class="headerlink" title="订单必须在登录状态进行"></a>订单必须在登录状态进行</h2><p>设置拦截器，同时对于部分请求放行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginUserInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ThreadLocal&lt;MemberRespVo&gt; loginUser=<span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//  /order/order/status/2948294820984028420</span></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        AntPathMatcher antPathMatcher = <span class="keyword">new</span> AntPathMatcher();</span><br><span class="line">        <span class="keyword">boolean</span> match = antPathMatcher.match(<span class="string">&quot;/order/order/status/**&quot;</span>, uri);</span><br><span class="line">        <span class="keyword">boolean</span> match1 = antPathMatcher.match(<span class="string">&quot;/payed/notify&quot;</span>, uri);</span><br><span class="line">        <span class="keyword">if</span>(match || match1)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        MemberRespVo attribute = (MemberRespVo) request.getSession().getAttribute(AuthServerConstant.LOGIN_USER);</span><br><span class="line">        <span class="keyword">if</span> (attribute!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            loginUser.set(attribute);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//没登录就去登录</span></span><br><span class="line">            request.getSession().setAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;请先进行登录&quot;</span>);</span><br><span class="line">            response.sendRedirect(<span class="string">&quot;http://auth.gulimall.com/login.html&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Feign远程调用丢失请求头问题"><a href="#Feign远程调用丢失请求头问题" class="headerlink" title="Feign远程调用丢失请求头问题"></a>Feign远程调用丢失请求头问题</h1><p><img src="https://img-blog.csdnimg.cn/c3c79f4f7347493ca0d6bb2f98892446.png" alt="在这里插入图片描述"></p><p>feign在远程调用之前要构造请求，调用很多的拦截器<br>RequestInterceptor interceptor : requestInterceptors</p><p>加上feign远程调用的请求拦截器<br>将丢失的Cookie头信息重新加上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuliFeignConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean(&quot;requestInterceptor&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RequestInterceptor <span class="title">requestInterceptor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RequestInterceptor()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apply</span><span class="params">(RequestTemplate template)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//1、RequestContextHolder拿到刚进来的这个请求，本质就是ThreadLocal</span></span><br><span class="line">                ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();</span><br><span class="line">                <span class="keyword">if</span>(attributes!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;RequestInterceptor线程....&quot;</span>+Thread.currentThread().getId());</span><br><span class="line">                    HttpServletRequest request = attributes.getRequest(); <span class="comment">//老请求</span></span><br><span class="line">                    <span class="keyword">if</span>(request != <span class="keyword">null</span>)&#123;</span><br><span class="line">                        <span class="comment">//同步请求头数据，Cookie</span></span><br><span class="line">                        String cookie = request.getHeader(<span class="string">&quot;Cookie&quot;</span>);</span><br><span class="line">                        <span class="comment">//给新请求同步了老请求的cookie</span></span><br><span class="line">                        template.header(<span class="string">&quot;Cookie&quot;</span>,cookie);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="异步情况丢失上下文问题"><a href="#异步情况丢失上下文问题" class="headerlink" title="异步情况丢失上下文问题"></a>异步情况丢失上下文问题</h2><p><img src="https://img-blog.csdnimg.cn/ce422a85c58842ce8f9df3d337776727.png" alt="在这里插入图片描述"><br>异步线程不一样了，线程上下文也变了。</p><p>RequestContextHolder看似都一样，但是其中的ThreadLocal不一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取之前的请求</span></span><br><span class="line">RequestAttributes requestAttributes = RequestContextHolder.getRequestAttributes();</span><br><span class="line"></span><br><span class="line">CompletableFuture&lt;Void&gt; getAddressFuture = CompletableFuture.runAsync(() -&gt; &#123;</span><br><span class="line"><span class="comment">//1、远程查询所有的收货地址列表</span></span><br><span class="line">System.out.println(<span class="string">&quot;member线程....&quot;</span> + Thread.currentThread().getId());</span><br><span class="line"><span class="comment">//每一个线程都来共享之前的请求数据</span></span><br><span class="line">RequestContextHolder.setRequestAttributes(requestAttributes);</span><br><span class="line">List&lt;MemberAddressVo&gt; address = memberFeignService.getAddress(memberRespVo.getId());</span><br><span class="line">confirmVo.setAddress(address);</span><br><span class="line">&#125;, executor);</span><br></pre></td></tr></table></figure><h1 id="幂等性处理"><a href="#幂等性处理" class="headerlink" title="幂等性处理"></a>幂等性处理</h1><p>接口幂等性就是用户对于同一操作发起的一次请求或者多次请求的结果是一致的，不会因<br>为多次点击而产生了副作用；比如说支付场景，用户购买了商品支付扣款成功，但是返回结<br>果的时候网络异常，此时钱已经扣了，用户再次点击按钮，此时会进行第二次扣款，返回结<br>果成功，用户查询余额返发现多扣钱了，流水记录也变成了两条．．．,这就没有保证接口<br>的幂等性。</p><p><strong>应用：</strong><br>用户多次点击按钮<br>用户页面回退再次提交<br>微服务互相调用，由于网络问题，导致请求失败。feign 触发重试机制<br>其他业务情况</p><p>以 SQL 为例，有些操作是天然幂等的。<br>SELECT * FROM table WHER id=?，无论执行多少次都不会改变状态，是天然的幂等。<br>UPDATE tab1 SET col1=1 WHERE col2=2，无论执行成功多少次状态都是一致的，也是幂等操作。<br>delete from user where userid=1，多次操作，结果一样，具备幂等性<br>insert into user(userid,name) values(1,’a’) 如 userid 为唯一主键，即重复操作上面的业务，只<br>会插入一条用户数据，具备幂等性。<br>——————————————————————————————————————<br>UPDATE tab1 SET col1=col1+1 WHERE col2=2，每次执行的结果都会发生变化，不是幂等的。<br>insert into user(userid,name) values(1,’a’) 如 userid 不是主键，可以重复，那上面业务多次操<br>作，数据都会新增多条，不具备幂等性。</p><h2 id="幂等解决方案"><a href="#幂等解决方案" class="headerlink" title="幂等解决方案"></a>幂等解决方案</h2><h3 id="1、token-机制"><a href="#1、token-机制" class="headerlink" title="1、token 机制"></a>1、token 机制</h3><p>如验证码</p><p>1、服务端提供了发送 token 的接口。我们在分析业务的时候，哪些业务是存在幂等问题的，<br>就必须在执行业务前，先去获取 token，服务器会把 token 保存到 redis 中。<br>2、然后调用业务接口请求时，把 token 携带过去，一般放在请求头部。<br>3、服务器判断 token 是否存在 redis 中，存在表示第一次请求，然后删除 token,继续执行业<br>务。<br>4、如果判断 token 不存在 redis 中，就表示是重复操作，直接返回重复标记给 client，这样<br>就保证了业务代码，不被重复执行。</p><p>危险性：<br>1、先删除 token 还是后删除 token；<br>(1) 先删除可能导致，业务确实没有执行，重试还带上之前 token，由于防重设计导致，请求还是不能执行。<br>(2) 后删除可能导致，业务处理成功，但是服务闪断，出现超时，没有删除 token，别人继续重试，导致业务被执行两边<br>(3) 我们最好设计为<strong>先删除 token</strong>，如果业务调用失败，就重新获取 token 再次请求。</p><p>2、Token 获取、比较和删除必须是<strong>原子性</strong><br>(1) redis.get(token) 、token.equals、redis.del(token)如果这两个操作不是原子，可能导<br>致，高并发下，都 get 到同样的数据，判断都成功，继续业务并发执行<br>(2) 可以在 redis 使用** lua 脚本**完成这个操作<br><code>if redis.call(&#39;get&#39;, KEYS[1]) == ARGV[1] then return redis.call(&#39;del&#39;, KEYS[1]) else return 0 end</code></p><p>该方法不具有原子性，还是会有重复提交的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">String redisToken = stringRedisTemplate.opsForValue().get(OrderConstant.USER_ORDER_TOKEN_PREFIX + memberRespVo.getId());</span><br><span class="line"><span class="keyword">if</span>(orderToken!=<span class="keyword">null</span> &amp;&amp; orderToken.equals(redisToken))&#123;</span><br><span class="line">    <span class="comment">//令牌验证通过</span></span><br><span class="line">    stringRedisTemplate.delete(OrderConstant.USER_ORDER_TOKEN_PREFIX + memberRespVo.getId());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//不通过</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用脚本保证原子性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、验证令牌【令牌的对比和删除必须保证原子性】</span></span><br><span class="line">        <span class="comment">//返回 0令牌失败 - 1删除成功</span></span><br><span class="line">        String script = <span class="string">&quot;if redis.call(&#x27;get&#x27;, KEYS[1]) == ARGV[1] then return redis.call(&#x27;del&#x27;, KEYS[1]) else return 0 end&quot;</span>;</span><br><span class="line">        String orderToken = vo.getOrderToken();</span><br><span class="line">        <span class="comment">//原子验证令牌和删除令牌</span></span><br><span class="line">        Long result = stringRedisTemplate.execute(<span class="keyword">new</span> DefaultRedisScript&lt;Long&gt;(script, Long.class), Arrays.asList(OrderConstant.USER_ORDER_TOKEN_PREFIX + memberRespVo.getId()), orderToken);</span><br><span class="line">        <span class="keyword">if</span> (result == <span class="number">0L</span>) &#123;</span><br><span class="line">            <span class="comment">//令牌验证失败</span></span><br><span class="line">            response.setCode(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> response;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//令牌验证成功</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h3 id="2、各种锁机制"><a href="#2、各种锁机制" class="headerlink" title="2、各种锁机制"></a>2、各种锁机制</h3><h4 id="1、数据库悲观锁"><a href="#1、数据库悲观锁" class="headerlink" title="1、数据库悲观锁"></a>1、数据库悲观锁</h4><p>select * from xxxx where id = 1 for update;<br>悲观锁使用时一般伴随事务一起使用，数据锁定时间可能会很长，需要根据实际情况选用。<br>另外要注意的是，id 字段一定是主键或者唯一索引，不然可能造成锁表的结果，处理起来会<br>非常麻烦。</p><p>加了for update 一旦查询则锁住该条数据，其他修改请求无法成功。</p><h4 id="2、数据库乐观锁"><a href="#2、数据库乐观锁" class="headerlink" title="2、数据库乐观锁"></a>2、数据库乐观锁</h4><p>这种方法适合在更新的场景中，<br>update t_goods set count = count -1 , version = version + 1 where good_id=2 and version = 1<br>根据 version 版本，也就是在操作库存前先获取当前商品的 version 版本号，然后操作的时候<br>带上此 version 号。我们梳理下，我们第一次操作库存时，得到 version 为 1，调用库存服务<br>version 变成了 2；但返回给订单服务出现了问题，订单服务又一次发起调用库存服务，当订<br>单服务传如的 version 还是 1，再执行上面的 sql 语句时，就不会执行；因为 version 已经变<br>为 2 了，where 条件就不成立。这样就保证了不管调用几次，只会真正的处理一次。<br>乐观锁主要使用于处理读多写少的问题</p><h4 id="3、业务层分布式锁"><a href="#3、业务层分布式锁" class="headerlink" title="3、业务层分布式锁"></a>3、业务层分布式锁</h4><p>如果多个机器可能在同一时间同时处理相同的数据，比如多台机器定时任务都拿到了相同数<br>据处理，我们就可以加分布式锁，锁定此数据，处理完成后释放锁。获取到锁的必须先判断<br>这个数据是否被处理过。</p><h3 id="3、各种唯一约束"><a href="#3、各种唯一约束" class="headerlink" title="3、各种唯一约束"></a>3、各种唯一约束</h3><h4 id="1、数据库唯一约束"><a href="#1、数据库唯一约束" class="headerlink" title="1、数据库唯一约束"></a>1、数据库唯一约束</h4><p>插入数据，应该按照唯一索引进行插入，比如订单号，相同的订单就不可能有两条记录插入。<br>我们在数据库层面防止重复。<br>这个机制是利用了数据库的主键唯一约束的特性，解决了在 insert 场景时幂等问题。但主键<br>的要求不是自增的主键，这样就需要业务生成全局唯一的主键。<br>如果是分库分表场景下，路由规则要保证相同请求下，落地在同一个数据库和同一表中，要<br>不然数据库主键约束就不起效果了，因为是不同的数据库和表主键不相关。</p><h4 id="2、redis-set-防重"><a href="#2、redis-set-防重" class="headerlink" title="2、redis set 防重"></a>2、redis set 防重</h4><p>很多数据需要处理，只能被处理一次，比如我们可以计算数据的 MD5 将其放入 redis 的 set，<br>每次处理数据，先看这个 MD5 是否已经存在，存在就不处理。</p><p>百度秒传</p><h3 id="4、防重表"><a href="#4、防重表" class="headerlink" title="4、防重表"></a>4、防重表</h3><p>使用订单号 orderNo 做为去重表的唯一索引，把唯一索引插入去重表，再进行业务操作，且<br>他们在同一个事务中。这个保证了重复请求时，因为去重表有唯一约束，导致请求失败，避<br>免了幂等问题。这里要注意的是，去重表和业务表应该在同一库中，这样就保证了在同一个<br>事务，即使业务操作失败了，也会把去重表的数据回滚。这个很好的保证了数据一致性。<br>之前说的 redis 防重也算</p><h3 id="5、全局请求唯一-id"><a href="#5、全局请求唯一-id" class="headerlink" title="5、全局请求唯一 id"></a>5、全局请求唯一 id</h3><p>调用接口时，生成一个唯一 id，redis 将数据保存到集合中（去重），存在即处理过。</p><p>feign进行a,b两个系统调用可以去重</p><p>可以使用 nginx 设置每一个请求的唯一 id；没法去重<br>proxy_set_header X-Request-Id $request_id;<br>链路追踪</p><h2 id="订单幂等性"><a href="#订单幂等性" class="headerlink" title="订单幂等性"></a>订单幂等性</h2><p>token</p><h3 id="订单确认页创建防重令牌"><a href="#订单确认页创建防重令牌" class="headerlink" title="订单确认页创建防重令牌"></a>订单确认页创建防重令牌</h3><p><img src="https://img-blog.csdnimg.cn/f1d115ce5c924a4ab31e77a4c1cefccb.png" alt="在这里插入图片描述"></p><h1 id="分布式事务"><a href="#分布式事务" class="headerlink" title="分布式事务"></a>分布式事务</h1><p>本地事务在分布式下的问题<br>事务保证：<br>1、订单服务异常，库存锁定不运行，全部回滚， 撤销操作<br>2、库存服务事务自治，锁定失败全部回滚，订单感受到，继续回滚<br>3、库存服务锁定成功了，但是网络原因返回数据途中问题？<br>4、库存服务锁定成功了，库存服务下面的逻辑发生故障，订单回滚了，怎么处理？</p><p>利用消息队列实现最终一致<br>库存服务锁定成功后发给消息队列消息（当前库 存工作单），过段时间自动解锁，解锁时先查询 订单的支付状态。解锁成功修改库存工作单详情 项状态为已解锁<br>1、远程服务假失败：<br>远程服务其实成功了，由于网络故障等没有返回 导致：订单回滚，库存却扣减<br>2、远程服务执行完成，下面的其他方法出现问题<br>导致：已执行的远程请求，肯定不能回滚</p><p>本地事务，在分布式系统，只能控制住自己的回滚，控制不了其他服务的回滚<br>分布式事务： 最大原因。网络问题+分布式机器。</p><h2 id="一、本地事务"><a href="#一、本地事务" class="headerlink" title="一、本地事务"></a>一、本地事务</h2><h3 id="事务的基本性质"><a href="#事务的基本性质" class="headerlink" title="事务的基本性质"></a>事务的基本性质</h3><p>数据库事务的几个特性：原子性(Atomicity )、一致性( Consistency )、隔离性或独立性( Isolation)和持久性(Durabilily)，简称就是 ACID；<br> 原子性：一系列的操作整体不可拆分，要么同时成功，要么同时失败<br> 一致性：数据在事务的前后，业务整体一致。<br>     转账。A:1000；B:1000； 转 200 事务成功; A：800 B：1200<br> 隔离性：事务之间互相隔离。<br> 持久性：一旦事务成功，数据一定会落盘在数据库。</p><p>在以往的单体应用中，我们多个业务操作使用同一条连接操作不同的数据表，一旦有异常，<br>我们可以很容易的整体回滚；</p><p>Business：我们具体的业务代码<br>Storage：库存业务代码；扣库存<br>Order：订单业务代码；保存订单<br>Account：账号业务代码；减账户余额<br>比如买东西业务，扣库存，下订单，账户扣款，是一个整体；必须同时成功或者失败<br>一个事务开始，代表以下的所有操作都在同一个连接里面；</p><h3 id="2、事务的隔离级别"><a href="#2、事务的隔离级别" class="headerlink" title="2、事务的隔离级别"></a>2、事务的隔离级别</h3><p> READ UNCOMMITTED（读未提交）<br>该隔离级别的事务会读到其它未提交事务的数据，此现象也称之为脏读。<br> READ COMMITTED（读提交）<br>一个事务可以读取另一个已提交的事务，多次读取会造成不一样的结果，此现象称为不可重<br>复读问题，Oracle 和 SQL Server 的默认隔离级别。<br> REPEATABLE READ（可重复读）<br>该隔离级别是 MySQL 默认的隔离级别，在同一个事务里，select 的结果是事务开始时时间<br>点的状态，因此，同样的 select 操作读到的结果会是一致的，但是，会有幻读现象。MySQL<br>的 InnoDB 引擎可以通过 next-key locks 机制（参考下文”行锁的算法”一节）来避免幻读。<br> SERIALIZABLE（序列化）<br>在该隔离级别下事务都是串行顺序执行的，MySQL 数据库的 InnoDB 引擎会给读操作隐式<br>加一把读共享锁，从而避免了脏读、不可重读复读和幻读问题。</p><h3 id="3、事务的传播行为"><a href="#3、事务的传播行为" class="headerlink" title="3、事务的传播行为"></a>3、事务的传播行为</h3><p>1、PROPAGATION_REQUIRED：如果当前没有事务，就创建一个新事务，如果当前存在事务，<br>就加入该事务，该设置是最常用的设置。<br>2、PROPAGATION_SUPPORTS：支持当前事务，如果当前存在事务，就加入该事务，如果当<br>前不存在事务，就以非事务执行。<br>3、PROPAGATION_MANDATORY：支持当前事务，如果当前存在事务，就加入该事务，如果<br>当前不存在事务，就抛出异常。<br>4、PROPAGATION_REQUIRES_NEW：创建新事务，无论当前存不存在事务，都创建新事务。<br>5、PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当<br>前事务挂起。<br>6、PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。<br>7、PROPAGATION_NESTED：如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，<br>则执行与 PROPAGATION_REQUIRED 类似的操作。</p><h3 id="4、SpringBoot-事务关键点"><a href="#4、SpringBoot-事务关键点" class="headerlink" title="4、SpringBoot 事务关键点"></a>4、SpringBoot 事务关键点</h3><p>1、事务的自动配置<br>TransactionAutoConfiguration</p><p>2、事务的坑<br>在同一个类里面，编写两个方法，内部调用的时候，会导致事务设置失效。原因是没有用到<br>代理对象的缘故。<br>解决：<br>0）、导入 spring-boot-starter-aop<br>1）、@EnableTransactionManagement(proxyTargetClass = true)<br>2）、@EnableAspectJAutoProxy(exposeProxy=true)<br>3）、AopContext.currentProxy() 调用方法</p><p> 本地事务失效问题<br> 同一个对象内事务方法互调默认失效，原因 绕过了代理对象，事务使用代理对象来控制的<br> 解决：使用代理对象来调用事务方法<br> 1）、引入aop-starter;spring-boot-starter-aop；引入了aspectj<br> 2）、@EnableAspectJAutoProxy(exposeProxy = true)；开启 aspectj 动态代理功能。以后所有的动态代理都是aspectj创建的（即使没有接口也可以创建动态代理）。<br> 对外暴露代理对象<br> 3）、本类互调用调用对象<br> OrderServiceImpl orderService = (OrderServiceImpl) AopContext.currentProxy();<br> orderService.b();<br> orderService.c();</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">//同一个对象内事务方法互调默认失效，原因 绕过了代理对象</span></span><br><span class="line">    <span class="comment">//事务使用代理对象来控制的</span></span><br><span class="line">    <span class="meta">@Transactional(timeout = 30)</span> <span class="comment">//a事务的所有设置就传播到了和他公用一个事务的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//b，c做任何设置都没用。都是和a公用一个事务</span></span><br><span class="line"><span class="comment">//        this.b(); 没用</span></span><br><span class="line"><span class="comment">//        this.c(); 没用</span></span><br><span class="line">        OrderServiceImpl orderService = (OrderServiceImpl) AopContext.currentProxy();</span><br><span class="line">        orderService.b();</span><br><span class="line">        orderService.c();</span><br><span class="line"><span class="comment">//        bService.b(); //a事务</span></span><br><span class="line"><span class="comment">//        cService.c(); //新事务(不回滚)</span></span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">10</span> / <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED, timeout = 2)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//7s</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW, timeout = 20)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">c</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="二、分布式事务"><a href="#二、分布式事务" class="headerlink" title="二、分布式事务"></a>二、分布式事务</h2><p>1、为什么有分布式事务<br>分布式系统经常出现的异常<br>机器宕机、网络异常、消息丢失、消息乱序、数据错误、不可靠的 TCP、存储数据丢失…<br>分布式事务是企业集成中的一个技术难点，也是每一个分布式系统架构中都会涉及到的一个<br>东西，特别是在微服务架构中，几乎可以说是无法避免。</p><h3 id="2、CAP-定理与-BASE-理论"><a href="#2、CAP-定理与-BASE-理论" class="headerlink" title="2、CAP 定理与 BASE 理论"></a>2、CAP 定理与 BASE 理论</h3><h4 id="1、CAP-定理"><a href="#1、CAP-定理" class="headerlink" title="1、CAP 定理"></a>1、CAP 定理</h4><p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中<br> 一致性（Consistency）：<br> 在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访<br>问同一份最新的数据副本）<br> 可用性（Availability）<br> 在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据<br>更新具备高可用性）<br> 分区容错性（Partition tolerance）<br> 大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。<br>分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务<br>器放在美国，这就是两个区，它们之间可能无法通信。<br>CAP 原则指的是，这三个要素最多只能同时实现两点，不可能三者兼顾。</p><p>一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们，<br>剩下的 C 和 A 无法同时做到。<br>分布式系统中实现一致性的 raft 算法、paxos<br>raft算法具体实现动画版：<a href="http://thesecretlivesofdata.com/raft/">http://thesecretlivesofdata.com/raft/</a></p><p>2、面临的问题<br>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所<br>以节点故障、网络故障是常态，而且要保证服务可用性达到 99.99999%（N 个 9），即保证<br>P 和 A，舍弃 C。</p><h4 id="3、BASE-理论"><a href="#3、BASE-理论" class="headerlink" title="3、BASE 理论"></a>3、BASE 理论</h4><p>是对 CAP 理论的延伸，思想是即使无法做到强一致性（CAP 的一致性就是强一致性），但可<br>以采用适当的采取弱一致性，即最终一致性。<br>BASE 是指<br> 基本可用（Basically Available）<br> 基本可用是指分布式系统在出现故障的时候，允许损失部分可用性（例如响应时间、<br>功能上的可用性），允许损失部分可用性。需要注意的是，基本可用绝不等价于系<br>统不可用。<br> 响应时间上的损失：正常情况下搜索引擎需要在 0.5 秒之内返回给用户相应的<br>查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询<br>结果的响应时间增加到了 1~2 秒。<br> 功能上的损失：购物网站在购物高峰（如双十一）时，为了保护系统的稳定性，<br>部分消费者可能会被引导到一个降级页面。<br> 软状态（ Soft State）<br> 软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布<br>式存储中一般一份数据会有多个副本，允许不同副本同步的延时就是软状态的体<br>现。mysql replication 的异步复制也是一种体现。<br> 最终一致性（ Eventual Consistency）<br> 最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状<br>态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</p><h4 id="4、强一致性、弱一致性、最终一致性"><a href="#4、强一致性、弱一致性、最终一致性" class="headerlink" title="4、强一致性、弱一致性、最终一致性"></a>4、强一致性、弱一致性、最终一致性</h4><p>从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了<br>不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是强一<br>致性。如果能容忍后续的部分或者全部访问不到，则是弱一致性。如果经过一段时间后要求<br>能访问到更新后的数据，则是最终一致性</p><h3 id="3、分布式事务几种方案"><a href="#3、分布式事务几种方案" class="headerlink" title="3、分布式事务几种方案"></a>3、分布式事务几种方案</h3><h4 id="1）、2PC-模式"><a href="#1）、2PC-模式" class="headerlink" title="1）、2PC 模式"></a>1）、2PC 模式</h4><p>数据库支持的 2PC【2 phase commit 二阶提交】，又叫做 XA Transactions。<br>MySQL 从 5.5 版本开始支持，SQL Server 2005 开始支持，Oracle 7 开始支持。<br>其中，XA 是一个两阶段提交协议，该协议分为以下两个阶段：<br>第一阶段：事务协调器要求每个涉及到事务的数据库预提交(precommit)此操作，并反映是<br>否可以提交. 第二阶段：事务协调器要求每个数据库提交数据。<br>其中，如果有任何一个数据库否决此次提交，那么所有数据库都会被要求回滚它们在此事务<br>中的那部分信息。<br><img src="https://img-blog.csdnimg.cn/66866e50d7d142ecbd56c1415c957ee7.png" alt="在这里插入图片描述"><br> XA 协议比较简单，而且一旦商业数据库实现了 XA 协议，使用分布式事务的成本也比较<br>低。<br> XA 性能不理想，特别是在交易下单链路，往往并发量很高，XA 无法满足高并发场景<br> XA 目前在商业数据库支持的比较理想，在 mysql 数据库中支持的不太理想，mysql 的<br>XA 实现，没有记录 prepare 阶段日志，主备切换回导致主库与备库数据不一致。<br> 许多 nosql 也没有支持 XA，这让 XA 的应用场景变得非常狭隘。<br> 也有 3PC，引入了超时机制（无论协调者还是参与者，在向对方发送请求后，若长时间<br>未收到回应则做出相应处理）</p><h4 id="2）、柔性事务-TCC-事务补偿型方案"><a href="#2）、柔性事务-TCC-事务补偿型方案" class="headerlink" title="2）、柔性事务-TCC 事务补偿型方案"></a>2）、柔性事务-TCC 事务补偿型方案</h4><p>刚性事务：遵循 ACID 原则，强一致性。<br>柔性事务：遵循 BASE 理论，最终一致性；<br>与刚性事务不同，柔性事务允许一定时间内，不同节点的数据不一致，但要求最终一致。</p><p><img src="https://img-blog.csdnimg.cn/6892dc16c78444838b94ebbe4a36b904.png" alt="在这里插入图片描述"><br>一阶段 prepare 行为：调用 自定义 的 prepare 逻辑。<br>二阶段 commit 行为：调用 自定义 的 commit 逻辑。<br>二阶段 rollback 行为：调用 自定义 的 rollback 逻辑。<br>所谓 TCC 模式，是指支持把 自定义 的分支事务纳入到全局事务的管理中。</p><p><img src="https://img-blog.csdnimg.cn/6552aff704404afab42546ea880cad2c.png" alt="在这里插入图片描述"></p><h4 id="3）、柔性事务-最大努力通知型方案"><a href="#3）、柔性事务-最大努力通知型方案" class="headerlink" title="3）、柔性事务-最大努力通知型方案"></a>3）、柔性事务-最大努力通知型方案</h4><p>按规律进行通知，不保证数据一定能通知成功，但会提供可查询操作接口进行核对。这种<br>方案主要用在与第三方系统通讯时，比如：调用微信或支付宝支付后的支付结果通知。这种<br>方案也是结合 MQ 进行实现，例如：通过 MQ 发送 http 请求，设置最大通知次数。达到通<br>知次数后即不再通知。<br>案例：银行通知、商户通知等（各大交易业务平台间的商户通知：多次通知、查询校对、对<br>账文件），支付宝的支付成功异步回调</p><h4 id="4）、柔性事务-可靠消息-最终一致性方案（异步确保型）"><a href="#4）、柔性事务-可靠消息-最终一致性方案（异步确保型）" class="headerlink" title="4）、柔性事务-可靠消息+最终一致性方案（异步确保型）"></a>4）、柔性事务-可靠消息+最终一致性方案（异步确保型）</h4><p>实现：业务处理服务在业务事务提交之前，向实时消息服务请求发送消息，实时消息服务只<br>记录消息数据，而不是真正的发送。业务处理服务在业务事务提交之后，向实时消息服务确<br>认发送。只有在得到确认发送指令后，实时消息服务才会真正发送。<br><strong>防止消息丢失：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1、做好消息确认机制（pulisher，consumer【手动 ack】）</span></span><br><span class="line"><span class="comment">* 2、每一个发送的消息都在数据库做好记录。定期将失败的消息再次发送一</span></span><br><span class="line"><span class="comment">遍</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `mq_message` (</span><br><span class="line">`message_id` <span class="type">char</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>, `content` text, `to_exchane` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, `routing_key` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, `class_type` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, `message_status` <span class="type">int</span>(<span class="number">1</span>) <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;0-新建 1-已发送 2-错误抵达 3-已抵达&#x27;</span>, `create_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, `update_time` datetime <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>, <span class="keyword">PRIMARY</span> KEY (`message_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4</span><br></pre></td></tr></table></figure><h1 id="seata控制事务"><a href="#seata控制事务" class="headerlink" title="seata控制事务"></a>seata控制事务</h1><p><a href="http://seata.io/zh-cn/docs/user/quickstart.html">seata文档</a><br>TC (Transaction Coordinator) - 事务协调者<br>维护全局和分支事务的状态，驱动全局事务提交或回滚。</p><p>TM (Transaction Manager) - 事务管理器<br>定义全局事务的范围：开始全局事务、提交或回滚全局事务。</p><p>RM (Resource Manager) - 资源管理器<br>管理分支事务处理的资源，与TC交谈以注册分支事务和报告分支事务的状态，并驱动分支事务提交或回滚。<br><img src="https://img-blog.csdnimg.cn/4a0d8e7c84ce46ee9f9390917bfe6ae7.png" alt="在这里插入图片描述"></p><h2 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h2><p>TM 向 TC 申请开启一个全局事务，全局事务创建成功并生成一个全局唯一的 XID；<br>XID 在微服务调用链路的上下文中传播；<br>RM 向 TC 注册分支事务，将其纳入 XID 对应全局事务的管辖；<br>TM 向 TC 发起针对 XID 的全局提交或回滚决议；<br>TC 调度 XID 下管辖的全部分支事务完成提交或回滚请求。</p><p>TM 开启分布式事务（TM 向 TC 注册全局事务记录）；<br>按业务场景，编排数据库、服务等事务内资源（RM 向 TC 汇报资源准备状态 ）；<br>TM 结束分布式事务，事务一阶段结束（TM 通知 TC 提交/回滚分布式事务）；<br>TC 汇总事务信息，决定分布式事务是提交还是回滚；<br>TC 通知所有 RM 提交/回滚 资源，事务二阶段结束。​</p><h2 id="创建-UNDO-LOG-表"><a href="#创建-UNDO-LOG-表" class="headerlink" title="创建 UNDO_LOG 表"></a>创建 UNDO_LOG 表</h2><p>SEATA AT 模式需要 UNDO_LOG 表（自动回滚）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `undo_log` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `branch_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `xid` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `context` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `rollback_info` longblob <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_status` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_created` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `log_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `ext` <span class="type">varchar</span>(<span class="number">100</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `ux_undo_log` (`xid`,`branch_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br></pre></td></tr></table></figure><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><p> 1）、每一个微服务先必须创建 undo_log；<br> 2）、安装事务协调器；seata-server： <a href="https://github.com/seata/seata/releases">https://github.com/seata/seata/releases</a><br> 3）、整合<br> 1、导入依赖 spring-cloud-starter-alibaba-seata  seata-all-1.5.2<br> 2、解压并启动seata-server；<br> registry.conf: 注册中心配置； 修改registry type=nacos<br> file.conf：<br> 3、所有想要用到分布式事务的微服务使用seata DataSourceProxy代理自己的数据源<br> 4、每个微服务，都必须导入<br>    registry.conf  file.conf<br>    vgroup_mapping.{application.name}-fescar-service-group = “default”<br> 5、启动测试分布式事务<br> 6、给分布式大事务的入口标注@GlobalTransactional<br> 7、每一个远程的小事务用 @Transactional</p><h2 id="seata-1-5-2"><a href="#seata-1-5-2" class="headerlink" title="seata 1.5.2"></a>seata 1.5.2</h2><p>之前学springcloud用的旧版本，跟着老师一步一步做就行。<br>现在用新版本费了不少功夫</p><p>首先要区分服务端和客户端，服务端的配置一定要在客户端里再写一遍，比如nacos的group，namespace等</p><p>其实加了不少东西，我也不知道哪些是冗余的，哪些是必要的。<br><img src="https://img-blog.csdnimg.cn/22200dbc45e04dde9c6cfc93acb81e24.png" alt="在这里插入图片描述"></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">seata.tx-service-group</span>=<span class="string">gulimall-order_tx_group</span></span><br><span class="line"><span class="meta">seata.service.vgroup-mapping.gulimall-order_tx_group</span>=<span class="string">default</span></span><br><span class="line"><span class="meta">seata.registry.type</span>=<span class="string">nacos</span></span><br><span class="line"><span class="meta">seata.registry.nacos.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">seata.registry.nacos.namespace</span>=<span class="string">cccb88d9-c317-41ed-accb-683a4d5b315c</span></span><br><span class="line"><span class="meta">seata.registry.nacos.application</span>=<span class="string">seata-server</span></span><br><span class="line"><span class="meta">seata.registry.nacos.group</span>=<span class="string">SEATA_GROUP</span></span><br><span class="line"></span><br><span class="line"><span class="meta">seata.config.type</span>=<span class="string">nacos</span></span><br><span class="line"><span class="meta">seata.config.nacos.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="meta">seata.config.nacos.group</span>=<span class="string">SEATA_GROUP</span></span><br><span class="line"><span class="comment">#seata.config.nacos.data-id=</span></span><br><span class="line"><span class="meta">seata.config.nacos.namespace</span>=<span class="string">cccb88d9-c317-41ed-accb-683a4d5b315c</span></span><br></pre></td></tr></table></figure><p>在订单中当ware服务已经完成，但是遇到了10/0，事务回滚。<br>ware是远程的服务，也事务回滚了</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">06.308</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-1</span>] c.v.g.ware.dao.WareSkuDao.getSkuStock    : ==&gt;  Preparing: SELECT SUM(stock - IFNULL(stock_locked,<span class="number">0</span>)) FROM `wms_ware_sku` WHERE sku_id=? </span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">06.337</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-1</span>] c.v.g.ware.dao.WareSkuDao.getSkuStock    : ==&gt; Parameters: <span class="number">2</span>(Long)</span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">06.357</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-1</span>] c.v.g.ware.dao.WareSkuDao.getSkuStock    : &lt;==      Total: <span class="number">1</span></span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">07.952</span>  INFO <span class="number">38384</span> --- [ent-executor<span class="number">-29</span>] com.alibaba.nacos.common.remote.client   : [<span class="number">54</span>a51595<span class="number">-14</span>f1<span class="number">-479</span>c-b171<span class="number">-4</span>bb125fbf941] Receive server push request, request = NotifySubscriberRequest, requestId = <span class="number">97</span></span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">07.952</span>  INFO <span class="number">38384</span> --- [ent-executor<span class="number">-29</span>] com.alibaba.nacos.common.remote.client   : [<span class="number">54</span>a51595<span class="number">-14</span>f1<span class="number">-479</span>c-b171<span class="number">-4</span>bb125fbf941] Ack server push request, request = NotifySubscriberRequest, requestId = <span class="number">97</span></span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.400</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-6</span>] c.v.g.w.d.W.listWareIdHasSkuStock        : ==&gt;  Preparing: SELECT ware_id FROM `wms_ware_sku` WHERE sku_id=? AND stock-stock_locked&gt;<span class="number">0</span> </span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.467</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-6</span>] c.v.g.w.d.W.listWareIdHasSkuStock        : ==&gt; Parameters: <span class="number">2</span>(Long)</span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.471</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-6</span>] c.v.g.w.d.W.listWareIdHasSkuStock        : &lt;==      Total: <span class="number">2</span></span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.473</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-6</span>] c.v.g.ware.dao.WareSkuDao.lockSkuStock   : ==&gt;  Preparing: UPDATE `wms_ware_sku` SET stock_locked = stock_locked+? WHERE sku_id=? AND ware_id=? AND stock-stock_locked&gt;=? </span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.489</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-6</span>] c.v.g.ware.dao.WareSkuDao.lockSkuStock   : ==&gt; Parameters: <span class="number">3</span>(Integer), <span class="number">2</span>(Long), <span class="number">1</span>(Long), <span class="number">3</span>(Integer)</span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.612</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-6</span>] c.v.g.ware.dao.WareSkuDao.lockSkuStock   : &lt;==    Updates: <span class="number">1</span></span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.744</span>  INFO <span class="number">38384</span> --- [h_RMROLE_1_1_32] i.s.c.r.p.c.RmBranchRollbackProcessor    : rm handle branch rollback process:xid=<span class="number">192.168</span><span class="number">.10</span><span class="number">.1</span>:<span class="number">8091</span>:<span class="number">9124618694730084355</span>,branchId=<span class="number">9124618694730084356</span>,branchType=AT,resourceId=jdbc:mysql:<span class="comment">//192.168.10.102:3306/gulimall_wms,applicationData=&#123;&quot;autoCommit&quot;:false&#125;</span></span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.746</span>  INFO <span class="number">38384</span> --- [h_RMROLE_1_1_32] io.seata.rm.AbstractRMHandler            : Branch Rollbacking: <span class="number">192.168</span><span class="number">.10</span><span class="number">.1</span>:<span class="number">8091</span>:<span class="number">9124618694730084355</span> <span class="number">9124618694730084356</span> jdbc:mysql:<span class="comment">//192.168.10.102:3306/gulimall_wms</span></span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.818</span>  INFO <span class="number">38384</span> --- [h_RMROLE_1_1_32] i.s.r.d.undo.AbstractUndoLogManager      : xid <span class="number">192.168</span><span class="number">.10</span><span class="number">.1</span>:<span class="number">8091</span>:<span class="number">9124618694730084355</span> branch <span class="number">9124618694730084356</span>, undo_log deleted with GlobalFinished</span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.821</span>  INFO <span class="number">38384</span> --- [h_RMROLE_1_1_32] io.seata.rm.AbstractRMHandler            : Branch Rollbacked result: PhaseTwo_Rollbacked</span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.896</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-3</span>] c.v.g.ware.dao.WareSkuDao.getSkuStock    : ==&gt;  Preparing: SELECT SUM(stock - IFNULL(stock_locked,<span class="number">0</span>)) FROM `wms_ware_sku` WHERE sku_id=? </span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.897</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-3</span>] c.v.g.ware.dao.WareSkuDao.getSkuStock    : ==&gt; Parameters: <span class="number">2</span>(Long)</span><br><span class="line"><span class="number">2022</span><span class="number">-11</span><span class="number">-09</span> <span class="number">18</span>:<span class="number">48</span>:<span class="number">09.899</span> DEBUG <span class="number">38384</span> --- [io<span class="number">-11000</span>-exec<span class="number">-3</span>] c.v.g.ware.dao.WareSkuDao.getSkuStock    : &lt;==      Total: <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="AT-模式"><a href="#AT-模式" class="headerlink" title="AT 模式"></a>AT 模式</h2><p>目前使用的是AT模式，类似两阶段提交协议。</p><p>两阶段提交协议的演变：<br>一阶段：<br>业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。（两阶段协议只准备，不提交，seata提交）<br>二阶段：<br>提交异步化，非常快速地完成。<br>回滚通过一阶段的回滚日志进行反向补偿。</p><p>AT模式不适合高并发，适合一般并发，不适合下单场景。</p><h1 id="订单流程"><a href="#订单流程" class="headerlink" title="订单流程"></a>订单流程</h1><p><img src="https://img-blog.csdnimg.cn/e2145ab265eb497799679a327665cdea.jpeg" alt="在这里插入图片描述"></p><h1 id="利用延迟队列的分布式事务"><a href="#利用延迟队列的分布式事务" class="headerlink" title="利用延迟队列的分布式事务"></a>利用延迟队列的分布式事务</h1><p>简易版<br><img src="https://img-blog.csdnimg.cn/2d6731b62149448ca4f901b4a31354b1.png" alt="在这里插入图片描述"></p><p>交换机绑定多个队列<br><img src="https://img-blog.csdnimg.cn/ca7fd4c5490746e7b8d9aa87542659c5.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">orderDelayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;String, Object&gt; arguments = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * x-dead-letter-exchange: order-event-exchange</span></span><br><span class="line"><span class="comment">     * x-dead-letter-routing-key: order.release.order</span></span><br><span class="line"><span class="comment">     * x-message-ttl: 60000</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    arguments.put(<span class="string">&quot;x-dead-letter-exchange&quot;</span>, <span class="string">&quot;order-event-exchange&quot;</span>);</span><br><span class="line">    arguments.put(<span class="string">&quot;x-dead-letter-routing-key&quot;</span>, <span class="string">&quot;order.release.order&quot;</span>);</span><br><span class="line">    arguments.put(<span class="string">&quot;x-message-ttl&quot;</span>, <span class="number">60000L</span>);</span><br><span class="line">    <span class="comment">//String name, boolean durable, boolean exclusive, boolean autoDelete, Map&lt;String, Object&gt; arguments</span></span><br><span class="line">    Queue queue = <span class="keyword">new</span> Queue(<span class="string">&quot;order.delay.queue&quot;</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, arguments);</span><br><span class="line">    <span class="keyword">return</span> queue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>库存解锁的场景<br>1）、下订单成功，订单过期没有支付被系统自动取消、被用户手动取消。都要解锁库存<br>2）、下订单成功，库存锁定成功，接下来的业务调用失败，导致订单回滚。之前锁定的库存就要自动解锁。</p><p>解锁<br>1、查询数据库关于这个订单的锁定库存信息。<br>  有：证明库存锁定成功了<br>    解锁：订单情况。<br>          1、没有这个订单。必须解锁<br>          2、有这个订单。不是解锁库存。<br>                订单状态： 已取消：解锁库存<br>                          没取消：不能解锁<br>  没有：库存锁定失败了，库存回滚了。这种情况无需解锁</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Service</span></span><br><span class="line"><span class="meta">@RabbitListener(queues = &quot;stock.release.stock.queue&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StockReleaseListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    WareSkuService wareSkuService;</span><br><span class="line">    <span class="comment">//库存自动解锁</span></span><br><span class="line">    <span class="meta">@RabbitHandler</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleStockLockedRelease</span><span class="params">(StockLockedTo to, Message message, Channel channel)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收到解锁库存的消息...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            wareSkuService.unlockStock(to);</span><br><span class="line">            channel.basicAck(message.getMessageProperties().getDeliveryTag(),<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            channel.basicReject(message.getMessageProperties().getDeliveryTag(),<span class="keyword">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/119a39ac50954fb2909649eb95c8fef7.png" alt="在这里插入图片描述"><br>订单队列卡顿后，库存先查，发现是新建状态，不解锁。后来订单被取消，则库存无法解锁。<br>订单失效后主动发消息让库存解锁。</p><h1 id="如何保证消息可靠性"><a href="#如何保证消息可靠性" class="headerlink" title="如何保证消息可靠性"></a>如何保证消息可靠性</h1><h2 id="消息丢失"><a href="#消息丢失" class="headerlink" title="消息丢失"></a>消息丢失</h2><p>1、消息丢失</p><ul><li>消息发送出去，由于网络问题没有抵达服务器<ul><li>做好容错方法（try-catch），发送消息可能会网络失败，失败后要有重试机 制，可记录到数据库，采用定期扫描重发的方式</li><li>做好日志记录，每个消息状态是否都被服务器收到都应该记录</li><li>做好定期重发，如果消息没有发送成功，定期去数据库扫描未成功的消息进 行重发</li></ul></li><li>消息抵达Broker，Broker要将消息写入磁盘（持久化）才算成功。此时Broker尚未持久化完成，宕机。<ul><li>publisher也必须加入确认回调机制，确认成功的消息，修改数据库消息状态。</li></ul></li><li>自动ACK的状态下。消费者收到消息，但没来得及消息然后宕机<br>一定开启手动ACK，消费成功才移除，失败或者没来得及处理就noAck并重 新入队</li></ul><p>定制RabbitTemplate<br>1、服务器收到消息就回调<br>    1、spring.rabbitmq.publisher-confirms=true<br>    2、设置确认回调ConfirmCallback<br>2、消息正确抵达队列进行回调<br>    1、 spring.rabbitmq.publisher-returns=true<br>    spring.rabbitmq.template.mandatory=true<br>    2、设置确认回调ReturnCallback</p><p>3、消费端确认（保证每个消息被正确消费，此时才可以broker删除这个消息）。<br>    spring.rabbitmq.listener.simple.acknowledge-mode=manual 手动签收<br>    1、默认是自动确认的，只要消息接收到，客户端会自动确认，服务端就会移除这个消息<br>    问题：<br>        我们收到很多消息，自动回复给服务器ack，只有一个消息处理成功，宕机了。就会发生消息丢失；<br>        消费者手动确认模式。只要我们没有明确告诉MQ，货物被签收。没有Ack，<br>        消息就一直是unacked状态。即使Consumer宕机。消息不会丢失，会重新变为Ready，下一次有新的Consumer连接进来就发给他<br>    2、如何签收:<br>        channel.basicAck(deliveryTag,false);签收；业务成功完成就应该签收<br>        channel.basicNack(deliveryTag,false,true);拒签；业务失败，拒签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//    @PostConstruct //MyRabbitConfig对象创建完成以后，执行这个方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initRabbitTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//设置确认回调</span></span><br><span class="line">        rabbitTemplate.setConfirmCallback(<span class="keyword">new</span> RabbitTemplate.ConfirmCallback() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             *</span></span><br><span class="line"><span class="comment">             * 1、只要消息抵达Broker就ack=true</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> correlationData 当前消息的唯一关联数据（这个是消息的唯一id）</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> ack  消息是否成功收到</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> cause 失败的原因</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">confirm</span><span class="params">(CorrelationData correlationData, <span class="keyword">boolean</span> ack, String cause)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * 1、做好消息确认机制（pulisher，consumer【手动ack】）</span></span><br><span class="line"><span class="comment">                 * 2、每一个发送的消息都在数据库做好记录。定期将失败的消息再次发送一遍</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">//服务器收到了；</span></span><br><span class="line">                <span class="comment">//修改消息的状态</span></span><br><span class="line">                System.out.println(<span class="string">&quot;confirm...correlationData[&quot;</span>+correlationData+<span class="string">&quot;]==&gt;ack[&quot;</span>+ack+<span class="string">&quot;]==&gt;cause[&quot;</span>+cause+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置消息抵达队列的确认回调</span></span><br><span class="line">        rabbitTemplate.setReturnCallback(<span class="keyword">new</span> RabbitTemplate.ReturnCallback() &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * 只要消息没有投递给指定的队列，就触发这个失败回调</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> message   投递失败的消息详细信息</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyCode 回复的状态码</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> replyText 回复的文本内容</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> exchange  当时这个消息发给哪个交换机</span></span><br><span class="line"><span class="comment">             * <span class="doctag">@param</span> routingKey 当时这个消息用哪个路由键</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">returnedMessage</span><span class="params">(Message message, <span class="keyword">int</span> replyCode, String replyText, String exchange, String routingKey)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//报错误了。修改数据库当前消息的状态-&gt;错误。</span></span><br><span class="line">                System.out.println(<span class="string">&quot;Fail Message[&quot;</span>+message+<span class="string">&quot;]==&gt;replyCode[&quot;</span>+replyCode+<span class="string">&quot;]==&gt;replyText[&quot;</span>+replyText+<span class="string">&quot;]===&gt;exchange[&quot;</span>+exchange+<span class="string">&quot;]===&gt;routingKey[&quot;</span>+routingKey+<span class="string">&quot;]&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="消息重复"><a href="#消息重复" class="headerlink" title="消息重复"></a>消息重复</h2><ul><li>消息消费成功，事务已经提交，ack时，机器宕机。导致没有ack成功，Broker的消息 重新由unack变为ready，并发送给其他消费者</li><li>消息消费失败，由于重试机制，自动又将消息发送出去</li><li>成功消费，ack时宕机，消息由unack变为ready，Broker又重新发送<ul><li>消费者的业务消费接口应该设计为幂等性的。比如扣库存有 工作单的状态标志</li><li>使用防重表（redis/mysql），发送消息每一个都有业务的唯 一标识，处理过就不用处理</li><li>rabbitMQ的每一个消息都有redelivered字段，可以获取是否 是被重新投递过来的，而不是第一次投递过来的</li></ul></li></ul><h2 id="消息积压"><a href="#消息积压" class="headerlink" title="消息积压"></a>消息积压</h2><ul><li>消费者宕机积压</li><li>消费者消费能力不足积压</li><li>发送者发送流量太大<ul><li>上线更多的消费者，进行正常消费</li><li>上线专门的队列消费服务，将消息先批量取出来，记录数据库，离线慢慢处理</li></ul></li></ul><h1 id="支付"><a href="#支付" class="headerlink" title="支付"></a>支付</h1><h2 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h2><h3 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h3><p>不安全<br>DES、3DES（TripleDES）、AES、RC2、RC4、RC5和Blowfish等<br>加密解密使用同一把钥匙<br><img src="https://img-blog.csdnimg.cn/721c4e6624cd4f19b0818107f7b9b152.png" alt="在这里插入图片描述"></p><h3 id="非对称加密"><a href="#非对称加密" class="headerlink" title="非对称加密"></a>非对称加密</h3><p><img src="https://img-blog.csdnimg.cn/088dd9bc6e1f4d939729405f0b579445.png" alt="在这里插入图片描述"><br>RSA、Elgamal等<br>加密解密使用不同钥匙</p><h2 id="公钥私钥"><a href="#公钥私钥" class="headerlink" title="公钥私钥"></a>公钥私钥</h2><p>公钥和私钥是一个相对概念<br>它们的公私性是相对于生成者来说的。<br>一对密钥生成后，保存在生成者手里的就是私钥，<br>生成者发布出去大家用的就是公钥</p><h2 id="加密和数字签名"><a href="#加密和数字签名" class="headerlink" title="加密和数字签名"></a>加密和数字签名</h2><ul><li>加密是指：<br> 我们使用一对公私钥中的一个密钥来对数据进行加密，而使用另一个密钥来进行解密的技术。<br> 公钥和私钥都可以用来加密，也都可以用来解密。<br> 但这个加解密必须是一对密钥之间的互相加解密，否则不能成功。<br> 加密的目的是：<br> 为了确保数据传输过程中的不可读性，就是不想让别人看到。</li><li>签名：<br> 给我们将要发送的数据，做上一个唯一签名（类似于指纹）<br> 用来互相验证接收方和发送方的身份；<br> 在验证身份的基础上再验证一下传递的数据是否被篡改过。因此使用数字签名可以用来达到数据的明文传输。</li><li>验签<br> 支付宝为了验证请求的数据是否商户本人发的，<br> 商户为了验证响应的数据是否支付宝发的</li></ul><p><img src="https://img-blog.csdnimg.cn/08ce40f8df5d4833bc85a57e08ea9067.png" alt="在这里插入图片描述"></p><h2 id="内网穿透"><a href="#内网穿透" class="headerlink" title="内网穿透"></a>内网穿透</h2><p><img src="https://img-blog.csdnimg.cn/b14630d79f194d5098e3dcecef0332c6.png" alt="在这里插入图片描述"></p><p>内网穿透功能可以允许我们使用外网的网址来访问主机；<br>正常的外网需要访问我们项目的流程是：<br>1、买服务器并且有公网固定 IP<br>2、买域名映射到服务器的 IP<br>3、域名需要进行备案和审核</p><p>2、使用场景<br>1、开发测试（微信、支付宝）<br>2、智慧互联<br>3、远程控制<br>4、私有云</p><p>3、内网穿透的几个常用软件<br>1、natapp：<a href="https://natapp.cn/">https://natapp.cn/</a> 优惠码：022B93FD（9 折）[仅限第一次使用]<br>2、续断：<a href="http://www.zhexi.tech/">www.zhexi.tech</a> 优惠码：SBQMEA（95 折）[仅限第一次使用]<br>3、花生壳：<a href="https://www.oray.com/">https://www.oray.com/</a></p><p><img src="https://img-blog.csdnimg.cn/f192c68fbd53409b80c85217033a3e0b.png" alt="在这里插入图片描述"><br>因为nginx转发会丢失Host头，nginx配置已带上Host头，但是外网穿透的Host不是我们需要的。<br>因此手动设置精确匹配。<br><img src="https://img-blog.csdnimg.cn/2081e1b9ccc04e44a711fec2a2981656.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/ebfaab0f4b804989a7c178a2ac24d404.png" alt="在这里插入图片描述"><br>cat access.log|grep ‘payed’<br>直接到静态页面找了，并且带的是自己的主机名</p><h2 id="收单"><a href="#收单" class="headerlink" title="收单"></a>收单</h2><p>1、订单在支付页，不支付，一直刷新，订单过期了才支付，订单状态改为已支付了，但是库 存解锁了。<br>    使用支付宝自动收单功能解决。只要一段时间不支付，就不能支付了。<br>2、由于时延等问题。订单解锁完成，正在解锁库存的时候，异步通知才到<br>    订单解锁，手动调用收单<br>3、网络阻塞问题，订单支付成功的异步通知一直不到达<br>    查询订单列表时，ajax获取当前未支付的订单状态，查询订单状态时，再获取一下支付宝 此订单的状态<br>4、其他各种问题<br>    每天晚上闲时下载支付宝对账单，一一进行对账</p><h1 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h1><p>Quartz与springboot有一些不同</p><h2 id="cron-表达式"><a href="#cron-表达式" class="headerlink" title="cron 表达式"></a>cron 表达式</h2><p>语法：秒 分 时 日 月 周 年（Spring 不支持）<br><img src="https://img-blog.csdnimg.cn/bdaf349df2864213875273e7ced28ff6.png" alt="在这里插入图片描述"><br>特殊字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">，：枚举；</span><br><span class="line">    (cron=&quot;7,9,23 * * * * ?&quot;)：任意时刻的 7,9，23 秒启动这个任务；</span><br><span class="line">-：范围：</span><br><span class="line">    (cron=&quot;7-20 * * * * ?&quot;):任意时刻的 7-20 秒之间，每秒启动一次</span><br><span class="line">*：任意；</span><br><span class="line">    指定位置的任意时刻都可以</span><br><span class="line">/：步长；</span><br><span class="line">    (cron=&quot;7/5 * * * * ?&quot;)：第 7 秒启动，每 5 秒一次；</span><br><span class="line">    (cron=&quot;*/5 * * * * ?&quot;)：任意秒启动，每 5 秒一次；</span><br><span class="line">？：（出现在日和周几的位置）：为了防止日和周冲突，在周和日上如果要写通配符使</span><br><span class="line">用?</span><br><span class="line">    (cron=&quot;* * * 1 * ?&quot;)：每月的 1 号，启动这个任务；</span><br><span class="line">L：（出现在日和周的位置）”，</span><br><span class="line">last：最后一个</span><br><span class="line">    (cron=&quot;* * * ? * 3L&quot;)：每月的最后一个周二</span><br><span class="line">W：</span><br><span class="line">Work Day：工作日</span><br><span class="line">    (cron=&quot;* * * W * ?&quot;)：每个月的工作日触发</span><br><span class="line">    (cron=&quot;* * * LW * ?&quot;)：每个月的最后一个工作日触发</span><br><span class="line">#：第几个</span><br><span class="line">    (cron=&quot;* * * ? * 5#2&quot;)：每个月的第 2 个周 4 (1是周日)</span><br></pre></td></tr></table></figure><p><a href="https://cron.qqe2.com/">在线Cron表达式生成器</a></p><h2 id="SpringBoot-整合"><a href="#SpringBoot-整合" class="headerlink" title="SpringBoot 整合"></a>SpringBoot 整合</h2><p>@EnableScheduling<br>@Scheduled</p><p>定时任务<br> 1、@EnableScheduling 开启定时任务<br> 2、@Scheduled  开启一个定时任务<br> 3、自动配置类 TaskSchedulingAutoConfiguration</p><p>1、Spring中6位组成，不允许第7位的年<br>2、在周几的位置，1-7代表周一到周日； MON-SUN<br>3、定时任务不应该阻塞。默认是阻塞的<br>如：每秒执行任务，任务内睡3秒，输出时每个间隔4秒，默认阻塞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Scheduled(cron = &quot;* * * ? * 5&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;hello...&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1）、可以让业务运行以异步的方式，自己提交到线程池<br>    <code>CompletableFuture.runAsync(()-&gt;&#123;     xxxxService.hello();     &#125;,executor);</code></p><p>2）、支持定时任务线程池，默认一个线程池；设置 TaskSchedulingProperties；<br>spring.task.scheduling.pool.size=5</p><p>3）、让定时任务异步执行异步任务；</p><p> 异步任务<br> 1、@EnableAsync 开启异步任务功能<br> 2、@Async 给希望异步执行的方法上标注<br> 3、自动配置类 TaskExecutionAutoConfiguration 属性绑定在TaskExecutionProperties<br>默认8个线程池，最大integer.max，最大队列 integer.max<br>spring.task.execution.pool.core-size=5<br>spring.task.execution.pool.max-size=50</p><p>解决：使用异步+定时任务来完成定时任务不阻塞的功能；</p><h2 id="定时任务-分布式下的问题"><a href="#定时任务-分布式下的问题" class="headerlink" title="定时任务-分布式下的问题"></a>定时任务-分布式下的问题</h2><p><img src="https://img-blog.csdnimg.cn/305a14cb14db466da72f187bbf2e3de3.png" alt="在这里插入图片描述"></p><h1 id="秒杀"><a href="#秒杀" class="headerlink" title="秒杀"></a>秒杀</h1><p>秒杀具有瞬间高并发的特点，针对这一特点，必须要做限流 + 异步 + 缓存（页面静态化）</p><ul><li>独立部署。</li></ul><p>限流方式：</p><ol><li>前端限流，一些高并发的网站直接在前端页面开始限流，例如：小米的验证码设计</li><li>nginx 限流，直接负载部分请求到错误的静态页面：令牌算法 漏斗算法</li><li>网关限流，限流的过滤器</li><li>代码中使用分布式信号量</li><li>rabbitmq 限流（能者多劳：chanel.basicQos(1)），保证发挥所有服务器的性能。</li></ol><h2 id="定时任务步骤"><a href="#定时任务步骤" class="headerlink" title="定时任务步骤"></a>定时任务步骤</h2><ul><li>商品信息不查数据库，提前放入缓存：分别放入秒杀场次信息和每个场次的商品信息</li><li>上架过的不用二次上架<br>  <code>if (!stringRedisTemplate.hasKey(key)) &#123;&#125;</code></li><li>一件商品可以参与多次秒杀，因此使用场次id_商品sku_id作为Key.</li><li>随机码：只暴露这个接口，很容易被攻击，一下子就抢到了。<br>seckill？skuId=1&amp;key=dadlajldj；只有在秒杀时才生成随机码，防止之前进行恶意请求</li><li>库存信息不查数据库，使用分布式信号量<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//5、使用库存作为分布式的信号量  限流；</span></span><br><span class="line">RSemaphore semaphore = redissonClient.getSemaphore(SKU_STOCK_SEMAPHORE + token);</span><br><span class="line"><span class="comment">//商品可以秒杀的数量作为信号量</span></span><br><span class="line">semaphore.trySetPermits(seckillSkuVo.getSeckillCount());</span><br></pre></td></tr></table></figure></li><li>定时任务使用分布式锁：一旦已经执行任务则避免重复执行<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RedissonClient redissonClient;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>  <span class="keyword">final</span> String  upload_lock = <span class="string">&quot;seckill:upload:lock&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Scheduled(cron = &quot;0 0 3 * * ?&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadSeckillSkuLatest3Days</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//1、重复上架无需处理</span></span><br><span class="line">    log.info(<span class="string">&quot;上架秒杀的商品信息...&quot;</span>);</span><br><span class="line">    <span class="comment">//分布式锁</span></span><br><span class="line">    RLock lock = redissonClient.getLock(upload_lock);</span><br><span class="line">    lock.lock(<span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        seckillService.uploadSeckillSkuLatest3Days();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="https://img-blog.csdnimg.cn/ff04ca0eb2414aeba79bf62f5c4f61d9.png" alt="在这里插入图片描述"></li></ul><h2 id="秒杀架构图"><a href="#秒杀架构图" class="headerlink" title="秒杀架构图"></a>秒杀架构图</h2><p><img src="https://img-blog.csdnimg.cn/21da86f0c55a499a997bd752cbbd33a3.png" alt="在这里插入图片描述"></p><h2 id="秒杀-高并发-系统关注的问题"><a href="#秒杀-高并发-系统关注的问题" class="headerlink" title="秒杀(高并发)系统关注的问题"></a>秒杀(高并发)系统关注的问题</h2><h3 id="1、服务单一职责-独立部署"><a href="#1、服务单一职责-独立部署" class="headerlink" title="1、服务单一职责+独立部署"></a>1、服务单一职责+独立部署</h3><p>秒杀服务即使自己扛不住压力， 挂掉。 不要影响别人</p><h3 id="2、秒杀链接加密"><a href="#2、秒杀链接加密" class="headerlink" title="2、秒杀链接加密"></a>2、秒杀链接加密</h3><p>防止恶意攻击， 模拟秒杀请求， 1000 次/ s攻击。<br>防止链接暴露， 自己工作人员， 提前秒杀商品。</p><h3 id="3、库存预热-快速扣减"><a href="#3、库存预热-快速扣减" class="headerlink" title="3、库存预热+快速扣减"></a>3、库存预热+快速扣减</h3><p>秒杀读多写少。无需每次实时校验库存。我 们库存预热， 放到redis中。信号量控制进来秒杀的请求</p><h3 id="4、动静分离"><a href="#4、动静分离" class="headerlink" title="4、动静分离"></a>4、动静分离</h3><p>nginx做好动静分离。保证秒杀和商品详情 页的动态请求才打到后端的服务集群。<br>使用CDN网络， 分担本集群压力。</p><h3 id="5、恶意请求拦截"><a href="#5、恶意请求拦截" class="headerlink" title="5、恶意请求拦截"></a>5、恶意请求拦截</h3><p>识别非法攻击请求并进行拦截，网关层</p><h3 id="6、流量错峰"><a href="#6、流量错峰" class="headerlink" title="6、流量错峰"></a>6、流量错峰</h3><p>使用各种手段， 将流量分担到更大宽度的时间点。比如验证码， 加入购物车</p><h3 id="7、限流-amp-熔断-amp-降级"><a href="#7、限流-amp-熔断-amp-降级" class="headerlink" title="7、限流&amp; 熔断&amp; 降级"></a>7、限流&amp; 熔断&amp; 降级</h3><p>前端限流+ 后端限流<br>限制次数， 限制总量， 快速失败降级运行，  熔断隔离防止雪崩</p><h3 id="8、队列削峰"><a href="#8、队列削峰" class="headerlink" title="8、队列削峰"></a>8、队列削峰</h3><p>1 万个商品， 每个1000 件秒杀。双11<br>所有秒杀成功的请求， 进入队列， 慢慢创建订单， 扣减库存即可。</p><p><strong>高并发有三宝：缓存、异步、排好队</strong></p><h2 id="秒杀流程图"><a href="#秒杀流程图" class="headerlink" title="秒杀流程图"></a>秒杀流程图</h2><p>流量分散开，压力给多个服务，如购物车等，但是这可能导致每个服务都卡<br>业务统一，普通商品和秒杀商品的步骤一样<br><img src="https://img-blog.csdnimg.cn/a1365be8b01e4d1fa05f944349d4052b.png" alt="在这里插入图片描述"></p><p>秒杀服务作为独立的业务<br>前面的判断不接触数据库<br>缺点：订单炸了后队列里消息就没人消费了，需要额外处理<br><img src="https://img-blog.csdnimg.cn/df6d0a0548464d2cadbf458289a73592.png" alt="在这里插入图片描述"></p><h1 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h1><p><a href="https://sentinelguard.io/zh-cn/docs/basic-api-resource-rule.html">https://sentinelguard.io/zh-cn/docs/basic-api-resource-rule.html</a></p><h2 id="1、熔断降级限流"><a href="#1、熔断降级限流" class="headerlink" title="1、熔断降级限流"></a>1、熔断降级限流</h2><p>什么是熔断<br>A 服务调用 B 服务的某个功能，由于网络不稳定问题，或者 B 服务卡机，导致功能时<br>间超长。如果这样子的次数太多。我们就可以直接将 B 断路了（A 不再请求 B 接口），凡是<br>调用 B 的直接返回降级数据，不必等待 B 的超长执行。 这样 B 的故障问题，就不会级联影<br>响到 A。</p><p>什么是降级<br>整个网站处于流量高峰期，服务器压力剧增，根据当前业务情况及流量，对一些服务和<br>页面进行有策略的降级[停止服务，所有的调用直接返回降级数据]。以此缓解服务器资源的<br>的压力，以保证核心业务的正常运行，同时也保持了客户和大部分客户的得到正确的相应。</p><p>异同：<br>相同点：<br>1、为了保证集群大部分服务的可用性和可靠性，防止崩溃，牺牲小我<br>2、用户最终都是体验到某个功能不可用<br>不同点：<br>1、熔断是被调用方故障，触发的系统主动规则<br>2、降级是基于全局考虑，停止一些正常服务，释放资源</p><p>什么是限流<br>对打入服务的请求流量进行控制，使服务能够承担不超过自己能力的流量压力</p><h2 id="2、步骤"><a href="#2、步骤" class="headerlink" title="2、步骤"></a>2、步骤</h2><ol><li>定义资源</li><li>定义规则</li><li>检验规则是否生效</li></ol><p>分为两个部分:<br> 核心库（Java 客户端）不依赖任何框架/库，能够运行于所有 Java 运行时环境，同时<br>对 Dubbo / Spring Cloud 等框架也有较好的支持。<br> 控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的<br>Tomcat</p><h2 id="定义资源"><a href="#定义资源" class="headerlink" title="定义资源"></a>定义资源</h2><h3 id="方式一：主流框架的默认适配"><a href="#方式一：主流框架的默认适配" class="headerlink" title="方式一：主流框架的默认适配"></a>方式一：主流框架的默认适配</h3><p>即所有资源都是受保护的，可以不特地说明要保护哪些资源</p><h3 id="方式二：抛出异常的方式定义资源"><a href="#方式二：抛出异常的方式定义资源" class="headerlink" title="方式二：抛出异常的方式定义资源"></a>方式二：抛出异常的方式定义资源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 资源名可使用任意有业务语义的字符串，比如方法名、接口名或其它可唯一标识的字符串。</span></span><br><span class="line"><span class="keyword">try</span> (Entry entry = SphU.entry(<span class="string">&quot;resourceName&quot;</span>)) &#123;</span><br><span class="line">  <span class="comment">// 被保护的业务逻辑</span></span><br><span class="line">  <span class="comment">// do something here...</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (BlockException ex) &#123;</span><br><span class="line">  <span class="comment">// 资源访问阻止，被限流或被降级</span></span><br><span class="line">  <span class="comment">// 在此处进行相应的处理操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式四：注解方式定义资源"><a href="#方式四：注解方式定义资源" class="headerlink" title="方式四：注解方式定义资源"></a>方式四：注解方式定义资源</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原本的业务方法.</span></span><br><span class="line"><span class="meta">@SentinelResource(blockHandler = &quot;blockHandlerForGetUser&quot;)</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">getUserById</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;getUserById command failed&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// blockHandler 函数，原方法调用被限流/降级/系统保护的时候调用</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> User <span class="title">blockHandlerForGetUser</span><span class="params">(String id, BlockException ex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="规则的种类"><a href="#规则的种类" class="headerlink" title="规则的种类"></a>规则的种类</h2><p>流量控制规则、熔断降级规则、系统保护规则、来源访问控制规则 和 热点参数规则。</p><h3 id="流量控制规则-FlowRule"><a href="#流量控制规则-FlowRule" class="headerlink" title="流量控制规则 (FlowRule)"></a>流量控制规则 (FlowRule)</h3><p><img src="https://img-blog.csdnimg.cn/4f5d2f71e49a4683a90d9faf0d5f163b.png" alt="在这里插入图片描述"></p><h2 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h2><p> 1、整合Sentinel<br> 1）、导入依赖 spring-cloud-starter-alibaba-sentinel<br> 2）、下载sentinel的控制台 java -jar sentinel-dashboard-1.8.5.jar<br> 3）、配置sentinel控制台地址信息<br> 4) 、在控制台调整参数。【默认所有的流控设置保存在内存中，重启失效】</p><p> 2、每一个微服务都导入 审计模块actuator ()；并配合management.endpoints.web.exposure.include=*</p><p> 3、自定义sentinel流控返回数据</p><p> 4、使用Sentinel来保护feign远程调用：熔断；<br> 1）、<strong>调用方</strong>的熔断保护：feign.sentinel.enabled=true<br> 2）、调用方手动指定远程服务的降级策略。远程服务被降级处理。触发我们的熔断回调方法<br> 3）、超大浏览的时候，必须牺牲一些远程服务。在服务的提供方（远程服务）指定降级策略；<br> 提供方是在运行。但是不运行自己的业务逻辑，返回的是默认的降级数据（限流的数据），</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SeckillSentinelConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SeckillSentinelConfig</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebCallbackManager.setUrlBlockHandler(<span class="keyword">new</span> UrlBlockHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">blocked</span><span class="params">(HttpServletRequest request, HttpServletResponse response, BlockException e)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">                R error = R.error(BizCodeEnum.TOO_MANY_REQUEST.getCode(), BizCodeEnum.TOO_MANY_REQUEST.getMsg());</span><br><span class="line">                response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">                response.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">                response.getWriter().write(JSON.toJSONString(error));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 5、自定义受保护的资源<br> blockHandler 函数会在原方法被限流/降级/系统保护的时候调用，而 fallback 函数会针对所有类型的异常。</p><p> 1）、代码<br> try(Entry entry = SphU.entry(“seckillSkus”)){<br> //业务逻辑<br> }<br> catch(Execption e){}</p><p> 2）、基于注解。<br> @SentinelResource(value = “getCurrentSeckillSkusResource”,blockHandler = “blockHandler”)</p><p> 无论是1,2方式一定要配置被限流以后的默认返回.<br> url请求可以设置统一返回:WebCallbackManager</p><h2 id="网关流控"><a href="#网关流控" class="headerlink" title="网关流控"></a>网关流控</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-sentinel-gateway<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Sleuth-Zipkin-服务链路追踪"><a href="#Sleuth-Zipkin-服务链路追踪" class="headerlink" title="Sleuth+Zipkin 服务链路追踪"></a>Sleuth+Zipkin 服务链路追踪</h1><p><a href="https://docs.spring.io/spring-cloud-sleuth/docs/current/reference/html/">https://docs.spring.io/spring-cloud-sleuth/docs/current/reference/html/</a><br>微服务架构是一个分布式架构，它按业务划分服务单元，一个分布式系统往往有很多个服务<br>单元。由于服务单元数量众多，业务的复杂性，如果出现了错误和异常，很难去定位。主要<br>体现在，一个请求可能需要调用很多个服务，而内部服务的调用复杂性，决定了问题难以<br>定位。所以微服务架构中，必须实现分布式链路追踪，去跟进一个请求到底有哪些服务参与，<br>参与的顺序又是怎样的，从而达到每个请求的步骤清晰可见，出了问题，很快定位。</p><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><ul><li>Span（跨度）：基本工作单元，发送一个远程调度任务 就会产生一个 Span，Span 是一<br>个 64 位 ID 唯一标识的，Trace 是用另一个 64 位 ID 唯一标识的，Span 还有其他数据信<br>息，比如摘要、时间戳事件、Span 的 ID、以及进度 ID。</li><li>Trace（跟踪）：一系列 Span 组成的一个树状结构。请求一个微服务系统的 API 接口，<br>这个 API 接口，需要调用多个微服务，调用每个微服务都会产生一个新的 Span，所有<br>由这个请求产生的 Span 组成了这个 Trace。</li><li>Annotation（标注）：用来及时记录一个事件的，一些核心注解用来定义一个请求的开<br>始和结束 。这些注解包括以下：<ul><li>cs - Client Sent -客户端发送一个请求，这个注解描述了这个 Span 的开始</li><li>sr - Server Received -服务端获得请求并准备开始处理它，如果将其 sr 减去 cs 时间戳便可得到网络传输的时间。</li><li>ss - Server Sent （服务端发送响应）–该注解表明请求处理的完成(当请求返回客户端)，如果 ss 的时间戳减去 sr 时间戳，就可以得到服务器请求的时间。</li><li>cr - Client Received （客户端接收响应）-此时 Span 的结束，如果 cr 的时间戳减去cs 时间戳便可以得到整个请求所消耗的时间。</li></ul></li></ul><p>父子关系<br><img src="https://img-blog.csdnimg.cn/f0e2eaf29a394497bc478c46f9588799.png" alt="在这里插入图片描述"></p><h2 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h2><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>docker run -d -p 9411:9411 openzipkin/zipkin</p><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p><a href="https://search.maven.org/remote_content?g=io.zipkin&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec">https://search.maven.org/remote_content?g=io.zipkin&amp;a=zipkin-server&amp;v=LATEST&amp;c=exec</a><br>java -jar zipkin.jar</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.zipkin.base-url</span>=<span class="string">http://192.168.10.102:9411/</span></span><br><span class="line"><span class="meta">spring.zipkin.discovery-client-enabled</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">spring.zipkin.sender.type</span>=<span class="string">web</span></span><br><span class="line"><span class="meta">spring.sleuth.sampler.probability</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><p>数据持久化-&gt; elasticSearch</p>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode刷题总结</title>
      <link href="/2022/10/05/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/10/05/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>整理自用：解析来自代码随想录、leetcode题解。</p><h1 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h1><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/solution/bfs-de-shi-yong-chang-jing-zong-jie-ceng-xu-bian-l/">BFS 的使用场景总结：层序遍历、最短路径问题</a><br><a href="https://leetcode.cn/circle/article/qiAgHn/">股票问题系列通解（转载翻译）</a></p><blockquote><p>所以大家使用自己熟悉的编程语言写算法，一定要知道常用的容器底层都是如何实现的，最基本的就是map、set等等，否则自己写的代码，自己对其性能分析都分析不清楚！ By代码随想录<br>注意时空复杂度！</p></blockquote><h1 id="trick"><a href="#trick" class="headerlink" title="trick"></a>trick</h1><p>1 &lt;&lt; n -&gt; 2^n<br>Long.MIN_VALUE  -2^63<br>Long.MAX_VALUE 2^63-1<br>Integer.MIN_VALUE  -2^31<br>Integer.MAX_VALUE 2^31-1</p><p>HashMap是无序的；<br>LinkedHashMap是有序的（按你插入的顺序）；<br>TreeMap 是按key排序的；</p><h2 id="Arrays-sort"><a href="#Arrays-sort" class="headerlink" title="Arrays.sort"></a>Arrays.sort</h2><p><a href="https://blog.csdn.net/qq_40121580/article/details/106967667">Arrays.sort实现降序排序</a><br>下面两种都只能用Integer包装类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//法一：</span></span><br><span class="line">Integer[] arr=&#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;</span><br><span class="line">Arrays.sort(arr,Collections.reverseOrder());</span><br><span class="line"></span><br><span class="line"><span class="comment">//法二：</span></span><br><span class="line">Comparator cmp=<span class="keyword">new</span> CMP();</span><br><span class="line">Arrays.sort(arr,cmp);</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CMP</span> <span class="keyword">implements</span> <span class="title">Comparator</span>&lt;<span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> <span class="comment">//可以去掉。作用是检查下面的方法名是不是父类中所有的</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer a,Integer b)</span></span>&#123;</span><br><span class="line"><span class="comment">//        两种都可以，升序排序的话反过来就行</span></span><br><span class="line"><span class="comment">//        return a-b&lt;0?1:-1;</span></span><br><span class="line">        <span class="keyword">return</span> b-a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果需要对int[]进行排序，可以升序后进行反向遍历，从后往前</p><h2 id="递归函数什么时候需要返回值"><a href="#递归函数什么时候需要返回值" class="headerlink" title="递归函数什么时候需要返回值"></a>递归函数什么时候需要返回值</h2><blockquote><p>如果需要搜索整棵二叉树且不用处理递归返回值，递归函数就不要返回值。<br>如果需要搜索整棵二叉树且需要处理递归返回值，递归函数就需要返回值。<br>如果要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件的路径了就要及时返回。</p></blockquote><h2 id="判重的方法"><a href="#判重的方法" class="headerlink" title="判重的方法"></a>判重的方法</h2><p>1、先排序，然后i&gt;start&amp;&amp;nums[i]==nums[i-1]，见90<br>2、用used数组 i&gt;0&amp;&amp;nums[i]==nums[i-1]&amp;&amp; !used[i - 1] 见47<br>3、同一父节点的该层不可重复，使用set记录，每层重新定义set，见491<br>使用set去重的版本相对于used数组的版本效率都要低很多</p><h1 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h1><h3 id="6221-最流行的视频创作者"><a href="#6221-最流行的视频创作者" class="headerlink" title="6221. 最流行的视频创作者"></a><a href="https://leetcode.cn/problems/most-popular-video-creator/">6221. 最流行的视频创作者</a></h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; mostPopularCreator(String[] creators, String[] ids, <span class="keyword">int</span>[] views) &#123;</span><br><span class="line">        <span class="keyword">int</span> n=creators.length;</span><br><span class="line">        HashMap&lt;String, Double&gt; nameSumMap = <span class="keyword">new</span> HashMap&lt;&gt;();<span class="comment">//double范围比int大</span></span><br><span class="line">        HashMap&lt;String, Integer&gt; nameMaxViewMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        HashMap&lt;String, String&gt; nameIdMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">double</span> maxValue=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            nameSumMap.put(creators[i],nameSumMap.getOrDefault(creators[i],<span class="number">0.0</span>)+views[i]);</span><br><span class="line">            maxValue=Math.max(maxValue,nameSumMap.get(creators[i]));</span><br><span class="line">            <span class="comment">//1、为空</span></span><br><span class="line">            <span class="comment">//2、遍历到更大的播放量的视频</span></span><br><span class="line">            <span class="comment">//3、播放量相等但字典序更小</span></span><br><span class="line">            <span class="keyword">if</span> (nameMaxViewMap.get(creators[i])==<span class="keyword">null</span></span><br><span class="line">                    ||views[i]&gt;nameMaxViewMap.get(creators[i])</span><br><span class="line">            ||(views[i]==nameMaxViewMap.get(creators[i])&amp;&amp;nameIdMap.get(creators[i]).compareTo(ids[i])&gt;<span class="number">0</span>))&#123;</span><br><span class="line">                nameMaxViewMap.put(creators[i],views[i]);</span><br><span class="line">                nameIdMap.put(creators[i],ids[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找Map中的最大，treemap只能按key排序</span></span><br><span class="line">        <span class="comment">//之前记录最大的，然后遍历一次Map，与最大值进行比较</span></span><br><span class="line">        List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String i : nameSumMap.keySet()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nameSumMap.get(i).equals(maxValue))&#123;</span><br><span class="line">                List&lt;String&gt; theOne=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                theOne.add(i);</span><br><span class="line">                theOne.add(nameIdMap.get(i));</span><br><span class="line">                res.add(theOne);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6222-美丽整数的最小增量"><a href="#6222-美丽整数的最小增量" class="headerlink" title="6222. 美丽整数的最小增量"></a><a href="https://leetcode.cn/problems/minimum-addition-to-make-integer-beautiful/">6222. 美丽整数的最小增量</a></h3><p><a href="https://leetcode.cn/problems/minimum-addition-to-make-integer-beautiful/solution/by-priceless-brahmaguptatvb-mhuh/">linuxer</a><br>每次尽可能的让n的各个位的总和不断变小。比如：n = 132, target = 1<br>132 -&gt; 140 -&gt; 200 -&gt; 1000 答案就是1000。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">makeIntegerBeautiful</span><span class="params">(<span class="keyword">long</span> n, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> origin=n;</span><br><span class="line">        <span class="keyword">long</span> i=<span class="number">10</span>;</span><br><span class="line">        <span class="keyword">while</span>(getSum(n)&gt;target)&#123;</span><br><span class="line">            n=n/i;</span><br><span class="line">            n++;</span><br><span class="line">            n=n*i;</span><br><span class="line">            i=i*<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n-origin;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSum</span><span class="params">(<span class="keyword">long</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            sum+=n%<span class="number">10</span>;</span><br><span class="line">            n=n/<span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><ol><li>确定dp数组以及下标的含义</li><li>确定递推公式</li><li>dp数组如何初始化</li><li>确定遍历顺序</li><li>举例推导dp数组</li></ol><h2 id="509-斐波那契数"><a href="#509-斐波那契数" class="headerlink" title="509. 斐波那契数"></a>509. 斐波那契数</h2><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> n;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="keyword">return</span> fib(n-<span class="number">1</span>)+fib(n-<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(2^n)</p><h3 id="动态规划1"><a href="#动态规划1" class="headerlink" title="动态规划1"></a>动态规划1</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[i]=dp[i-<span class="number">1</span>]+dp[i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间O(n)，空间O(n)</p><h3 id="动态规划2"><a href="#动态规划2" class="headerlink" title="动态规划2"></a>动态规划2</h3><p>由于每次只涉及两个值，只用两个变量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fib</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> q=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> sum=p+q;</span><br><span class="line">            p=q;</span><br><span class="line">            q=sum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> q;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间O(n)，空间O(1)</p><h2 id="70-爬楼梯"><a href="#70-爬楼梯" class="headerlink" title="70. 爬楼梯"></a>70. 爬楼梯</h2><p>通过在 n-1 阶的那块一次性爬 1 步来达到 n 楼层，以及通过在 n - 2 阶 一次性爬 2 步来达到 n 楼层。所以就是这两种情况的总和。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">climbStairs</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">2</span>]=<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i]=dp[i-<span class="number">1</span>]+dp[i-<span class="number">2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="746-使用最小花费爬楼梯"><a href="#746-使用最小花费爬楼梯" class="headerlink" title="746. 使用最小花费爬楼梯"></a>746. 使用最小花费爬楼梯</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(<span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[cost.length];</span><br><span class="line">        dp[<span class="number">0</span>]=cost[<span class="number">0</span>];</span><br><span class="line">        dp[<span class="number">1</span>]=cost[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; cost.length; i++) &#123;</span><br><span class="line">            dp[i]=Math.min(dp[i-<span class="number">1</span>],dp[i-<span class="number">2</span>])+cost[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(dp[cost.length-<span class="number">1</span>],dp[cost.length-<span class="number">2</span>]);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(<span class="keyword">int</span>[] cost)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = cost.length;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            dp[i] = Math.min(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="62-不同路径"><a href="#62-不同路径" class="headerlink" title="62. 不同路径"></a>62. 不同路径</h2><h3 id="动态规划-1"><a href="#动态规划-1" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span>[][] chess = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">           chess[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">           chess[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">               chess[i][j] = chess[i][j - <span class="number">1</span>] + chess[i - <span class="number">1</span>][j];</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> chess[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断太多，不简洁，先把边界处理好</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePaths</span><span class="params">(<span class="keyword">int</span> m, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (m==<span class="number">1</span>||n==<span class="number">1</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span>[][] chess=<span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line"></span><br><span class="line">       chess[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">       chess[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">       chess[<span class="number">1</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">               <span class="keyword">if</span> ((i==<span class="number">0</span>&amp;&amp;j==<span class="number">0</span>)||(i==<span class="number">0</span>&amp;&amp;j==<span class="number">1</span>)||(i==<span class="number">1</span>&amp;&amp;j==<span class="number">0</span>))&#123;</span><br><span class="line">                   <span class="keyword">continue</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">                   chess[i][j]=chess[i][j-<span class="number">1</span>];</span><br><span class="line">               &#125;<span class="keyword">else</span></span><br><span class="line">               <span class="keyword">if</span> (j==<span class="number">0</span>)&#123;</span><br><span class="line">                   chess[i][j]=chess[i-<span class="number">1</span>][j];</span><br><span class="line">               &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                   chess[i][j]=chess[i][j-<span class="number">1</span>]+chess[i-<span class="number">1</span>][j];</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> chess[m-<span class="number">1</span>][n-<span class="number">1</span>];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="？排列组合"><a href="#？排列组合" class="headerlink" title="？排列组合"></a>？排列组合</h3><h2 id="63-不同路径-II"><a href="#63-不同路径-II" class="headerlink" title="63. 不同路径 II"></a>63. 不同路径 II</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">uniquePathsWithObstacles</span><span class="params">(<span class="keyword">int</span>[][] obstacleGrid)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m=obstacleGrid.length;</span><br><span class="line">    <span class="keyword">int</span> n=obstacleGrid[<span class="number">0</span>].length;</span><br><span class="line">    <span class="keyword">int</span>[][] chess = <span class="keyword">new</span> <span class="keyword">int</span>[m][n];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obstacleGrid[i][<span class="number">0</span>]==<span class="number">0</span>)&#123;</span><br><span class="line">            chess[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (obstacleGrid[<span class="number">0</span>][j]==<span class="number">0</span>) &#123;</span><br><span class="line">            chess[<span class="number">0</span>][j] = <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obstacleGrid[i][j]==<span class="number">0</span>)&#123;</span><br><span class="line">                chess[i][j] = chess[i][j - <span class="number">1</span>] + chess[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> chess[m - <span class="number">1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="343-整数拆分"><a href="#343-整数拆分" class="headerlink" title="343. 整数拆分"></a>343. 整数拆分</h2><h3 id="动态规划-2"><a href="#动态规划-2" class="headerlink" title="动态规划"></a>动态规划</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> maxVal = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span> tmp = Math.max(j * (i - j), j * dp[i - j]);</span><br><span class="line">                <span class="keyword">if</span> (tmp &gt; maxVal) &#123;</span><br><span class="line">                    maxVal = tmp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] = maxVal;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h3><p>每次拆成n个3，如果剩下是4，则保留4，然后相乘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">integerBreak2</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">3</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">4</span>) <span class="keyword">return</span> <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">4</span>) &#123;</span><br><span class="line">        result *= <span class="number">3</span>;</span><br><span class="line">        n -= <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    result *= n;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="96-不同的二叉搜索树"><a href="#96-不同的二叉搜索树" class="headerlink" title="96. 不同的二叉搜索树"></a>96. 不同的二叉搜索树</h2><p>递归式都推出来了，没想到是乘法，以为是最大。<br>想想也是，左边的每一种对应着右边所有，所以是m*n，but注意dp[0]令为1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numTrees</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] dp=<span class="keyword">new</span> <span class="keyword">int</span>[n+<span class="number">1</span>];</span><br><span class="line">    dp[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    dp[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">2</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=i;j++)&#123;</span><br><span class="line">            count+= dp[j-<span class="number">1</span>]*dp[i-j];</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i]=count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><p><a href="https://programmercarl.com/%E8%83%8C%E5%8C%85%E7%90%86%E8%AE%BA%E5%9F%BA%E7%A1%8001%E8%83%8C%E5%8C%85-1.html#_01-%E8%83%8C%E5%8C%85">动态规划：关于01背包问题，你该了解这些！</a></p><h2 id="01-背包"><a href="#01-背包" class="headerlink" title="01 背包"></a>01 背包</h2><p>有n件物品和一个最多能背重量为w 的背包。第i件物品的重量是weight[i]，得到的价值是value[i] 。每件物品只能用一次，求解将哪些物品装入背包里物品价值总和最大。<br><strong>举例：</strong><br>背包最大重量为4。<br>物品为：<br><img src="vx_images/42682013221142.png"><br>问背包能背的物品最大价值是多少？</p><h3 id="二维dp数组"><a href="#二维dp数组" class="headerlink" title="二维dp数组"></a>二维dp数组</h3><p>dp[i][j] 表示从下标为[0-i]的物品里任意取，放进容量为j的背包，价值总和最大是多少。<br><img src="vx_images/528632013239568.png" alt="20210110103003361"></p><h4 id="递归公式"><a href="#递归公式" class="headerlink" title="递归公式"></a>递归公式</h4><p><strong>不放物品i：</strong> 由dp[i - 1][j]推出，即背包容量为j，里面不放物品i的最大价值，此时dp[i][j]就是dp[i - 1][j]。(其实就是当物品i的重量大于背包j的重量时，物品i无法放进背包中，所以被背包内的价值依然和前面相同。)<br><strong>放物品i：</strong> 由dp[i - 1][j - weight[i]]推出，dp[i - 1][j - weight[i]] 为背包容量为j - weight[i]的时候不放物品i的最大价值，那么dp[i - 1][j - weight[i]] + value[i] （物品i的价值），就是背包放物品i得到的最大价值<br>递归公式： dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - weight[i]] + value[i]);</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><p>如果背包容量j为0的话，即dp[i][0]，无论是选取哪些物品，背包价值总和一定为0。<br>dp[0][j]，即：i为0，存放编号0的物品的时候，各个容量的背包所能存放的最大价值。<br>那么很明显当 j &lt; weight[0]的时候，dp[0][j] 应该是 0，因为背包容量比编号0的物品重量还小。<br>当j &gt;= weight[0]时，dp[0][j] 应该是value[0]，因为背包容量放足够放编号0物品。</p><h4 id="确定遍历顺序"><a href="#确定遍历顺序" class="headerlink" title="确定遍历顺序"></a>确定遍历顺序</h4><p>在如下图中，可以看出，有两个遍历的维度：物品与背包重量。<br>都可以！！ 但是先遍历物品更好理解。</p><h3 id="一维dp数组（滚动数组）"><a href="#一维dp数组（滚动数组）" class="headerlink" title="一维dp数组（滚动数组）"></a>一维dp数组（滚动数组）</h3><p>每一层都利用上一层的信息，上一层可以重复利用，直接拷贝到当前层。<br>此时dp[j]有两个选择，一个是取自己dp[j] 相当于 二维dp数组中的dp[i-1][j]，即不放物品i，一个是取dp[j - weight[i]] + value[i]，即放物品i，指定是取最大的，毕竟是求最大价值。<br>dp数组初始化的时候，都初始为0。<br>二维dp遍历的时候，背包容量是从小到大，而<strong>一维dp遍历的时候，背包是从大到小。</strong><br>倒序遍历是为了保证物品i只被放入一次！但如果一旦正序遍历了，那么物品0就会被重复加入多次！<br>必须先遍历物品嵌套遍历背包容量。</p><h1 id="贪心法"><a href="#贪心法" class="headerlink" title="贪心法"></a>贪心法</h1><h2 id="455-分发饼干"><a href="#455-分发饼干" class="headerlink" title="455. 分发饼干"></a>455. 分发饼干</h2><p>小饼干先喂饱小胃口 或者 大饼干喂给胃口大的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(g);<span class="comment">//默认升序</span></span><br><span class="line">    Arrays.sort(s);</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> start=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s.length&amp;&amp;start&lt;g.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i]&gt;=g[start])&#123;</span><br><span class="line">            res++;</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findContentChildren2</span><span class="params">(<span class="keyword">int</span>[] g, <span class="keyword">int</span>[] s)</span> </span>&#123;</span><br><span class="line">    Arrays.sort(g);<span class="comment">//默认升序</span></span><br><span class="line">    Arrays.sort(s);</span><br><span class="line">    <span class="keyword">int</span> start=s.length-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=g.length-<span class="number">1</span>;i&gt;=<span class="number">0</span>&amp;&amp;start&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">if</span> (s[start]&gt;=g[i])&#123;</span><br><span class="line">            res++;</span><br><span class="line">            start--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="376-摆动序列"><a href="#376-摆动序列" class="headerlink" title="376. 摆动序列"></a>376. 摆动序列</h2><h3 id="动态规划-3"><a href="#动态规划-3" class="headerlink" title="动态规划"></a>动态规划</h3><p><a href="https://leetcode.cn/problems/wiggle-subsequence/solution/tan-xin-si-lu-qing-xi-er-zheng-que-de-ti-jie-by-lg/">贪心思路 清晰而正确的题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wiggleMaxLength</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> up=<span class="number">1</span>,down=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]&gt;nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                up=down+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[i]&lt;nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                down=up+<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nums.length==<span class="number">0</span>?<span class="number">0</span>:Math.max(up,down);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="贪心"><a href="#贪心" class="headerlink" title="贪心"></a>贪心</h3><p>代码随想录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">wiggleMaxLength2</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> nums.length;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> curDiff=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> preDiff=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> result=<span class="number">1</span>;<span class="comment">//默认最右面有一个峰值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length-<span class="number">1</span>; i++) &#123;</span><br><span class="line">            curDiff=nums[i+<span class="number">1</span>]-nums[i];</span><br><span class="line">            <span class="keyword">if</span> ((curDiff&gt;<span class="number">0</span>&amp;&amp;preDiff&lt;=<span class="number">0</span>)||(preDiff&gt;=<span class="number">0</span>&amp;&amp;curDiff&lt;<span class="number">0</span>))&#123;</span><br><span class="line">                result++;<span class="comment">//统计谷底和谷峰</span></span><br><span class="line">                preDiff=curDiff;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="53-最大子数组和"><a href="#53-最大子数组和" class="headerlink" title="53. 最大子数组和"></a>53. 最大子数组和</h2><h3 id="暴力超时"><a href="#暴力超时" class="headerlink" title="暴力超时"></a>暴力超时</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArrayBad</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxSum=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> curSum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            curSum=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; nums.length; j++) &#123;</span><br><span class="line">                curSum=curSum+nums[j];</span><br><span class="line">                <span class="keyword">if</span> (curSum&gt;maxSum)&#123;</span><br><span class="line">                    maxSum=curSum;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="贪心-1"><a href="#贪心-1" class="headerlink" title="贪心"></a>贪心</h3><p>当总和已经小于0时不可能更大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxSum=Integer.MIN_VALUE;</span><br><span class="line">        <span class="keyword">int</span> curSum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">                curSum=curSum+nums[i];</span><br><span class="line">                <span class="keyword">if</span> (curSum&gt;maxSum)&#123;</span><br><span class="line">                    maxSum=curSum;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (curSum&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                    curSum=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> maxSum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="动态规划-4"><a href="#动态规划-4" class="headerlink" title="?动态规划"></a>?动态规划</h3><h2 id="122-买卖股票的最佳时机-II"><a href="#122-买卖股票的最佳时机-II" class="headerlink" title="122. 买卖股票的最佳时机 II"></a>122. 买卖股票的最佳时机 II</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(<span class="keyword">int</span>[] prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;prices.length;i++)&#123;</span><br><span class="line">        res+= Math.max(prices[i] - prices[i - <span class="number">1</span>], <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="55-跳跃游戏"><a href="#55-跳跃游戏" class="headerlink" title="55. 跳跃游戏"></a>55. 跳跃游戏</h2><p>只看覆盖范围</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">canJump</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> cover=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">if</span> (nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;=cover; i++) &#123;<span class="comment">// 注意这里是小于等于cover</span></span><br><span class="line">           <span class="keyword">int</span> cur=i+nums[i];</span><br><span class="line">           cover=Math.max(cur,cover);</span><br><span class="line">           <span class="keyword">if</span> (cover&gt;=nums.length-<span class="number">1</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="回溯法"><a href="#回溯法" class="headerlink" title="回溯法"></a>回溯法</h1><blockquote><p>组合问题：N个数里面按一定规则找出k个数的集合<br>切割问题：一个字符串按一定规则有几种切割方式<br>子集问题：一个N个数的集合里有多少符合条件的子集<br>排列问题：N个数按一定规则全排列，有几种排列方式<br>棋盘问题：N皇后，解数独等等<br><a href="https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html#java">代码随想录</a><br>组合问题代码随想录讲的很好，特别是树形图，官解不太行</p></blockquote><h2 id="77-组合"><a href="#77-组合" class="headerlink" title="77. 组合"></a>77. 组合</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; path=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combine(<span class="keyword">int</span> n, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        recur(n,k,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (path.size()==k)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));<span class="comment">//需要新建一个数组，否则传的是同一个</span></span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//剪枝：当可选的数字小于需要的数字数量无需再遍历</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;=n-(k-path.size())+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            path.add(i);</span><br><span class="line">            recur(n,k,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="216-组合总和-III"><a href="#216-组合总和-III" class="headerlink" title="216. 组合总和 III"></a>216. 组合总和 III</h2><p>记得剪枝</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; path=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum3(<span class="keyword">int</span> k, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        recur(k,n,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span> k, <span class="keyword">int</span> n, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum&gt;n)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (path.size()==k)&#123;</span><br><span class="line">            <span class="keyword">if</span> (sum==n)&#123;</span><br><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=start;i&lt;=<span class="number">9</span>-(k-path.size())+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            path.add(i);</span><br><span class="line">            sum+=i;</span><br><span class="line">            recur(k,n,i+<span class="number">1</span>);</span><br><span class="line">            sum-=i;</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="17-电话号码的字母组合"><a href="#17-电话号码的字母组合" class="headerlink" title="17. 电话号码的字母组合"></a>17. 电话号码的字母组合</h2><p><a href="https://programmercarl.com/0017.%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88.html#c-%E4%BB%A3%E7%A0%81">代码随想录</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">String[] letterMap = &#123;</span><br><span class="line">        <span class="string">&quot;&quot;</span>, <span class="comment">// 0</span></span><br><span class="line">                <span class="string">&quot;&quot;</span>, <span class="comment">// 1</span></span><br><span class="line">                <span class="string">&quot;abc&quot;</span>, <span class="comment">// 2</span></span><br><span class="line">                <span class="string">&quot;def&quot;</span>, <span class="comment">// 3</span></span><br><span class="line">                <span class="string">&quot;ghi&quot;</span>, <span class="comment">// 4</span></span><br><span class="line">                <span class="string">&quot;jkl&quot;</span>, <span class="comment">// 5</span></span><br><span class="line">                <span class="string">&quot;mno&quot;</span>, <span class="comment">// 6</span></span><br><span class="line">                <span class="string">&quot;pqrs&quot;</span>, <span class="comment">// 7</span></span><br><span class="line">                <span class="string">&quot;tuv&quot;</span>, <span class="comment">// 8</span></span><br><span class="line">                <span class="string">&quot;wxyz&quot;</span>, <span class="comment">// 9</span></span><br><span class="line">    &#125;;</span><br><span class="line">     StringBuilder stringBuilder=<span class="keyword">new</span> StringBuilder();</span><br><span class="line">    List&lt;String&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">letterCombinations</span><span class="params">(String digits)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (digits.length()==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        recur(digits,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(String digits,<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (stringBuilder.length()==digits.length())&#123;</span><br><span class="line">            res.add(stringBuilder.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> digit=digits.charAt(index)-<span class="string">&#x27;0&#x27;</span>;<span class="comment">//转为字符对应的数字，否则是ascii对应的数字</span></span><br><span class="line">        String letters=letterMap[digit];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;letters.length();i++)&#123;</span><br><span class="line">            stringBuilder.append(letters.charAt(i));</span><br><span class="line">            recur(digits,index+<span class="number">1</span>);</span><br><span class="line">            stringBuilder.deleteCharAt(stringBuilder.length()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="39-组合总和"><a href="#39-组合总和" class="headerlink" title="39. 组合总和"></a>39. 组合总和</h2><h3 id="普通"><a href="#普通" class="headerlink" title="普通"></a>普通</h3><p>可重复，每次递归不需要+1<br>但是为了防止不同顺序的重复，每次依旧在[start,+.]中取值<br><img src="https://img-blog.csdnimg.cn/cbf3100020a84badb34075492dacb6fe.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        recur(candidates, target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target,<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum&gt;target)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            recur(candidates, target,i);</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="剪枝优化"><a href="#剪枝优化" class="headerlink" title="剪枝优化"></a>剪枝优化</h3><p>排序后，大于sum的直接跳出循环</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; combinationSum(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        recur(candidates, target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target,<span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum&gt;target)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (sum == target) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; candidates.length&amp;&amp;sum+candidates[i]&lt;=target; i++) &#123;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            sum += candidates[i];</span><br><span class="line">            recur(candidates, target,i);</span><br><span class="line">            sum -= candidates[i];</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="40-组合总和-II"><a href="#40-组合总和-II" class="headerlink" title="40. 组合总和 II"></a>40. 组合总和 II</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; path=<span class="keyword">new</span> ArrayList();</span><br><span class="line">     List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList();</span><br><span class="line">     <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">public</span>  List&lt;List&lt;Integer&gt;&gt; combinationSum2(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target)          &#123;</span><br><span class="line">        <span class="comment">//要去重，先排序</span></span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        recur(candidates,target,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span>[] candidates, <span class="keyword">int</span> target,<span class="keyword">int</span> start)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sum&gt;target)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum==target)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="comment">//去重操作！！！</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;start&amp;&amp;candidates[i]==candidates[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(candidates[i]);</span><br><span class="line">            sum+=candidates[i];</span><br><span class="line">            recur(candidates,target,i+<span class="number">1</span>);</span><br><span class="line">            sum-=candidates[i];</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="131-分割回文串"><a href="#131-分割回文串" class="headerlink" title="131. 分割回文串"></a>131. 分割回文串</h2><h3 id="双指针判断回文"><a href="#双指针判断回文" class="headerlink" title="双指针判断回文"></a>双指针判断回文</h3><p>会重复</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">        recur(s, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(String s, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt;= s.length()) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isPalindrome(s, start, i)) &#123;</span><br><span class="line">                path.add(s.substring(start, i + <span class="number">1</span>));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            recur(s, i + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start, j = end; i &lt; j; i++, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(i) != s.charAt(j)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="记忆法预处理"><a href="#记忆法预处理" class="headerlink" title="记忆法预处理"></a>记忆法预处理</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; path = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">List&lt;List&lt;String&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">boolean</span>[][] dp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; partition(String s) &#123;</span><br><span class="line">    dp = <span class="keyword">new</span> <span class="keyword">boolean</span>[s.length()][s.length()];</span><br><span class="line">    computeIsPalindrome(s);</span><br><span class="line">    recur(s, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeIsPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = s.length();</span><br><span class="line">    <span class="comment">// 边界1: 对角线，即单个字符，都是回文</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        dp[i][i] = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 边界2:对角线上侧紧邻斜线，即两个字符，判断是否相等，相等则为回文</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        dp[i][i + <span class="number">1</span>] = s.charAt(i) == s.charAt(i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从下到上，边界1和边界2确定了两条斜线，所以只需要从倒数第三行开始往上补全右上三角</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">3</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">2</span>; j &lt; n; j++) &#123;</span><br><span class="line">            dp[i][j] = dp[i + <span class="number">1</span>][j - <span class="number">1</span>] &amp;&amp; (s.charAt(i) == s.charAt(j));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(String s, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start &gt;= s.length()) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (dp[start][i]) &#123;</span><br><span class="line">            path.add(s.substring(start, i + <span class="number">1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        recur(s, i + <span class="number">1</span>);</span><br><span class="line">        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//简化</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">computeIsPalindromeSimplify</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=s.length()-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j=i;j&lt;s.length();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span> (j==i)&#123;</span><br><span class="line">                    dp[i][j]=<span class="keyword">true</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span> (j-i==<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i][j]=s.charAt(i)==s.charAt(j);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    dp[i][j]=s.charAt(i)==s.charAt(j)&amp;&amp;dp[i+<span class="number">1</span>][j-<span class="number">1</span>];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="93-复原-IP-地址"><a href="#93-复原-IP-地址" class="headerlink" title="93. 复原 IP 地址"></a>93. 复原 IP 地址</h2><h3 id="修改String"><a href="#修改String" class="headerlink" title="修改String"></a>修改String</h3><p>每次新建，效率差，思想理解更简单<br><strong>关键</strong><br>1、判断是否大于255<br>不要用ParseInt会越界，从个位依次*10，放大判断<br>2、java“原地”改变string：用substring截取拼接，底层实际生成好几个String<br>3、poingNum判断是否已分为4段，而不是判断start到字符串最后<br>4、剪枝思想：判断start&gt;end?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &gt; <span class="number">12</span> || s.length() &lt; <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        recur(s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> pointNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pointNum == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid(s, start, s.length() - <span class="number">1</span>)) &#123;</span><br><span class="line">                res.add(s);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isValid(s, start, i)) &#123;</span><br><span class="line">                s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + <span class="string">&quot;.&quot;</span> + s.substring(i + <span class="number">1</span>);</span><br><span class="line">                pointNum++;</span><br><span class="line">                recur(s, i + <span class="number">2</span>, pointNum);</span><br><span class="line">                pointNum--;</span><br><span class="line">                s = s.substring(<span class="number">0</span>, i + <span class="number">1</span>) + s.substring(i + <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (start &gt; end) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String substr = s.substring(start, end + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (substr.length() &gt; <span class="number">1</span> &amp;&amp; substr.charAt(<span class="number">0</span>) == <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = start; j &lt; end + <span class="number">1</span>; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (s.charAt(j) &gt; <span class="string">&#x27;9&#x27;</span> || s.charAt(j) &lt; <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            num = num * <span class="number">10</span> + (s.charAt(j) - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (num &gt; <span class="number">255</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不能parseInt，因为可能超过int范围</span></span><br><span class="line"><span class="comment">//        if (Integer.parseInt(substr)&gt;255)&#123;</span></span><br><span class="line"><span class="comment">//            return false;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    StringBuilder path = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">restoreIpAddresses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        restore(s, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> number)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">4</span> &amp;&amp; start == s.length()) &#123;</span><br><span class="line">            result.add(path.toString());</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果start等于s的长度但是ip段的数量不为4，或者ip段的数量为4但是start小于s的长度，则直接返回</span></span><br><span class="line">        <span class="comment">//如23492874937，path=2.3.4.9不符合需求</span></span><br><span class="line">        <span class="keyword">if</span> (number == <span class="number">4</span> || start == s.length()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//题目条件：s仅有数字组成，无需判断</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; s.length() &amp;&amp; i - start &lt; <span class="number">3</span></span><br><span class="line">                &amp;&amp; Integer.parseInt(s.substring(start, i + <span class="number">1</span>)) &gt;= <span class="number">0</span></span><br><span class="line">                &amp;&amp; Integer.parseInt(s.substring(start, i + <span class="number">1</span>)) &lt;= <span class="number">255</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i - start &gt; <span class="number">0</span> &amp;&amp; s.charAt(start) - <span class="string">&#x27;0&#x27;</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.append(s.substring(start, i + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">if</span> (number &lt; <span class="number">3</span>) &#123;</span><br><span class="line">                path.append(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            number++;</span><br><span class="line">            restore(s, i + <span class="number">1</span>, number);</span><br><span class="line">            number--;</span><br><span class="line">            <span class="comment">//起始start+number的意义：有number个点，当前分段是从start开始，start对应string</span></span><br><span class="line">            <span class="comment">//终止i+number的意义：有number个点，i对应string,+2:多了一个点，以及是开区间</span></span><br><span class="line">            path.delete(start + number, i + number + <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="78-子集"><a href="#78-子集" class="headerlink" title="78. 子集"></a>78. 子集</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList();</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsets(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    recur(nums, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//收集子集，要放在终止添加的上面，否则会漏掉自己</span></span><br><span class="line">    res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">    <span class="keyword">if</span> (start == nums.length) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++) &#123;</span><br><span class="line">        path.add(nums[i]);</span><br><span class="line">        recur(nums, i + <span class="number">1</span>);</span><br><span class="line">        path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="90-子集-II"><a href="#90-子集-II" class="headerlink" title="90. 子集 II"></a>90. 子集 II</h3><p>经典去重操作：先排序，然后i&gt;start&amp;&amp;nums[i]==nums[i-1]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; subsetsWithDup(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        recur(nums,<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">if</span> (nums.length==start)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=start;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;start&amp;&amp;nums[i]==nums[i-<span class="number">1</span>])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            recur(nums,i+<span class="number">1</span>);</span><br><span class="line">            path.remove(path.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="491-递增子序列"><a href="#491-递增子序列" class="headerlink" title="491. 递增子序列"></a>491. 递增子序列</h3><p><img src="https://img-blog.csdnimg.cn/9038885bf1ce41f7a194245197e5034f.png" alt="在这里插入图片描述"></p><p>同一父节点下该层结点不能重复使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Integer&gt; path = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; findSubsequences(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        recur(nums, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;Integer&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();<span class="comment">// 使用set来对本层元素进行去重</span></span><br><span class="line">        <span class="keyword">if</span> (path.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start == nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(nums[i]))&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!path.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;path.get(path.size()-<span class="number">1</span>))&#123;<span class="comment">//判断是否递增</span></span><br><span class="line">                  <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set.add(nums[i]);</span><br><span class="line">            recur(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//            set.remove(nums[i]);//无需删除</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h4><p>观察题目给定的数据范围，用Map和set的效率没有数组高。可以尽量用数组来实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur2</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        HashSet&lt;Integer&gt; set=new HashSet&lt;&gt;();// 使用set来对本层元素进行去重</span></span><br><span class="line">        <span class="keyword">int</span>[] set = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">201</span>];</span><br><span class="line">        <span class="keyword">if</span> (path.size()&gt;=<span class="number">2</span>)&#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (start == nums.length) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set[nums[i]+<span class="number">100</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!path.isEmpty())&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]&lt;path.get(path.size()-<span class="number">1</span>))&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set[nums[i]+<span class="number">100</span>]=<span class="number">1</span>;</span><br><span class="line">            recur(nums, i + <span class="number">1</span>);</span><br><span class="line">            path.remove(path.size() - <span class="number">1</span>);</span><br><span class="line"><span class="comment">//            set.remove(nums[i]);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46. 全排列"></a>46. 全排列</h2><p>不涉及查找，只涉及添加删除，用LinkedList<br>直接用List判断是否使用过，每次都需要遍历，效率差<br>直接用boolen数组，可直接判断O(1)</p><h3 id="used数组boolen"><a href="#used数组boolen" class="headerlink" title="used数组boolen"></a>used数组boolen</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">    LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permute(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        used=<span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">        recur(nums);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (nums.length == path.size()) &#123;</span><br><span class="line">            res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!used[i])&#123;</span><br><span class="line"><span class="comment">//            if (!path.contains(nums[i])) &#123;</span></span><br><span class="line">                used[i]=<span class="keyword">true</span>;</span><br><span class="line">                path.add(nums[i]);</span><br><span class="line">                recur(nums);</span><br><span class="line">                path.removeLast();</span><br><span class="line">                used[i]=<span class="keyword">false</span>;</span><br><span class="line"><span class="comment">//                path.remove(path.size()-1);</span></span><br><span class="line"><span class="comment">//                path.remove(nums[i]);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="47-全排列-II"><a href="#47-全排列-II" class="headerlink" title="47. 全排列 II"></a>47. 全排列 II</h3><p>去重<br>用set记录同层易理解<br>使用set去重的版本相对于used数组的版本效率都要低很多</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">LinkedList&lt;Integer&gt; path = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">boolean</span>[] used;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; permuteUnique(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    used = <span class="keyword">new</span> <span class="keyword">boolean</span>[nums.length];</span><br><span class="line">    recur(nums);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] set = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">21</span>];</span><br><span class="line">    <span class="keyword">if</span> (nums.length == path.size()) &#123;</span><br><span class="line">        res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(path));</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!used[i]&amp;&amp;set[nums[i]+<span class="number">10</span>]==<span class="number">0</span>) &#123;</span><br><span class="line">            used[i] = <span class="keyword">true</span>;</span><br><span class="line">            path.add(nums[i]);</span><br><span class="line">            set[nums[i]+<span class="number">10</span>]=<span class="number">1</span>;</span><br><span class="line">            recur(nums);</span><br><span class="line">            path.removeLast();</span><br><span class="line">            used[i] = <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排序后， used[i - 1]或者！used[i - 1]都可以，但是不可以没有<br>！used[i - 1]效率更高<br>如果要对树层中前一位去重，就用used[i - 1] == false，如果要对树枝前一位去重用used[i - 1] == true。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (i&gt;<span class="number">0</span>&amp;&amp;nums[i]==nums[i-<span class="number">1</span>]&amp;&amp; !used[i - <span class="number">1</span>])&#123;</span><br><span class="line">    <span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="332-重新安排行程"><a href="#332-重新安排行程" class="headerlink" title="332. 重新安排行程"></a>332. 重新安排行程</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">HashMap&lt;String, TreeMap&lt;String, Integer&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">findItinerary</span><span class="params">(List&lt;List&lt;String&gt;&gt; tickets)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (List&lt;String&gt; ticket : tickets) &#123;</span><br><span class="line">        TreeMap&lt;String, Integer&gt; temp;</span><br><span class="line">        <span class="keyword">if</span> (map.containsKey(ticket.get(<span class="number">0</span>)))&#123;</span><br><span class="line">            temp=map.get(ticket.get(<span class="number">0</span>));</span><br><span class="line">            temp.put(ticket.get(<span class="number">1</span>),temp.getOrDefault(ticket.get(<span class="number">1</span>),<span class="number">0</span>)+<span class="number">1</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            temp=<span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line">            temp.put(ticket.get(<span class="number">1</span>),<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(ticket.get(<span class="number">0</span>), temp);</span><br><span class="line">    &#125;</span><br><span class="line">    res.add(<span class="string">&quot;JFK&quot;</span>);</span><br><span class="line">    recur(<span class="string">&quot;JFK&quot;</span>,tickets.size());</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">recur</span><span class="params">(String last,<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (res.size()==num+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    TreeMap&lt;String, Integer&gt; result = map.get(last);</span><br><span class="line">    <span class="keyword">if</span> (result!=<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Integer&gt; entry : result.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">int</span> count=entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (count&gt;<span class="number">0</span>) &#123;</span><br><span class="line">                res.add(entry.getKey());</span><br><span class="line">                entry.setValue(count-<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">if</span> (recur(entry.getKey(), num)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                res.remove(res.size()-<span class="number">1</span>);</span><br><span class="line">                entry.setValue(count);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="51-N-皇后"><a href="#51-N-皇后" class="headerlink" title="51. N 皇后"></a>51. N 皇后</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;String&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">   <span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; solveNQueens(<span class="keyword">int</span> n) &#123;</span><br><span class="line">       <span class="keyword">char</span>[][] chessboard = <span class="keyword">new</span> <span class="keyword">char</span>[n][n];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span>[] c : chessboard) &#123;</span><br><span class="line">           Arrays.fill(c,<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       recur(n,<span class="number">0</span>,chessboard);</span><br><span class="line">       <span class="keyword">return</span> res;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> row, <span class="keyword">char</span>[][] chessboard)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (row==n)&#123;</span><br><span class="line">           res.add(Array2List(chessboard));</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; col++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (isValid(row,col,n,chessboard))&#123;</span><br><span class="line">               chessboard[row][col]=<span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">               recur(n,row+<span class="number">1</span>,chessboard);</span><br><span class="line">               chessboard[row][col]=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(<span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span> n, <span class="keyword">char</span>[][] chessboard)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//检查列</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; row; i++) &#123;</span><br><span class="line">           <span class="keyword">if</span> (chessboard[i][col]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//检查45度对角线</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i=row-<span class="number">1</span>,j=col-<span class="number">1</span>;i&gt;=<span class="number">0</span>&amp;&amp;j&gt;=<span class="number">0</span>;i--,j--)&#123;</span><br><span class="line">           <span class="keyword">if</span> (chessboard[i][j]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//检查135度对角线</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> i=row-<span class="number">1</span>,j=col+<span class="number">1</span>;i&gt;=<span class="number">0</span>&amp;&amp;j&lt;n;i--,j++)&#123;</span><br><span class="line">           <span class="keyword">if</span> (chessboard[i][j]==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> List&lt;String&gt; <span class="title">Array2List</span><span class="params">(<span class="keyword">char</span>[][] chessboard)</span> </span>&#123;</span><br><span class="line">       ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">char</span>[] chars : chessboard) &#123;</span><br><span class="line">           list.add(String.copyValueOf(chars));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> list;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h1 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h1><p>自底向上–回溯–后序遍历</p><h2 id="中-前-后序遍历"><a href="#中-前-后序遍历" class="headerlink" title="中/前/后序遍历"></a>中/前/后序遍历</h2><h3 id="递归遍历"><a href="#递归遍历" class="headerlink" title="递归遍历"></a>递归遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        traversal(root,res);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">traversal</span><span class="params">(TreeNode node, ArrayList&lt;Integer&gt; res)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(node==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        traversal(node.left,res);</span><br><span class="line">        res.add(node.val);</span><br><span class="line">        traversal(node.right,res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)<br>空间复杂度：O(n)</p><h3 id="迭代法"><a href="#迭代法" class="headerlink" title="迭代法"></a>迭代法</h3><h4 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">preorderTraversal2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()||root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                res.add(root.val);</span><br><span class="line">                deque.push(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = deque.poll();</span><br><span class="line">            root=root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()||root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                deque.offerFirst(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root= deque.pollFirst();</span><br><span class="line">            res.add(root.val);</span><br><span class="line">            root=root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">postorderTraversal1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        TreeNode prev = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (root != <span class="keyword">null</span> || !stack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (root.right == <span class="keyword">null</span> || root.right == prev) &#123;</span><br><span class="line">                res.add(root.val);</span><br><span class="line">                prev = root;</span><br><span class="line">                root = <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Morris-遍历"><a href="#Morris-遍历" class="headerlink" title="Morris 遍历"></a>Morris 遍历</h3><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/solution/leetcodesuan-fa-xiu-lian-dong-hua-yan-shi-xbian-2/">史上最全遍历二叉树详解</a><br>Morris遍历使用二叉树节点中大量指向null的指针<br><img src="https://img-blog.csdnimg.cn/1f8e50c90b30470aadd1484e5fa24933.png" alt="143b40666eebb8992b1ed7e6c35d4d5f3b93c6f20ab436e5c9ffa54032c392c0"></p><h4 id="前序遍历-1"><a href="#前序遍历-1" class="headerlink" title="前序遍历"></a>前序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preOrderMorris</span><span class="params">(TreeNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode cur1 = head;</span><br><span class="line">        TreeNode cur2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur2 = cur1.left;</span><br><span class="line">            <span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) &#123;</span><br><span class="line">                    cur2 = cur2.right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cur2.right = cur1;</span><br><span class="line">                    System.out.print(cur1.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">                    cur1 = cur1.left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cur2.right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.print(cur1.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            cur1 = cur1.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">inOrderMorris</span><span class="params">(TreeNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode cur1 = head;</span><br><span class="line">        TreeNode cur2 = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur2 = cur1.left;</span><br><span class="line">            <span class="comment">//构建连接线</span></span><br><span class="line">            <span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) &#123;</span><br><span class="line">                    cur2 = cur2.right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cur2.right = cur1;</span><br><span class="line">                    cur1 = cur1.left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cur2.right = <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(cur1.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            cur1 = cur1.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h4><p>右子树单链表逆序打印</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postOrderMorris</span><span class="params">(TreeNode head)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode cur1 = head;<span class="comment">//遍历树的指针变量</span></span><br><span class="line">        TreeNode cur2 = <span class="keyword">null</span>;<span class="comment">//当前子树的最右节点</span></span><br><span class="line">        <span class="keyword">while</span> (cur1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">            cur2 = cur1.left;</span><br><span class="line">            <span class="keyword">if</span> (cur2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">while</span> (cur2.right != <span class="keyword">null</span> &amp;&amp; cur2.right != cur1) &#123;</span><br><span class="line">                    cur2 = cur2.right;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (cur2.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cur2.right = cur1;</span><br><span class="line">                    cur1 = cur1.left;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    cur2.right = <span class="keyword">null</span>;</span><br><span class="line">                    postMorrisPrint(cur1.left);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            cur1 = cur1.right;</span><br><span class="line">        &#125;</span><br><span class="line">        postMorrisPrint(head);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">postMorrisPrint</span><span class="params">(TreeNode head)</span> </span>&#123;</span><br><span class="line">        TreeNode reverseList = postMorrisReverseList(head);</span><br><span class="line">        TreeNode cur = reverseList;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.print(cur.val + <span class="string">&quot; &quot;</span>);</span><br><span class="line">            cur = cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        postMorrisReverseList(reverseList);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//翻转单链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">postMorrisReverseList</span><span class="params">(TreeNode head)</span> </span>&#123;</span><br><span class="line">        TreeNode cur = head;</span><br><span class="line">        TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            TreeNode next = cur.right;</span><br><span class="line">            cur.right = pre;</span><br><span class="line">            pre = cur;</span><br><span class="line">            cur = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pre;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="颜色标记法"><a href="#颜色标记法" class="headerlink" title="颜色标记法"></a>颜色标记法</h3><p>速度慢<br><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/solution/yan-se-biao-ji-fa-yi-chong-tong-yong-qie-jian-ming/">颜色标记法-一种通用且简明的树遍历方法</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">inorderTraversal2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;TreeNode, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(root,<span class="number">1</span>);</span><br><span class="line">        Deque&lt;TreeNode&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        deque.offerFirst(root);</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty())&#123;</span><br><span class="line">            TreeNode treeNode = deque.pollFirst();</span><br><span class="line">            <span class="keyword">if</span> (map.get(treeNode)==<span class="number">1</span>) &#123;<span class="comment">//第一次访问</span></span><br><span class="line">                <span class="keyword">if</span>(treeNode.right!=<span class="keyword">null</span>)&#123; <span class="comment">//先右</span></span><br><span class="line">                    deque.offerFirst(treeNode.right);</span><br><span class="line">                    map.put(treeNode.right,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                deque.offerFirst(treeNode);</span><br><span class="line">                map.put(treeNode,<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">if</span> (treeNode.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    deque.offerFirst(treeNode.left); <span class="comment">//后左</span></span><br><span class="line">                    map.put(treeNode.left,<span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.add(treeNode.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="层序遍历"><a href="#层序遍历" class="headerlink" title="层序遍历"></a>层序遍历</h2><h3 id="102-二叉树的层序遍历"><a href="#102-二叉树的层序遍历" class="headerlink" title="102. 二叉树的层序遍历"></a>102. 二叉树的层序遍历</h3><blockquote><p>ArrayDeque是 Deque的实现类，可以作为栈来使用，效率高于 Stack；也可以作为队列来使用，效率高于 LinkedList。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;(<span class="keyword">new</span> ArrayList&lt;&gt;());</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> n=queue.size();</span><br><span class="line">            List&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode treeNode = queue.poll();</span><br><span class="line">                level.add(treeNode.val);</span><br><span class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(treeNode.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (treeNode.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(treeNode.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(level);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="№107-二叉树的层次遍历-II"><a href="#№107-二叉树的层次遍历-II" class="headerlink" title="№107.二叉树的层次遍历 II"></a>№107.二叉树的层次遍历 II</h3><p>102最后逆置一下<br>Collections.reverse(res);</p><h3 id="№199-二叉树的右视图"><a href="#№199-二叉树的右视图" class="headerlink" title="№199.二叉树的右视图"></a>№199.二叉树的右视图</h3><p>102中间判断一下是否是最后一个 （略）</p><h3 id="№637-二叉树的层平均值"><a href="#№637-二叉树的层平均值" class="headerlink" title="№637. 二叉树的层平均值"></a>№637. 二叉树的层平均值</h3><h3 id="№515-在每个树行中找最大值"><a href="#№515-在每个树行中找最大值" class="headerlink" title="№515.在每个树行中找最大值"></a>№515.在每个树行中找最大值</h3><h3 id="№429-N-叉树的层序遍历"><a href="#№429-N-叉树的层序遍历" class="headerlink" title="№429. N 叉树的层序遍历"></a>№429. N 叉树的层序遍历</h3><p>将left,right改为children （略）</p><h3 id="Easy-104-二叉树的最大深度"><a href="#Easy-104-二叉树的最大深度" class="headerlink" title="Easy 104.二叉树的最大深度"></a>Easy 104.二叉树的最大深度</h3><h4 id="递归-1"><a href="#递归-1" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftHeight=maxDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightHeight=maxDepth(root.right);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftHeight,rightHeight)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="层次"><a href="#层次" class="headerlink" title="层次"></a>层次</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            queue.add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">int</span> n = queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode treeNode = queue.poll();</span><br><span class="line">                <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(treeNode.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(treeNode.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="559-N-叉树的最大深度"><a href="#559-N-叉树的最大深度" class="headerlink" title="559. N 叉树的最大深度"></a>559. N 叉树的最大深度</h4><h5 id="递归-2"><a href="#递归-2" class="headerlink" title="递归"></a>递归</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth</span><span class="params">(NodeC root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> maxlen=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (NodeC child : root.children) &#123;</span><br><span class="line">        <span class="keyword">int</span> curlen=maxDepth(child);</span><br><span class="line">        <span class="keyword">if</span> (curlen&gt;maxlen)&#123;</span><br><span class="line">            maxlen=curlen;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> maxlen+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="广度"><a href="#广度" class="headerlink" title="广度"></a>广度</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maxDepth2</span><span class="params">(NodeC root)</span> </span>&#123;</span><br><span class="line">        Queue&lt;NodeC&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.offer(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            max++;</span><br><span class="line">            <span class="keyword">int</span> n=queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                NodeC nodeC = queue.poll();</span><br><span class="line">                <span class="keyword">for</span> (NodeC child : nodeC.children) &#123;</span><br><span class="line">                    queue.offer(child);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> max;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="111-二叉树的最小深度"><a href="#111-二叉树的最小深度" class="headerlink" title="111.二叉树的最小深度"></a>111.二叉树的最小深度</h3><h4 id="层次遍历-易理解"><a href="#层次遍历-易理解" class="headerlink" title="层次遍历(易理解)*"></a>层次遍历(易理解)*</h4><p>当左右孩子都为空，则说明到达了最低点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            queue.add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> depth=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            depth++;</span><br><span class="line">            <span class="keyword">int</span> n = queue.size();</span><br><span class="line">            List&lt;Integer&gt; level = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode treeNode = queue.poll();</span><br><span class="line">                level.add(treeNode.val);</span><br><span class="line">                <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(treeNode.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    queue.add(treeNode.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(treeNode.left==<span class="keyword">null</span>&amp;&amp;treeNode.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">return</span> depth;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> depth;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h4><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/solution/li-jie-zhe-dao-ti-de-jie-shu-tiao-jian-by-user7208/">二叉树的最小深度-理解递归结束条件</a><br>叶子节点的定义是左孩子和右孩子都为 null 时叫做叶子节点<br>当 root 节点左右孩子都为空时，<mark>返回 1</mark><br>当 root 节点左右孩子有一个为空时，返回<mark>不为空的孩子节点的深度</mark><br>当 root 节点左右孩子都不为空时，返回左右孩子较小深度的节点值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">minDepth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不判断也不错，但是可以作为剪枝条件，加快速度</span></span><br><span class="line">        <span class="keyword">if</span> (root.left==<span class="keyword">null</span>&amp;&amp; root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> leftlen=minDepth(root.left);</span><br><span class="line">        <span class="keyword">int</span> rightlen=minDepth(root.right);</span><br><span class="line">        <span class="keyword">if</span> (root.left==<span class="keyword">null</span>||root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> leftlen+rightlen+<span class="number">1</span>;<span class="comment">//必有一个为0，返回不为空的分支</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.min(leftlen,rightlen)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>理解难，效率也差</p><p>其他都是递归比层次快，都是O(n)，看数据</p><h3 id="117-填充每个节点的下一个右侧节点指针-II"><a href="#117-填充每个节点的下一个右侧节点指针-II" class="headerlink" title="117. 填充每个节点的下一个右侧节点指针 II"></a>117. 填充每个节点的下一个右侧节点指针 II</h3><h4 id="层次遍历"><a href="#层次遍历" class="headerlink" title="层次遍历"></a>层次遍历</h4><h4 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h4><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node-ii/solution/bfsjie-jue-zui-hao-de-ji-bai-liao-100de-yong-hu-by/">FS解决（最好的击败了100%的用户）</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        Node cur=root;</span><br><span class="line">        Node dummyNode = <span class="keyword">new</span> Node();</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            dummyNode.next=<span class="keyword">null</span>;</span><br><span class="line">            Node pre=dummyNode;</span><br><span class="line">            <span class="keyword">while</span> (cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(cur.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    pre.next=cur.left;</span><br><span class="line">                    pre=pre.next;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(cur.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    pre.next=cur.right;</span><br><span class="line">                    pre=pre.next;</span><br><span class="line">                &#125;</span><br><span class="line">                cur=cur.next;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=dummyNode.next;<span class="comment">//最左结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="116-填充每个节点的下一个右侧节点指针"><a href="#116-填充每个节点的下一个右侧节点指针" class="headerlink" title="116. 填充每个节点的下一个右侧节点指针"></a>116. 填充每个节点的下一个右侧节点指针</h3><h4 id="层次遍历-1"><a href="#层次遍历-1" class="headerlink" title="层次遍历"></a>层次遍历</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        Queue&lt;Node&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> n=queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                Node treeNode = queue.poll();</span><br><span class="line">                <span class="keyword">if</span>(i&lt;n-<span class="number">1</span>)&#123;</span><br><span class="line">                    treeNode.next=queue.peek();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(treeNode.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (treeNode.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(treeNode.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N)<br>空间复杂度：O(N)。这是一棵完美二叉树，它的最后一个层级包含 N/2 个节点。广度优先遍历的复杂度取决于一个层级上的最大元素数量。这种情况下空间复杂度为 O(N)。</p><h4 id="使用已建立的-next-指针"><a href="#使用已建立的-next-指针" class="headerlink" title="使用已建立的 next 指针"></a>使用已建立的 next 指针</h4><p><a href="https://leetcode.cn/problems/populating-next-right-pointers-in-each-node/solution/tian-chong-mei-ge-jie-dian-de-xia-yi-ge-you-ce-2-4/">解析</a><br>第一种是当前节点的左右子树<br>第二种是不同父节点的连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Node <span class="title">connect</span><span class="params">(Node root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        Node leftmost=root;</span><br><span class="line">        <span class="keyword">while</span> (leftmost.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            Node start=leftmost;</span><br><span class="line">            <span class="keyword">while</span> (start!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//第一种连接</span></span><br><span class="line">                start.left.next=start.right;</span><br><span class="line">                <span class="comment">//第二种连接</span></span><br><span class="line">                <span class="keyword">if</span> (start.next!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    start.right.next=start.next.left;</span><br><span class="line">                &#125;</span><br><span class="line">                start=start.next;</span><br><span class="line">            &#125;</span><br><span class="line">            leftmost=leftmost.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N)<br>空间复杂度：O(1)</p><h4 id="链表-1"><a href="#链表-1" class="headerlink" title="链表"></a>链表</h4><p>借鉴117的链表方法，效率同样高，空间复杂度为O(1)。可通用。</p><h2 id="226-翻转二叉树"><a href="#226-翻转二叉树" class="headerlink" title="226. 翻转二叉树"></a>226. 翻转二叉树</h2><h3 id="深度遍历–递归"><a href="#深度遍历–递归" class="headerlink" title="深度遍历–递归"></a>深度遍历–递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">invertTree</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        swap(root);</span><br><span class="line">        invertTree(root.left);</span><br><span class="line">        invertTree(root.right);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="广度遍历–层次遍历"><a href="#广度遍历–层次遍历" class="headerlink" title="广度遍历–层次遍历"></a>广度遍历–层次遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">invertTree1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.add(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> n=queue.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode treeNode = queue.poll();</span><br><span class="line">                swap(treeNode);</span><br><span class="line">                <span class="keyword">if</span>(treeNode.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(treeNode.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(treeNode.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    queue.add(treeNode.right);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        TreeNode tmp =root.left;</span><br><span class="line">        root.left=root.right;</span><br><span class="line">        root.right=tmp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="617-合并二叉树"><a href="#617-合并二叉树" class="headerlink" title="617. 合并二叉树"></a>617. 合并二叉树</h2><h3 id="深度-1"><a href="#深度-1" class="headerlink" title="深度"></a>深度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">mergeTrees</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> travesal(root1,root2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TreeNode <span class="title">travesal</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root1==<span class="keyword">null</span>&amp;&amp;root2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root1;</span><br><span class="line">        &#125;</span><br><span class="line">        root1.val=root1.val+root2.val;</span><br><span class="line"></span><br><span class="line">        root1.left=travesal(root1.left,root2.left);</span><br><span class="line">        root1.right=travesal(root1.right,root2.right);</span><br><span class="line">        <span class="keyword">return</span> root1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="广度-1"><a href="#广度-1" class="headerlink" title="广度"></a>广度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">mergeTrees2</span><span class="params">(TreeNode root1, TreeNode root2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root1==<span class="keyword">null</span>&amp;&amp;root2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root1==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root2;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root2==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root1;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque1=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Deque&lt;TreeNode&gt; deque2=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        deque1.offer(root1);</span><br><span class="line">        deque2.offer(root2);</span><br><span class="line">        <span class="keyword">while</span> (!deque1.isEmpty())&#123;</span><br><span class="line">            TreeNode t1 = deque1.poll();</span><br><span class="line">            TreeNode t2 = deque2.poll();</span><br><span class="line">            t1.val=t1.val+t2.val;</span><br><span class="line">            <span class="keyword">if</span> (t1.left!=<span class="keyword">null</span>&amp;&amp;t2.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                deque1.offer(t1.left);</span><br><span class="line">                deque2.offer(t2.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t1.right!=<span class="keyword">null</span>&amp;&amp;t2.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                deque1.offer(t1.right);</span><br><span class="line">                deque2.offer(t2.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t1.left==<span class="keyword">null</span>)&#123;</span><br><span class="line">                t1.left=t2.left;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (t1.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                t1.right=t2.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root1;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="101-对称二叉树"><a href="#101-对称二叉树" class="headerlink" title="101. 对称二叉树"></a>101. 对称二叉树</h2><ul><li>注意都从根节点的左右子树开始</li><li>递归的终止条件<h3 id="递归-3"><a href="#递归-3" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSymmetric1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(root.left,root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode left, TreeNode right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="keyword">null</span> &amp;&amp; right==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;<span class="comment">//终止条件为true：左右都为空</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(left==<span class="keyword">null</span>||right==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left.val!=right.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(left.left,right.right)&amp;&amp;dfs(left.right,right.left);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSymmetric</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//根节点为空，或者左右子树都为空，都是true</span></span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span> || (root.left==<span class="keyword">null</span> &amp;&amp; root.right==<span class="keyword">null</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Deque&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.add(root.left);</span><br><span class="line">        queue.add(root.right);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            TreeNode left = queue.poll();</span><br><span class="line">            TreeNode right = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (left==<span class="keyword">null</span>&amp;&amp;right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left==<span class="keyword">null</span>||right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (left.val!=right.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            queue.add(left.left);</span><br><span class="line">            queue.add(right.right);</span><br><span class="line">            queue.add(left.right);</span><br><span class="line">            queue.add(right.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="100-相同的树"><a href="#100-相同的树" class="headerlink" title="100. 相同的树"></a>100. 相同的树</h3><h4 id="迭代-1"><a href="#迭代-1" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isSameTree</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        deque.add(p);</span><br><span class="line">        deque.add(q);</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty())&#123;</span><br><span class="line">            TreeNode pnode = deque.poll();</span><br><span class="line">            TreeNode qnode = deque.poll();</span><br><span class="line">            <span class="keyword">if</span>(pnode==<span class="keyword">null</span>&amp;&amp;qnode==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pnode==<span class="keyword">null</span>||qnode==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(pnode.val!=qnode.val)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            deque.add(pnode.left);</span><br><span class="line">            deque.add(qnode.left);</span><br><span class="line">            deque.add(pnode.right);</span><br><span class="line">            deque.add(qnode.right);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="递归-4"><a href="#递归-4" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSameTree1</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(p,q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (p==<span class="keyword">null</span>&amp;&amp;q==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p==<span class="keyword">null</span>||q==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (p.val!=q.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dfs(p.left,q.left)&amp;&amp;dfs(p.right,q.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="572-另一棵树的子树"><a href="#572-另一棵树的子树" class="headerlink" title="? 572. 另一棵树的子树"></a>? 572. 另一棵树的子树</h2><h3 id="递归-5"><a href="#递归-5" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSubtree</span><span class="params">(TreeNode root, TreeNode subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> dfs(root,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">dfs</span><span class="params">(TreeNode root, TreeNode subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">//走到底也没找到可匹配结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//check比较 dfs找不同的初始比较结点</span></span><br><span class="line">        <span class="keyword">return</span> check(root,subRoot)||dfs(root.left,subRoot)||dfs(root.right,subRoot);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">check</span><span class="params">(TreeNode root, TreeNode subRoot)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(root==<span class="keyword">null</span>&amp;&amp;subRoot==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>||subRoot==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val!=subRoot.val)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> check(root.left,subRoot.left)&amp;&amp;check(root.right,subRoot.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="串匹配"><a href="#串匹配" class="headerlink" title="串匹配"></a>串匹配</h3><a href="https://leetcode.cn/problems/subtree-of-another-tree/solution/ling-yi-ge-shu-de-zi-shu-by-leetcode-solution/">其他方法</a></li></ul><h2 id="222-完全二叉树的节点个数"><a href="#222-完全二叉树的节点个数" class="headerlink" title="222. 完全二叉树的节点个数"></a>222. 完全二叉树的节点个数</h2><p>递归和广度遍历省，普适方法，没有利用完全二叉树的特点</p><h3 id="计算深度-位运算"><a href="#计算深度-位运算" class="headerlink" title="计算深度+位运算"></a>计算深度+位运算</h3><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/solution/chang-gui-jie-fa-he-ji-bai-100de-javajie-fa-by-xia/">常规解法和击败100%的Java解法</a><br><img src="https://img-blog.csdnimg.cn/f12b58a7163e4b88aa231e96bf38a94c.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countNodes</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left=countLevels(root.left);</span><br><span class="line">        <span class="keyword">int</span> right=countLevels(root.right);</span><br><span class="line">        <span class="keyword">if</span> (left==right)&#123;</span><br><span class="line">            <span class="comment">//左子树满</span></span><br><span class="line">            <span class="keyword">return</span> countNodes(root.right)+(<span class="number">1</span>&lt;&lt;left);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//左子树没满，右子树满了</span></span><br><span class="line">            <span class="keyword">return</span> countNodes(root.left)+(<span class="number">1</span>&lt;&lt;right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">countLevels</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> len=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            root=root.left;<span class="comment">//最左子树统计长度</span></span><br><span class="line">            len++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> len;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(logN*logN)</p><h3 id="二分查找-位运算"><a href="#二分查找-位运算" class="headerlink" title="?二分查找 + 位运算"></a>?二分查找 + 位运算</h3><p>官解，不想看…</p><h2 id="110-平衡二叉树"><a href="#110-平衡二叉树" class="headerlink" title="110. 平衡二叉树"></a>110. 平衡二叉树</h2><p><a href="https://leetcode.cn/problems/balanced-binary-tree/solution/balanced-binary-tree-di-gui-fang-fa-by-jin40789108/">平衡二叉树（从底至顶，从顶至底）</a><br>二叉树节点的深度：指从根节点到该节点的最长简单路径边的条数。<br>二叉树节点的高度：指从该节点到叶子节点的最长简单路径边的条数。</p><h3 id="从顶至底（暴力法）"><a href="#从顶至底（暴力法）" class="headerlink" title="从顶至底（暴力法）"></a>从顶至底（暴力法）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(depth(root.left)-depth(root.right))&lt;<span class="number">2</span>&amp;&amp;isBalanced(root.left)&amp;&amp;isBalanced(root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">depth</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.max(depth(root.left),depth(root.right))+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度 O(Nlog_2 N)<br>空间复杂度 O(N)</p><h3 id="从底至顶（提前阻断）"><a href="#从底至顶（提前阻断）" class="headerlink" title="从底至顶（提前阻断）"></a>从底至顶（提前阻断）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isBalanced</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> check(root)!=-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">check</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> left=check(root.left);</span><br><span class="line">        <span class="keyword">if</span> (left==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> right=check(root.right);</span><br><span class="line">        <span class="keyword">if</span> (right==-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Math.abs(left-right)&lt;<span class="number">2</span>?Math.max(left,right)+<span class="number">1</span>:-<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度 O(N)<br>空间复杂度 O(N)</p><h2 id="257-二叉树的所有路径"><a href="#257-二叉树的所有路径" class="headerlink" title="257. 二叉树的所有路径"></a>257. 二叉树的所有路径</h2><h3 id="深度遍历"><a href="#深度遍历" class="headerlink" title="深度遍历"></a>深度遍历</h3><p>终止条件：叶子结点，左右子树都为空<br>每轮判断是否叶子结点，再加入到字符串</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">binaryTreePaths</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        recur(root,<span class="string">&quot;&quot;</span>,list);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">recur</span><span class="params">(TreeNode root,String path, List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder(path);</span><br><span class="line">            stringBuilder.append(root.val);</span><br><span class="line">            <span class="keyword">if</span> (root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(stringBuilder.toString());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                stringBuilder.append(<span class="string">&quot;-&gt;&quot;</span>);</span><br><span class="line">                recur(root.left,stringBuilder.toString(),list);</span><br><span class="line">                recur(root.right,stringBuilder.toString(),list);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N^2)<br>空间复杂度：O(N^2)</p><h3 id="广度遍历"><a href="#广度遍历" class="headerlink" title="广度遍历"></a>广度遍历</h3><p>每轮将左右子树的结点加入到字符串中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">binaryTreePaths2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list =<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        Queue&lt;TreeNode&gt; nodeQueue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        Queue&lt;String&gt; pathQueue = <span class="keyword">new</span> LinkedList&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            nodeQueue.offer(root);</span><br><span class="line">            pathQueue.offer(String.valueOf(root.val));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!nodeQueue.isEmpty())&#123;</span><br><span class="line">            TreeNode treeNode = nodeQueue.poll();</span><br><span class="line">            String path = pathQueue.poll();</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left==<span class="keyword">null</span>&amp;&amp;treeNode.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                list.add(path);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (treeNode.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    nodeQueue.offer(treeNode.left);</span><br><span class="line">                    pathQueue.offer(<span class="keyword">new</span> StringBuilder(path).append(<span class="string">&quot;-&gt;&quot;</span>).append(treeNode.left.val).toString());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (treeNode.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    nodeQueue.offer(treeNode.right);</span><br><span class="line">                    pathQueue.offer(<span class="keyword">new</span> StringBuilder(path).append(<span class="string">&quot;-&gt;&quot;</span>).append(treeNode.right.val).toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N^2)<br>空间复杂度：O(N^2)</p><h2 id="404-左叶子之和"><a href="#404-左叶子之和" class="headerlink" title="404. 左叶子之和"></a>404. 左叶子之和</h2><h3 id="深度遍历-1"><a href="#深度遍历-1" class="headerlink" title="深度遍历"></a>深度遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//法一：每次判断当前结点的左节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> recur2(root);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">recur2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (root.left!=<span class="keyword">null</span>&amp;&amp;root.left.left==<span class="keyword">null</span>&amp;&amp;root.left.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> root.left.val+recur2(root.right);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recur2(root.left)+recur2(root.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//法二：做标记，每次判断当前结点并将左节点加入总sum</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> recur(root,<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">recur</span><span class="params">(TreeNode root,<span class="keyword">boolean</span> add)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (add&amp;&amp;root.left==<span class="keyword">null</span>&amp;&amp;root.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> root.val;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> recur(root.left,<span class="keyword">true</span>)+recur(root.right,<span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广度遍历-1"><a href="#广度遍历-1" class="headerlink" title="广度遍历"></a>广度遍历</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sumOfLeftLeaves</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            queue.offer(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sum=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty())&#123;</span><br><span class="line">            TreeNode treeNode = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left!=<span class="keyword">null</span>&amp;&amp;treeNode.left.left==<span class="keyword">null</span>&amp;&amp;treeNode.left.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                sum+=treeNode.left.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.offer(treeNode.left);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                queue.offer(treeNode.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="513-找树左下角的值"><a href="#513-找树左下角的值" class="headerlink" title="513. 找树左下角的值"></a>513. 找树左下角的值</h2><h3 id="层次遍历-2"><a href="#层次遍历-2" class="headerlink" title="层次遍历"></a>层次遍历</h3><h4 id="自右向左"><a href="#自右向左" class="headerlink" title="自右向左"></a>自右向左</h4><p>先把它的非空右子节点放入队列，然后再把它的非空左子节点放入队列，这样才能保证从右到左遍历每一层的节点。最后一个节点的值就是最底层最左边节点的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">findBottomLeftValue2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        Queue&lt;TreeNode&gt; queue = <span class="keyword">new</span> ArrayDeque&lt;TreeNode&gt;();</span><br><span class="line">        queue.offer(root);</span><br><span class="line">        <span class="keyword">while</span> (!queue.isEmpty()) &#123;</span><br><span class="line">            TreeNode p = queue.poll();</span><br><span class="line">            <span class="keyword">if</span> (p.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(p.right);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (p.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                queue.offer(p.left);</span><br><span class="line">            &#125;</span><br><span class="line">            ret = p.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="自左向右"><a href="#自左向右" class="headerlink" title="自左向右"></a>自左向右</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findBottomLeftValue1</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            deque.offer(root);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> res=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">int</span> n=deque.size();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">                TreeNode treeNode = deque.poll();</span><br><span class="line">                <span class="keyword">if</span> (treeNode.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    deque.offer(treeNode.left);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (treeNode.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                    deque.offer(treeNode.right);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i==<span class="number">0</span>)&#123;</span><br><span class="line">                    res=treeNode.val;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="深度遍历-2"><a href="#深度遍历-2" class="headerlink" title="深度遍历"></a>深度遍历</h3><p>先遍历左子树，然后再遍历右子树，所以对同一高度的所有节点，最左节点肯定是最先被遍历到的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> curheight=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> curval=-<span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findBottomLeftValue</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    dfs(root,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> curval;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">    height++;</span><br><span class="line">    dfs(root.left,height);</span><br><span class="line">    dfs(root.right,height);</span><br><span class="line">    <span class="keyword">if</span>(height&gt;curheight)&#123;</span><br><span class="line">        curheight=height;</span><br><span class="line">        curval=root.val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="112-路径总和"><a href="#112-路径总和" class="headerlink" title="112. 路径总和"></a>112. 路径总和</h2><h3 id="深度-2"><a href="#深度-2" class="headerlink" title="深度"></a>深度</h3><p>递归先按逻辑写，再简化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum1</span><span class="params">(TreeNode root, <span class="keyword">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recur(root, targetSum, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">recur</span><span class="params">(TreeNode root, <span class="keyword">int</span> targetSum, <span class="keyword">int</span> curSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        curSum += root.val;</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> curSum == targetSum;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> recur(root.left, targetSum, curSum) || recur(root.right, targetSum, curSum);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="广度-2"><a href="#广度-2" class="headerlink" title="广度"></a>广度</h3><p>两个队列，一个存结点，一个存总和</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasPathSum</span><span class="params">(TreeNode root, <span class="keyword">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; dequeNode=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; dequeSum=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            dequeNode.offer(root);</span><br><span class="line">            dequeSum.offer(root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!dequeNode.isEmpty())&#123;</span><br><span class="line">            TreeNode treeNode = dequeNode.poll();</span><br><span class="line">            Integer tmpSum = dequeSum.poll();</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left==<span class="keyword">null</span>&amp;&amp;treeNode.right==<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (tmpSum==targetSum)&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(treeNode.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                dequeNode.offer(treeNode.left);</span><br><span class="line">                dequeSum.offer(tmpSum+treeNode.left.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(treeNode.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                dequeNode.offer(treeNode.right);</span><br><span class="line">                dequeSum.offer(tmpSum+treeNode.right.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="113-路径总和-II"><a href="#113-路径总和-II" class="headerlink" title="113. 路径总和 II"></a>113. 路径总和 II</h2><h3 id="广度-3"><a href="#广度-3" class="headerlink" title="广度"></a>广度</h3><p>使用哈希表记录树中的每一个节点的父节点。每次找到一个满足条件的节点，我们就从该节点出发不断向父节点迭代，即可还原出从根节点到当前节点的路径。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">List&lt;List&lt;Integer&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Map&lt;TreeNode, TreeNode&gt; path = <span class="keyword">new</span> HashMap&lt;TreeNode, TreeNode&gt;();</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> targetSum) &#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; dequeNode = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        Deque&lt;Integer&gt; dequeSum = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            dequeNode.offer(root);</span><br><span class="line">            dequeSum.offer(root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (!dequeNode.isEmpty()) &#123;</span><br><span class="line">            TreeNode treeNode = dequeNode.poll();</span><br><span class="line">            Integer sum = dequeSum.poll();</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left == <span class="keyword">null</span> &amp;&amp; treeNode.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sum == targetSum) &#123;</span><br><span class="line">                    getPath(treeNode);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                dequeNode.offer(treeNode.left);</span><br><span class="line">                path.put(treeNode.left, treeNode);</span><br><span class="line">                dequeSum.offer(sum + treeNode.left.val);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (treeNode.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                dequeNode.offer(treeNode.right);</span><br><span class="line">                path.put(treeNode.right, treeNode);</span><br><span class="line">                dequeSum.offer(sum + treeNode.right.val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getPath</span><span class="params">(TreeNode treeNode)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (treeNode != <span class="keyword">null</span>) &#123;</span><br><span class="line">            arrayList.add(treeNode.val);</span><br><span class="line">            treeNode = path.get(treeNode);</span><br><span class="line">        &#125;</span><br><span class="line">        Collections.reverse(arrayList);</span><br><span class="line">        list.add(arrayList);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="深度-3"><a href="#深度-3" class="headerlink" title="深度"></a>深度</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">    List&lt;List&lt;Integer&gt;&gt; res = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    List&lt;Integer&gt; tmp = <span class="keyword">new</span> ArrayList&lt;&gt;(); <span class="comment">//理解为一个栈</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; pathSum(TreeNode root, <span class="keyword">int</span> targetSum) &#123;</span><br><span class="line">        recur(root, targetSum);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(TreeNode root, <span class="keyword">int</span> targetSum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        targetSum -= root.val;</span><br><span class="line">        tmp.add(root.val);</span><br><span class="line">        <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (targetSum == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//不能直接添加tmp:你把list添加进去，你后续修改list的话，因为res里面那个list和你修改的那个list指向的是同一块内存区域，所以你对list进行修改，也会把res里的结果给修改掉</span></span><br><span class="line">                res.add(<span class="keyword">new</span> ArrayList&lt;&gt;(tmp));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        recur(root.left, targetSum);</span><br><span class="line">        recur(root.right, targetSum);</span><br><span class="line">        tmp.remove(tmp.size()-<span class="number">1</span>); <span class="comment">//移除队尾元素，相当于出栈</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="106-从中序与后序遍历序列构造二叉树"><a href="#106-从中序与后序遍历序列构造二叉树" class="headerlink" title="106. 从中序与后序遍历序列构造二叉树"></a>106. 从中序与后序遍历序列构造二叉树</h2><p><a href="https://programmercarl.com/0106.%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91.html#%E6%80%9D%E8%B7%AF">代码随想录</a><br><img src="https://img-blog.csdnimg.cn/c21940d3695b41aa81bbde072232d6b5.png" alt="20210203154249860"><br>分割时保持一致，全部左闭右闭<br>先分割中序，再分割后序，中序分割后数组的长度就是后序分割时的条件</p><h3 id="新建数组保存"><a href="#新建数组保存" class="headerlink" title="新建数组保存"></a>新建数组保存</h3><p>效率太差</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">buildTree2</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder.length==<span class="number">0</span>||postorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode();</span><br><span class="line">        root.val=postorder[postorder.length-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (postorder.length==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分割中序</span></span><br><span class="line">        <span class="keyword">int</span> leftLen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;inorder.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i]==root.val)&#123;</span><br><span class="line">                leftLen=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] inorderLeft=<span class="keyword">new</span> <span class="keyword">int</span>[leftLen];</span><br><span class="line">        <span class="keyword">int</span>[] inorderRight=<span class="keyword">new</span> <span class="keyword">int</span>[inorder.length-leftLen-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;inorder.length;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; leftLen) &#123;</span><br><span class="line">                inorderLeft[i] = inorder[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i &gt; leftLen) &#123;</span><br><span class="line">                inorderRight[index++] = inorder[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//分割右后序</span></span><br><span class="line">        <span class="keyword">int</span>[] postorderLeft=<span class="keyword">new</span> <span class="keyword">int</span>[leftLen];</span><br><span class="line">        <span class="keyword">int</span>[] postorderRight=<span class="keyword">new</span> <span class="keyword">int</span>[inorder.length-leftLen-<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> index1=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;postorder.length-<span class="number">1</span>;i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; leftLen) &#123;</span><br><span class="line">                postorderLeft[i] = postorder[i];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                postorderRight[index1++] = postorder[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        root.left=buildTree(inorderLeft,postorderLeft);</span><br><span class="line">        root.right=buildTree(inorderRight,postorderRight);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="利用索引，不新建数组"><a href="#利用索引，不新建数组" class="headerlink" title="利用索引，不新建数组"></a>利用索引，不新建数组</h3><p>注意索引的左右边界<br><img src="https://img-blog.csdnimg.cn/7d86d3aca6594333937c05a94748df04.png"><br><img src="https://img-blog.csdnimg.cn/57ee1d3f47d944d7b96163ad3ae31f3d.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inorder.length==<span class="number">0</span>||postorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> traversal(inorder,<span class="number">0</span>,inorder.length-<span class="number">1</span>,postorder,<span class="number">0</span>,postorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">traversal</span><span class="params">(<span class="keyword">int</span>[] inorder,<span class="keyword">int</span> inleft,<span class="keyword">int</span> inright ,<span class="keyword">int</span>[] postorder,<span class="keyword">int</span> postleft,<span class="keyword">int</span> postright)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (inright&lt;inleft||postright&lt;postleft)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode();</span><br><span class="line">        root.val=postorder[postright];</span><br><span class="line">        <span class="keyword">if</span> (inright-inleft==<span class="number">0</span>||postright-postleft==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//分割中序</span></span><br><span class="line">        <span class="keyword">int</span> leftLen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=inleft;i&lt;=inright;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i]==root.val)&#123;</span><br><span class="line">                leftLen=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        root.left=traversal(inorder,inleft,leftLen-<span class="number">1</span>,postorder,postleft,postleft+leftLen-inleft-<span class="number">1</span>);</span><br><span class="line">        root.right=traversal(inorder,leftLen+<span class="number">1</span>,inright,postorder,postleft+leftLen-inleft,postright-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="迭代-2"><a href="#迭代-2" class="headerlink" title="迭代"></a>迭代</h3><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/solution/cong-zhong-xu-yu-hou-xu-bian-li-xu-lie-gou-zao-14/">LeetCode-Solution</a><br>如果将中序遍历反序，则得到反向的中序遍历，即每次遍历右孩子，再遍历根节点，最后遍历左孩子。<br>如果将后序遍历反序，则得到反向的前序遍历，即每次遍历根节点，再遍历右孩子，最后遍历左孩子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">buildTree1</span><span class="params">(<span class="keyword">int</span>[] inorder, <span class="keyword">int</span>[] postorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (postorder == <span class="keyword">null</span> || postorder.length == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(postorder[postorder.length - <span class="number">1</span>]);</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;TreeNode&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line">        <span class="keyword">int</span> inorderIndex = inorder.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = postorder.length - <span class="number">2</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            <span class="keyword">int</span> postorderVal = postorder[i];</span><br><span class="line">            TreeNode node = stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (node.val != inorder[inorderIndex]) &#123;</span><br><span class="line">                node.right = <span class="keyword">new</span> TreeNode(postorderVal);</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; stack.peek().val == inorder[inorderIndex]) &#123;</span><br><span class="line">                    node = stack.pop();</span><br><span class="line">                    inorderIndex--;</span><br><span class="line">                &#125;</span><br><span class="line">                node.left = <span class="keyword">new</span> TreeNode(postorderVal);</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105. 从前序与中序遍历序列构造二叉树"></a>105. 从前序与中序遍历序列构造二叉树</h2><h3 id="递归-6"><a href="#递归-6" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">buildTree</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.length==<span class="number">0</span>||inorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> traversal(preorder,<span class="number">0</span>,preorder.length-<span class="number">1</span>, inorder,<span class="number">0</span>,inorder.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TreeNode <span class="title">traversal</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span> preLeft, <span class="keyword">int</span> preRight, <span class="keyword">int</span>[] inorder, <span class="keyword">int</span> inLeft, <span class="keyword">int</span> inRight)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preRight&lt;preLeft||inRight&lt;inLeft)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> root=preorder[preLeft];</span><br><span class="line">        TreeNode treeNode = <span class="keyword">new</span> TreeNode(root);</span><br><span class="line">        <span class="keyword">int</span> leftLen=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=inLeft;i&lt;=inRight;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (inorder[i]==root)&#123;</span><br><span class="line">                leftLen=i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        treeNode.left= traversal(preorder,preLeft+<span class="number">1</span>,preLeft+<span class="number">1</span>+leftLen-<span class="number">1</span>-inLeft,inorder,inLeft,leftLen-<span class="number">1</span>);</span><br><span class="line">        treeNode.right= traversal(preorder,preLeft+leftLen-inLeft+<span class="number">1</span>,preRight,inorder,leftLen+<span class="number">1</span>,inRight);</span><br><span class="line">        <span class="keyword">return</span> treeNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="迭代-3"><a href="#迭代-3" class="headerlink" title="迭代"></a>迭代</h3><p>效率更高<br><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/cong-qian-xu-yu-zhong-xu-bian-li-xu-lie-gou-zao-9/">力扣官方题解</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">buildTree2</span><span class="params">(<span class="keyword">int</span>[] preorder, <span class="keyword">int</span>[] inorder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (preorder.length==<span class="number">0</span>||inorder.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(preorder[<span class="number">0</span>]);</span><br><span class="line">        Deque&lt;TreeNode&gt; stack=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        stack.push(root);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> inorderIndex=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; preorder.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> preorderVal = preorder[i];</span><br><span class="line">            TreeNode node = stack.peek();</span><br><span class="line">            <span class="keyword">if</span> (node.val!=inorder[inorderIndex])&#123;</span><br><span class="line">                node.left=<span class="keyword">new</span> TreeNode(preorderVal);</span><br><span class="line">                stack.push(node.left);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (!stack.isEmpty()&amp;&amp;stack.peek().val==inorder[inorderIndex])&#123;</span><br><span class="line">                    node=stack.poll();</span><br><span class="line">                    inorderIndex++;</span><br><span class="line">                &#125;</span><br><span class="line">                node.right=<span class="keyword">new</span> TreeNode(preorderVal);</span><br><span class="line">                stack.push(node.right);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="98-验证二叉搜索树"><a href="#98-验证二叉搜索树" class="headerlink" title="98. 验证二叉搜索树"></a>98. 验证二叉搜索树</h2><ol><li>不能单纯的比较左节点小于中间节点，右节点大于中间节点就完事了。<br>我们要比较的是 左子树所有节点小于中间节点，右子树所有节点大于中间节点。</li><li>注意取值范围，最小值最大值达到了Int的上下限，因此需要用long来比较 <h3 id="递归-7"><a href="#递归-7" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> travesal(root, Long.MIN_VALUE, Long.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">travesal</span><span class="params">(TreeNode root, <span class="keyword">long</span> low, <span class="keyword">long</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt;= high || root.val &lt;= low) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> travesal(root.left, low, root.val) &amp;&amp; travesal(root.right, root.val, high);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历-2"><a href="#中序遍历-2" class="headerlink" title="中序遍历"></a>中序遍历</h3><h4 id="递归-8"><a href="#递归-8" class="headerlink" title="递归"></a>递归</h4>递归中会变化的值，不要传参数，声明全局变量<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">long</span> min=Long.MIN_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> midTrav(root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">midTrav</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">boolean</span> left= midTrav(root.left);</span><br><span class="line">        <span class="keyword">if</span> (root.val&lt;=min)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        min= root.val;</span><br><span class="line">        <span class="keyword">boolean</span> right= midTrav(root.right);</span><br><span class="line">        <span class="keyword">return</span> left&amp;&amp;right;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="迭代-4"><a href="#迭代-4" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span>   <span class="keyword">boolean</span> <span class="title">isValidBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">long</span> minValue=Long.MIN_VALUE;</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()||root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                deque.push(root);</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = deque.pop();</span><br><span class="line">            <span class="keyword">if</span> (root.val&lt;=minValue)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            minValue=root.val;</span><br><span class="line">            root=root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="530-二叉搜索树的最小绝对差"><a href="#530-二叉搜索树的最小绝对差" class="headerlink" title="530. 二叉搜索树的最小绝对差"></a>530. 二叉搜索树的最小绝对差</h2><h3 id="中序-迭代"><a href="#中序-迭代" class="headerlink" title="中序-迭代"></a>中序-迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumDifference2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> pre=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> less=Integer.MAX_VALUE;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty()||root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (root!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root= root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root=stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (pre!=-<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span> (root.val-pre&lt;less)&#123;</span><br><span class="line">                    less=root.val-pre;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            pre=root.val;</span><br><span class="line">            root=root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> less;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="中序-递归"><a href="#中序-递归" class="headerlink" title="中序-递归"></a>中序-递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pre=-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> less=Integer.MAX_VALUE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMinimumDifference</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        recur(root);</span><br><span class="line">        <span class="keyword">return</span> less;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        recur(root.left);</span><br><span class="line">        <span class="keyword">if</span> (pre!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val-pre&lt;less)&#123;</span><br><span class="line">                less=root.val-pre;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        pre=root.val;</span><br><span class="line">        recur(root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="501-二叉搜索树中的众数"><a href="#501-二叉搜索树中的众数" class="headerlink" title="501. 二叉搜索树中的众数"></a>501. 二叉搜索树中的众数</h2><h3 id="中序遍历-3"><a href="#中序遍历-3" class="headerlink" title="中序遍历"></a>中序遍历</h3><h4 id="递归-9"><a href="#递归-9" class="headerlink" title="递归"></a>递归</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> List&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> curmax = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> TreeNode pre=<span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] findMode(TreeNode root) &#123;</span><br><span class="line">        recur(root);</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arrayList.size()];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : arrayList) &#123;</span><br><span class="line">            res[index++] = integer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        recur(root.left);</span><br><span class="line">        <span class="comment">//计数</span></span><br><span class="line">        <span class="keyword">if</span> (pre == <span class="keyword">null</span> || root.val != pre.val) &#123;</span><br><span class="line">            curmax=<span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            curmax++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新结果</span></span><br><span class="line">        <span class="keyword">if</span> (curmax &gt; maxCount) &#123;</span><br><span class="line">            arrayList.clear();</span><br><span class="line">            arrayList.add(root.val);</span><br><span class="line">            maxCount = curmax;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curmax == maxCount) &#123;</span><br><span class="line">            arrayList.add(root.val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//更新中序遍历的前结点</span></span><br><span class="line">        pre=root;</span><br><span class="line"></span><br><span class="line">        recur(root.right);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="迭代-5"><a href="#迭代-5" class="headerlink" title="迭代"></a>迭代</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] findMode2(TreeNode root) &#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; stack = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; arrayList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> maxCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> curMax = <span class="number">0</span>;</span><br><span class="line">        TreeNode preV = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (!stack.isEmpty() || root != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (root != <span class="keyword">null</span>) &#123;</span><br><span class="line">                stack.push(root);</span><br><span class="line">                root = root.left;</span><br><span class="line">            &#125;</span><br><span class="line">            root = stack.pop();</span><br><span class="line">            <span class="comment">//计数</span></span><br><span class="line">            <span class="keyword">if</span> (preV==<span class="keyword">null</span>||root.val!=preV.val)&#123;</span><br><span class="line">                curMax=<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                curMax++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//更新</span></span><br><span class="line">            <span class="keyword">if</span> (curMax &gt; maxCount) &#123;</span><br><span class="line">                arrayList.clear();</span><br><span class="line">                arrayList.add(root.val);</span><br><span class="line">                maxCount=curMax;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (curMax == maxCount) &#123;</span><br><span class="line">                arrayList.add(root.val);</span><br><span class="line">            &#125;</span><br><span class="line">            preV=root;</span><br><span class="line">            root = root.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[arrayList.size()];</span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer integer : arrayList) &#123;</span><br><span class="line">            res[index++] = integer;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="Morris遍历"><a href="#Morris遍历" class="headerlink" title="?Morris遍历"></a>?Morris遍历</h3><h2 id="236-二叉树的最近公共祖先"><a href="#236-二叉树的最近公共祖先" class="headerlink" title="236. 二叉树的最近公共祖先"></a>236. 二叉树的最近公共祖先</h2><h3 id="后序遍历-2"><a href="#后序遍历-2" class="headerlink" title="后序遍历"></a>后序遍历</h3>自底向上–回溯–后序遍历<br><a href="https://programmercarl.com/0236.%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html#java">代码随想录</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span> || root == p || root == q) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode left = lowestCommonAncestor(root.left, p, q);</span><br><span class="line">        TreeNode right = lowestCommonAncestor(root.right, p, q);</span><br><span class="line">        <span class="keyword">if</span> (left != <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (left == <span class="keyword">null</span> &amp;&amp; right != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> right;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (right == <span class="keyword">null</span> &amp;&amp; left != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="哈希表、集合"><a href="#哈希表、集合" class="headerlink" title="哈希表、集合"></a>哈希表、集合</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;TreeNode,TreeNode&gt; map= <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    HashSet&lt;Integer&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor2</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">while</span> (p!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            set.add(p.val);</span><br><span class="line">            p=map.get(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (q!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (set.contains(q.val))&#123;</span><br><span class="line">                <span class="keyword">return</span> q;</span><br><span class="line">            &#125;</span><br><span class="line">            q=map.get(q);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root.left!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(root.left,root);</span><br><span class="line">            dfs(root.left);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.right!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            map.put(root.right,root);</span><br><span class="line">            dfs(root.right);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="235-二叉搜索树的最近公共祖先"><a href="#235-二叉搜索树的最近公共祖先" class="headerlink" title="235. 二叉搜索树的最近公共祖先"></a>235. 二叉搜索树的最近公共祖先</h2><h3 id="迭代法-1"><a href="#迭代法-1" class="headerlink" title="迭代法"></a>迭代法</h3>重点：祖先必处于给定两个值之间，并且是从上到下遍历到的第一个值在区间内的<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">lowestCommonAncestor</span><span class="params">(TreeNode root, TreeNode p, TreeNode q)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val&lt;p.val&amp;&amp;root.val&lt;q.val)&#123;</span><br><span class="line">                root=root.right;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (root.val&gt;p.val&amp;&amp;root.val&gt;q.val)&#123;</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="701-二叉搜索树中的插入操作"><a href="#701-二叉搜索树中的插入操作" class="headerlink" title="701. 二叉搜索树中的插入操作"></a>701. 二叉搜索树中的插入操作</h2><h3 id="递归-10"><a href="#递归-10" class="headerlink" title="递归"></a>递归</h3>不要被题目所影响，有多种插入方式。直接找最底层空位插入。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            TreeNode treeNode = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">            <span class="keyword">return</span> treeNode;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val &gt; val) &#123;</span><br><span class="line">            root.left = insertIntoBST(root.left, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val &lt; val) &#123;</span><br><span class="line">            root.right = insertIntoBST(root.right, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="迭代-6"><a href="#迭代-6" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">insertIntoBST2</span><span class="params">(TreeNode root, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode pre = <span class="keyword">null</span>;</span><br><span class="line">        TreeNode cur = root;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            pre=cur;</span><br><span class="line">            <span class="keyword">if</span> (cur.val &gt; val) &#123;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur.val &lt; val) &#123;</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre.val &lt; val) &#123;</span><br><span class="line">            pre.right = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            pre.left = <span class="keyword">new</span> TreeNode(val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="450-删除二叉搜索树中的节点"><a href="#450-删除二叉搜索树中的节点" class="headerlink" title="450. 删除二叉搜索树中的节点"></a>450. 删除二叉搜索树中的节点</h2><a href="https://programmercarl.com/0450.%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9.html#%E8%BF%AD%E4%BB%A3%E6%B3%95">代码随想录</a><h3 id="递归-11"><a href="#递归-11" class="headerlink" title="递归"></a>递归</h3>分类讨论<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">deleteNode</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val == key) &#123;</span><br><span class="line">            <span class="comment">//第一种:左右都为Null</span></span><br><span class="line">            <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.left == <span class="keyword">null</span> &amp;&amp; root.right != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//2：左孩子为空</span></span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.right == <span class="keyword">null</span> &amp;&amp; root.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//3:右孩子为空</span></span><br><span class="line">                <span class="keyword">return</span> root.left;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//4:左右都不为空</span></span><br><span class="line">                TreeNode cur = root.right;</span><br><span class="line">                <span class="keyword">while</span> (cur.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    cur = cur.left;</span><br><span class="line">                &#125;</span><br><span class="line">                cur.left = root.left;</span><br><span class="line">                <span class="keyword">return</span> root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (root.val &gt; key) &#123;</span><br><span class="line">            root.left = deleteNode(root.left, key);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            root.right = deleteNode(root.right, key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没利用搜索树特性</span></span><br><span class="line"><span class="comment">//        root.left = deleteNode(root.left, key);</span></span><br><span class="line"><span class="comment">//        root.right = deleteNode(root.right, key);</span></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="迭代-7"><a href="#迭代-7" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">deleteNode2</span><span class="params">(TreeNode root, <span class="keyword">int</span> key)</span> </span>&#123;</span><br><span class="line">        TreeNode cur = root, pre = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span> &amp;&amp; cur.val != key) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.val &lt; key) &#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur.right;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur.val &gt; key) &#123;</span><br><span class="line">                pre = cur;</span><br><span class="line">                cur = cur.left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (pre==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> deleteOneNode(cur);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (pre.left!=<span class="keyword">null</span>&amp;&amp; pre.left.val==key)&#123;</span><br><span class="line">                pre.left=deleteOneNode(cur);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (pre.right!=<span class="keyword">null</span>&amp;&amp; pre.right.val==key)&#123;</span><br><span class="line">                pre.right=deleteOneNode(cur);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TreeNode <span class="title">deleteOneNode</span><span class="params">(TreeNode cur)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (cur == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur.left == <span class="keyword">null</span> &amp;&amp; cur.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur.left == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cur.right;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (cur.right == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cur.left;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            TreeNode tra = cur.right;</span><br><span class="line">            <span class="keyword">while</span> (tra.left != <span class="keyword">null</span>) &#123;</span><br><span class="line">                tra = tra.left;</span><br><span class="line">            &#125;</span><br><span class="line">            tra.left = cur.left;</span><br><span class="line">            <span class="keyword">return</span> cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="669-修剪二叉搜索树"><a href="#669-修剪二叉搜索树" class="headerlink" title="669. 修剪二叉搜索树"></a>669. 修剪二叉搜索树</h2><h3 id="递归-12"><a href="#递归-12" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">trimBST</span><span class="params">(TreeNode root, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> root;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val&lt;low)&#123;</span><br><span class="line">            <span class="keyword">return</span> trimBST(root.right,low,high);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (root.val&gt;high)&#123;</span><br><span class="line">            <span class="keyword">return</span> trimBST(root.left,low,high);</span><br><span class="line">        &#125;</span><br><span class="line">        root.left=trimBST(root.left,low,high);</span><br><span class="line">        root.right=trimBST(root.right,low,high);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="迭代-8"><a href="#迭代-8" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">trimBST2</span><span class="params">(TreeNode root, <span class="keyword">int</span> low, <span class="keyword">int</span> high)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先找到处于[low,high]区间的结点作为根节点</span></span><br><span class="line">        <span class="keyword">while</span> (root!=<span class="keyword">null</span>&amp;&amp;(root.val&gt;high||root.val&lt;low))&#123;</span><br><span class="line">            <span class="keyword">if</span> (root.val&gt;high)&#123;</span><br><span class="line">                root=root.left;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                root=root.right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修建左子树</span></span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (cur.left!=<span class="keyword">null</span>&amp;&amp;cur.left.val&lt;low)&#123;</span><br><span class="line">                cur.left=cur.left.right;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//修建右子树</span></span><br><span class="line">        cur=root;</span><br><span class="line">        <span class="keyword">while</span> (cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (cur.right!=<span class="keyword">null</span>&amp;&amp;cur.right.val&gt;high)&#123;</span><br><span class="line">                cur.right=cur.right.left;</span><br><span class="line">            &#125;</span><br><span class="line">            cur=cur.right;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="108-将有序数组转换为二叉搜索树"><a href="#108-将有序数组转换为二叉搜索树" class="headerlink" title="108. 将有序数组转换为二叉搜索树"></a>108. 将有序数组转换为二叉搜索树</h2><h3 id="递归-13"><a href="#递归-13" class="headerlink" title="递归"></a>递归</h3>又是不断找中间点分割数组。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">sortedArrayToBST</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> recur(nums,<span class="number">0</span>,nums.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> TreeNode <span class="title">recur</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (right==left)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">        TreeNode treeNode = <span class="keyword">new</span> TreeNode(nums[mid]);</span><br><span class="line">        treeNode.left=recur(nums,left,mid);</span><br><span class="line">        treeNode.right=recur(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">        <span class="keyword">return</span> treeNode;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="538-把二叉搜索树转换为累加树"><a href="#538-把二叉搜索树转换为累加树" class="headerlink" title="538. 把二叉搜索树转换为累加树"></a>538. 把二叉搜索树转换为累加树</h2><blockquote><p>从树中可以看出累加的顺序是右中左，所以我们需要反中序遍历这个二叉树，然后顺序累加就可以了。</p></blockquote><h3 id="递归-14"><a href="#递归-14" class="headerlink" title="递归"></a>递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> pre=<span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">convertBST</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        recur(root);</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">recur</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        recur(root.right);</span><br><span class="line">        root.val+=pre;</span><br><span class="line">        pre=root.val;</span><br><span class="line">        recur(root.left);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="迭代-9"><a href="#迭代-9" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> TreeNode <span class="title">convertBST2</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">        TreeNode cur=root;</span><br><span class="line">        <span class="keyword">int</span> pre=<span class="number">0</span>;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (!deque.isEmpty()||cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">while</span> (cur!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                deque.push(cur);</span><br><span class="line">                cur=cur.right;</span><br><span class="line">            &#125;</span><br><span class="line">            cur= deque.pop();</span><br><span class="line">            cur.val+=pre;</span><br><span class="line">            pre=cur.val;</span><br><span class="line">            cur=cur.left;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6223-移除子树后的二叉树高度"><a href="#6223-移除子树后的二叉树高度" class="headerlink" title="6223. 移除子树后的二叉树高度"></a><a href="https://leetcode.cn/problems/height-of-binary-tree-after-subtree-removal-queries/">6223. 移除子树后的二叉树高度</a></h3><a href="https://leetcode.cn/problems/height-of-binary-tree-after-subtree-removal-queries/solution/liang-bian-dfspythonjavacgo-by-endlessch-vvs4/">两遍 DFS（Python/Java/C++/Go）</a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Map&lt;TreeNode, Integer&gt; height = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// 每棵子树的高度</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span>[] result; <span class="comment">// 每个节点的答案</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] treeQueries(TreeNode root, <span class="keyword">int</span>[] queries) &#123;</span><br><span class="line">    getHeight(root);<span class="comment">//树的高度是从根到树中某个节点的 最长简单路径中的边数 。</span></span><br><span class="line">    height.put(<span class="keyword">null</span>,<span class="number">0</span>);</span><br><span class="line">    result=<span class="keyword">new</span> <span class="keyword">int</span>[height.size()];<span class="comment">//保存每个结点的答案：删除该结点后的高度</span></span><br><span class="line">    dfs(root,-<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queries.length; i++) &#123;</span><br><span class="line">        queries[i]=result[queries[i]];<span class="comment">//原地修改</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> queries;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(TreeNode root, <span class="keyword">int</span> depth, <span class="keyword">int</span> rest)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     depth++;</span><br><span class="line">     result[root.val]=rest;</span><br><span class="line">     dfs(root.left,depth,Math.max(rest,depth+height.get(root.right)));</span><br><span class="line">     dfs(root.right,depth,Math.max(rest,depth+height.get(root.left)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">(TreeNode root)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (root==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> h=<span class="number">1</span>+Math.max(getHeight(root.left),getHeight(root.right));</span><br><span class="line">    height.put(root,h);</span><br><span class="line">    <span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    TreeNode root = <span class="keyword">new</span> TreeNode(<span class="number">1</span>, <span class="keyword">new</span> TreeNode(<span class="number">3</span>, <span class="keyword">new</span> TreeNode(<span class="number">2</span>), <span class="keyword">null</span>),</span><br><span class="line">            <span class="keyword">new</span> TreeNode(<span class="number">4</span>, <span class="keyword">new</span> TreeNode(<span class="number">6</span>), <span class="keyword">new</span> TreeNode(<span class="number">5</span>, <span class="keyword">null</span>, <span class="keyword">new</span> TreeNode(<span class="number">7</span>))));</span><br><span class="line">    <span class="keyword">int</span>[] queries =<span class="keyword">new</span> <span class="keyword">int</span> []&#123;<span class="number">4</span>&#125;;</span><br><span class="line">    treeQueries(root,queries);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="递归-15"><a href="#递归-15" class="headerlink" title="递归"></a>递归</h4>超时</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span>[] res;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] treeQueries2(TreeNode root, <span class="keyword">int</span>[] queries) &#123;</span><br><span class="line">        res=<span class="keyword">new</span> <span class="keyword">int</span>[queries.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; queries.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> height= recur(root,queries[i],<span class="number">0</span>);</span><br><span class="line">            res[i]=height-<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">recur</span><span class="params">(TreeNode root, <span class="keyword">int</span> query,<span class="keyword">int</span> height)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (root==<span class="keyword">null</span>||root.val==query)&#123;</span><br><span class="line">            <span class="keyword">return</span> height;</span><br><span class="line">        &#125;</span><br><span class="line">        height++;</span><br><span class="line">        <span class="keyword">int</span> leftHeight=recur(root.left,query,height);</span><br><span class="line">        <span class="keyword">int</span> rightHeight=recur(root.right,query,height);</span><br><span class="line">        <span class="keyword">return</span> Math.max(leftHeight,rightHeight);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="单调栈"><a href="#单调栈" class="headerlink" title="单调栈"></a>单调栈</h1><p>对于「找最近一个比当前值大/小」的问题，都可以使用单调栈来解决。</p><h2 id="654-最大二叉树"><a href="#654-最大二叉树" class="headerlink" title="654. 最大二叉树"></a>654. 最大二叉树</h2><h3 id="递归-16"><a href="#递归-16" class="headerlink" title="递归"></a>递归</h3><p>类似前序中序构造，中序后序构造</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">constructMaximumBinaryTree2</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums.length==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> travesal(nums,<span class="number">0</span>,nums.length-<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TreeNode <span class="title">travesal</span><span class="params">(<span class="keyword">int</span>[] nums,<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (right&lt;left)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> max=nums[left];</span><br><span class="line">        <span class="keyword">int</span> maxIndex=left;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = left+<span class="number">1</span>; i &lt;= right; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i]&gt;max)&#123;</span><br><span class="line">                max=nums[i];</span><br><span class="line">                maxIndex=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root = <span class="keyword">new</span> TreeNode(max);</span><br><span class="line">        root.left=travesal(nums,left,maxIndex-<span class="number">1</span>);</span><br><span class="line">        root.right=travesal(nums,maxIndex+<span class="number">1</span>,right);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> root;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="单调队列"></a>单调队列</h3><p><a href="https://leetcode.cn/problems/maximum-binary-tree/solution/zhua-wa-mou-si-by-muse-77-myd7/">【爪哇缪斯】图解LeetCode</a></p><blockquote><p>1&gt; 如果栈顶元素大于待插入的元素，那么直接入栈。<br>2&gt; 如果栈顶元素小于待插入的元素，那么栈顶元素出栈。<br>1&gt; 如果栈顶元素大于待插入的元素，则：栈顶元素.right = 待插入元素。<br>2&gt; 如果栈顶元素小于待插入的元素，则：待插入元素.left = 栈顶元素。</p></blockquote><h4 id="内置队列实现"><a href="#内置队列实现" class="headerlink" title="内置队列实现"></a>内置队列实现</h4><p>效率差，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">constructMaximumBinaryTree1</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        Deque&lt;TreeNode&gt; deque = <span class="keyword">new</span> ArrayDeque(); <span class="comment">//双端单调队列，左边最大</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            TreeNode treeNode = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty())&#123;</span><br><span class="line">                TreeNode peek = deque.peekLast();</span><br><span class="line">                <span class="keyword">if</span> (peek.val&gt;treeNode.val)&#123; <span class="comment">//栈顶是最大的</span></span><br><span class="line">                    deque.offerLast(treeNode);</span><br><span class="line">                    peek.right=treeNode;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    deque.removeLast();</span><br><span class="line">                    treeNode.left=peek;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (deque.isEmpty())&#123;</span><br><span class="line">                deque.offerLast(treeNode);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deque.peek(); <span class="comment">//最大的是树根</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TreeNode <span class="title">constructMaximumBinaryTree</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        TreeNode[] deque = <span class="keyword">new</span> TreeNode[<span class="number">1001</span>];</span><br><span class="line">        <span class="keyword">int</span> tail=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            TreeNode treeNode = <span class="keyword">new</span> TreeNode(nums[i]);</span><br><span class="line">            <span class="keyword">while</span> (tail!=<span class="number">0</span>)&#123;</span><br><span class="line">                TreeNode peek = deque[tail - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">if</span> (peek.val&gt;treeNode.val)&#123;</span><br><span class="line">                    deque[tail++]=treeNode;</span><br><span class="line">                    peek.right=treeNode;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    deque[--tail]=<span class="keyword">null</span>;</span><br><span class="line">                    treeNode.left=peek;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tail==<span class="number">0</span>)&#123;</span><br><span class="line">                deque[tail++]=treeNode;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> deque[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="503-下一个更大元素-II"><a href="#503-下一个更大元素-II" class="headerlink" title="503. 下一个更大元素 II"></a>503. 下一个更大元素 II</h2><h3 id="内置实现"><a href="#内置实现" class="headerlink" title="内置实现"></a>内置实现</h3><p><a href="https://leetcode.cn/problems/next-greater-element-ii/solution/cong-po-su-jie-fa-de-jiao-du-qu-li-jie-d-trht/">【宫水三叶】为啥使用「单调栈」呀？从「朴素解法」的角度去理解「单调栈」</a><br><a href="https://leetcode.cn/problems/next-greater-element-ii/solution/dong-hua-jiang-jie-dan-diao-zhan-by-fuxu-4z2g/">动画讲解：单调栈</a><br>栈中存储索引</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] nextGreaterElements2(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">        Deque&lt;Integer&gt; stack = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (!stack.isEmpty() &amp;&amp; nums[i % n] &gt; nums[stack.peekLast()]) &#123;</span><br><span class="line">                res[stack.pollLast()] = nums[i % n];</span><br><span class="line">            &#125;</span><br><span class="line">            stack.offerLast(i % n);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="数组模拟栈"><a href="#数组模拟栈" class="headerlink" title="数组模拟栈"></a>数组模拟栈</h3><p>效率更高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] nextGreaterElements(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        Arrays.fill(res, -<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span>[] stack = <span class="keyword">new</span> <span class="keyword">int</span>[n * <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> tail = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n * <span class="number">2</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">while</span> (tail != <span class="number">0</span> &amp;&amp; nums[i % n] &gt; nums[stack[tail - <span class="number">1</span>]]) &#123;</span><br><span class="line">                res[stack[--tail]] = nums[i % n];</span><br><span class="line">            &#125;</span><br><span class="line">            stack[tail++] =i % n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="优先队列-单调队列"><a href="#优先队列-单调队列" class="headerlink" title="优先队列/单调队列"></a>优先队列/单调队列</h1><h2 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h2><p><a href="https://leetcode.cn/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/">leetcode官解</a></p><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow2(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="comment">//存储元素及索引，索引为了判断是否在窗口内</span></span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//元素大小不同按元素大小排列，元素大小相同按下标进行排列</span></span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>]!=o2[<span class="number">0</span>]?o2[<span class="number">0</span>]-o1[<span class="number">0</span>]:o2[<span class="number">1</span>]-o1[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length - k + <span class="number">1</span>]; <span class="comment">//共有n-k+1个元素</span></span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            priorityQueue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums[i],i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res[index++]=priorityQueue.peek()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;nums.length;i++)&#123;</span><br><span class="line">            priorityQueue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums[i],i&#125;);</span><br><span class="line">            <span class="keyword">while</span>(priorityQueue.peek()[<span class="number">1</span>]&lt;i-k+<span class="number">1</span>)&#123;<span class="comment">//窗口大小[i-k+1,i]</span></span><br><span class="line">                priorityQueue.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            res[index++]=priorityQueue.peek()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)，堆的入队出队时间是O(logn)，共n个元素<br>空间复杂度：O(n)</p><h3 id="单调队列-1"><a href="#单调队列-1" class="headerlink" title="*单调队列"></a>*单调队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双端队列，思想和优先队列相似</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        Deque&lt;Integer&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty()&amp;&amp;nums[i]&gt;=nums[deque.peekLast()])&#123;</span><br><span class="line">                deque.pollLast();<span class="comment">//保证最左边的是最大值，如果不大于左边的就直接入队，并且是递减的</span></span><br><span class="line">            &#125;</span><br><span class="line">            deque.offerLast(i);<span class="comment">//存放的是索引</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length - k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        res[index++]=nums[deque.peekFirst()];<span class="comment">//最左边的是最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty()&amp;&amp;nums[i]&gt;=nums[deque.peekLast()])&#123;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            deque.offerLast(i);<span class="comment">//存放的索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (deque.peekFirst()&lt;i-k+<span class="number">1</span>)&#123;</span><br><span class="line">                deque.pollFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            res[index++]=nums[deque.peekFirst()];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)<br>空间复杂度：O(k)</p><h3 id="分块-预处理"><a href="#分块-预处理" class="headerlink" title="分块 + 预处理"></a>分块 + 预处理</h3><p>将数组 nums 从左到右按照 k 个一组进行分组，最后一组中元素的数量可能会不足 k 个。<br>如果我们知道了左半部的最大值和右半部分的最大值，那么两个选最大的即可。<br>前缀数组存放右半部分的最大值，后缀数组存放左半部分的最大值<br><a href="https://leetcode.cn/problems/sliding-window-maximum/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-5-3/">参考2</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] maxSlidingWindow3(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] prefixMax = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//右边界</span></span><br><span class="line">        <span class="keyword">int</span>[] suffixMax = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//左边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%k==<span class="number">0</span>)&#123;</span><br><span class="line">                prefixMax[i]=nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                prefixMax[i]=Math.max(nums[i],prefixMax[i-<span class="number">1</span>]);<span class="comment">//保证每个分组中右边的比左边的大</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==n-<span class="number">1</span>||(i+<span class="number">1</span>)%k==<span class="number">0</span>)&#123;</span><br><span class="line">                suffixMax[i]=nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                suffixMax[i]=Math.max(nums[i],suffixMax[i+<span class="number">1</span>]);<span class="comment">//每个分组左边的比右边的大</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            res[i]=Math.max(suffixMax[i],prefixMax[i+k-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n)<br>空间复杂度O(n)</p><h4 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238. 除自身以外数组的乘积"></a>238. 除自身以外数组的乘积</h4><h5 id="左右乘积列表"><a href="#左右乘积列表" class="headerlink" title="左右乘积列表"></a>左右乘积列表</h5><p>分别计算左边所有数字的乘积（前缀）和右边所有数字的乘积（右缀）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span> n=nums.length;</span><br><span class="line">    <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    left[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    right[n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        left[i]=left[i-<span class="number">1</span>]*nums[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        right[i]=right[i+<span class="number">1</span>]*nums[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        res[i]=left[i]*right[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N)<br>空间复杂度：O(N)</p><h5 id="动态生成右边乘积"><a href="#动态生成右边乘积" class="headerlink" title="动态生成右边乘积"></a>动态生成右边乘积</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="comment">//首先生成左边乘积</span></span><br><span class="line">        left[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            left[i] = left[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从右边开始动态生成乘积</span></span><br><span class="line">        <span class="keyword">int</span> R = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            left[i] = left[i] * R;</span><br><span class="line">            R = R * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N)O(N)<br>空间复杂度：O(1)<br>输出数组不算进空间复杂度中，因此我们只需要常数的空间存放变量。</p><h2 id="1696-跳跃游戏-VI"><a href="#1696-跳跃游戏-VI" class="headerlink" title="1696. 跳跃游戏 VI"></a>1696. 跳跃游戏 VI</h2><p><a href="https://leetcode.cn/problems/jump-game-vi/solution/tiao-yue-you-xi-cong-dong-tai-gui-hua-da-3hc3/">参考：跳跃游戏——从动态规划到滑动窗口</a></p><h3 id="动态规划–超时"><a href="#动态规划–超时" class="headerlink" title="动态规划–超时"></a>动态规划–超时</h3><p>dp思路：dp[i]表示以i为结尾的最大值<br>对每个dp[i]，都遍历dp(i-k,i-1)找最小值cur<br>dp[i] = cur + nums[i]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxResult2</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        Arrays.fill(dp, Integer.MIN_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = Math.max(<span class="number">0</span>, i - k); j &lt; i; j++) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], dp[j]);<span class="comment">//每次找前k步中最大的值</span></span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>仔细观察不难发现，在第i - 1个元素上，我们比较了dp[i - 2]、dp[i - 3]、…、dp[i - k - 1]的最大值，在第i个元素上，我们比较了dp[i - 1]、dp[i - 2]、…、dp[i - k]的最大值；在第i + 1个元素上，我们比较了dp[i]、dp[i - 1]、dp[i - 2]、…、dp[i - k + 1]的最大值；对于数组中的几乎每个元素，我们都做了K次比较，而且有很多次比较是完全重复的，这毫无疑问是一种极大的浪费。</p><h3 id="动态规划-滑动窗口-单调队列"><a href="#动态规划-滑动窗口-单调队列" class="headerlink" title="动态规划 + 滑动窗口(单调队列)"></a>动态规划 + 滑动窗口(单调队列)</h3><p>每次用一个变量maxWindow表示此前dp数组中的最大值，然后在第i个元素上，用dp[i - 1]与maxWindow比较，如果dp[i - 1]大于maxWindow，就可以将maxWindow的值更新为dp[i - 1]，这样的话，每次只需要进行一次比较，就可以解决问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxResult</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//单调队列</span></span><br><span class="line">        Deque&lt;Integer&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//更新队列</span></span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty()&amp;&amp;dp[deque.peekLast()]&lt;=dp[i-<span class="number">1</span>])&#123;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            deque.offerLast(i-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (deque.peekFirst()&lt;i-k)&#123; <span class="comment">//找的是前面一个窗口，窗口不包括当前的</span></span><br><span class="line">                deque.pollFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i]=dp[deque.peekFirst()]+nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347. 前 K 个高频元素"></a>347. 前 K 个高频元素</h2><h3 id="优先队列-1"><a href="#优先队列-1" class="headerlink" title="优先队列"></a>优先队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] topKFrequent1(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="comment">//优先队列的元素是数组时，需要指定按哪个元素排序</span></span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">1</span>]-o2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//统计所有频次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//堆中只存前k个</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (queue.size()&lt;k) &#123;<span class="comment">//堆没满，直接添加</span></span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(queue.peek()[<span class="number">1</span>]&lt;entry.getValue())&#123;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            res[i]=queue.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(Nlogk)<br>空间复杂度：O(N)</p><h3 id="map找最大"><a href="#map找最大" class="headerlink" title="map找最大"></a>map找最大</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] topKFrequent2(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//统计所有频次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找最大</span></span><br><span class="line">        <span class="keyword">int</span> maxTimes = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; maxTimes) &#123;</span><br><span class="line">                maxTimes = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//依次找前k个加入结果集</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry.getValue() == maxTimes) &#123;</span><br><span class="line">                    res[k - <span class="number">1</span>] = entry.getKey();</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxTimes--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>思路不错，但是时间复杂度O(nk)? By<a href="https://leetcode.cn/u/crazybamboo/">CrazyBamboo</a></p><h3 id="快排"><a href="#快排" class="headerlink" title="?快排"></a>?快排</h3><h4 id="215-数组中的第K个最大元素"><a href="#215-数组中的第K个最大元素" class="headerlink" title="?215. 数组中的第K个最大元素"></a>?215. 数组中的第K个最大元素</h4><h5 id="手动实现堆"><a href="#手动实现堆" class="headerlink" title="手动实现堆"></a>手动实现堆</h5><h5 id="优先队列-内置"><a href="#优先队列-内置" class="headerlink" title="优先队列(内置)"></a>优先队列(内置)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果利用内置标准库实现，可以认为简单题了，应尝试自己实现堆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(queue.size()&lt;k)&#123;</span><br><span class="line">                queue.offer(nums[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(queue.peek()&lt;nums[i])&#123;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                    queue.offer(nums[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="快排-1"><a href="#快排-1" class="headerlink" title="快排"></a>快排</h5><h1 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h1><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>二分查找：有序数组，无重复元素</p><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h2><p>重点是left&lt;=right和mid+1 -1的对应关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (left&lt;=right)&#123;<span class="comment">//包括相等</span></span><br><span class="line">           <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">               right=mid-<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">               left=mid+<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35.搜索插入位置"></a>35.搜索插入位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;<span class="comment">//注意返回的是left，可以两边画图算一下</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>与传统二分查找的不同是 找不到则返回应该插入的位置，而不是返回-1。</p><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> leftBorder=getLeftBorder(nums,target);</span><br><span class="line">        <span class="keyword">int</span> rightBorder=getRightBorder(nums,target);</span><br><span class="line">        <span class="keyword">if</span>(leftBorder==-<span class="number">2</span>||rightBorder==-<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rightBorder&gt;leftBorder+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;leftBorder+<span class="number">1</span>,rightBorder-<span class="number">1</span>&#125;;<span class="comment">//找的是不包括target的边界</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getRightBorder</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rightborder=-<span class="number">2</span>;<span class="comment">//防止找不到</span></span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;<span class="comment">//nums[middle] == target的时候更新left</span></span><br><span class="line">                rightborder=left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rightborder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getLeftBorder</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> leftBorder=-<span class="number">2</span>;<span class="comment">//防止找不到</span></span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;<span class="comment">//nums[middle] == target的时候更新right</span></span><br><span class="line">                leftBorder=right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftBorder;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>两次二分查找，找左边界和右边界。</p><h2 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367. 有效的完全平方数"></a>367. 有效的完全平方数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=num;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>((<span class="keyword">long</span>)mid*mid&lt;num)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="keyword">long</span>)mid*mid&gt;num)&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解决数学问题</p><h2 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根"></a>69. x 的平方根</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=x;</span><br><span class="line">        <span class="keyword">int</span> ans=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>((<span class="keyword">long</span>)mid*mid&lt;=x)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">                ans=mid;<span class="comment">//保存左边界</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>367的升级<br>与传统二分查找不同的是将相等和小于的情况合并，找出近似值，而不是精确值。<br>注意：判断条件相乘时可能会导致两个大数相乘，超出int范围，需要转为long类型，这也是29题的难点，29题要求只能用32位数字的范围。</p><h2 id="？29-两数相除"><a href="#？29-两数相除" class="headerlink" title="？29. 两数相除"></a>？29. 两数相除</h2><h3 id="二分查找-快速乘-大数相乘"><a href="#二分查找-快速乘-大数相乘" class="headerlink" title="二分查找+快速乘(大数相乘)"></a>二分查找+快速乘(大数相乘)</h3><p>做不出来 +数字范围(溢出)</p><h1 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h1><h2 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a>50. Pow(x, n)</h2><h3 id="快速幂-递归"><a href="#快速幂-递归" class="headerlink" title="快速幂 + 递归"></a>快速幂 + 递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分治法：递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//虽然没有报错，但是理论上有问题</span></span><br><span class="line"><span class="comment">//        return n &gt;= 0 ? quickMul(x, n) : 1 / quickMul(x, -n);</span></span><br><span class="line">        <span class="comment">//因为用例中n有一个是Integer.MIN_VALUE，转为正数后会溢出</span></span><br><span class="line">        <span class="keyword">long</span> N=n;</span><br><span class="line">        <span class="keyword">return</span> N&gt;= <span class="number">0</span> ? quickMul(x, N) : <span class="number">1</span> / quickMul(x, -N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">quickMul</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">long</span>  n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> y = quickMul(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span> ? y * y : y * y * x;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂-迭代"><a href="#快速幂-迭代" class="headerlink" title="快速幂 + 迭代"></a>快速幂 + 迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPowBest</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> N=n;</span><br><span class="line">        <span class="keyword">return</span> N&gt;=<span class="number">0</span>?quickMulBest(x,N):<span class="number">1</span>/quickMulBest(x,-N);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">quickMulBest</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">long</span>  n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//贡献初始值为x</span></span><br><span class="line">        <span class="keyword">double</span> x_con=x;</span><br><span class="line">        <span class="keyword">double</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//最低位二进制为1，计入贡献</span></span><br><span class="line">                res*=x_con;</span><br><span class="line">            &#125;</span><br><span class="line">            x_con*=x_con;<span class="comment">//下一位的贡献</span></span><br><span class="line">            n/=<span class="number">2</span>;<span class="comment">//舍弃当前最低位，这样每次只需判断最低位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="509-斐波那契数-1"><a href="#509-斐波那契数-1" class="headerlink" title="509. 斐波那契数"></a>509. 斐波那契数</h2><h3 id="矩阵快速幂"><a href="#矩阵快速幂" class="headerlink" title="矩阵快速幂"></a>矩阵快速幂</h3><p><a href="https://leetcode.cn/problems/fibonacci-number/solution/fei-bo-na-qi-shu-by-leetcode-solution-o4ze/">方法二：矩阵快速幂</a></p><h1 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h1><h1 id="字母异位词"><a href="#字母异位词" class="headerlink" title="字母异位词"></a>字母异位词</h1><p>49.字母异位词分组</p><h2 id="一个方法：双指针-滑动窗口"><a href="#一个方法：双指针-滑动窗口" class="headerlink" title="一个方法：双指针/滑动窗口"></a>一个方法：双指针/滑动窗口</h2><p>438.找到字符串中所有字母异位词<br>567. 字符串的排列<br>76. 最小覆盖子串</p><ol start="383"><li>赎金信</li><li>有效的字母异位词</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用map的空间消耗要比数组大一些的，因为map要维护红黑树或者哈希表，而且还要做哈希函数，是费时的！数据量大的话就能体现出来差别了。 所以数组更加简单直接有效！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;magazine.length();i++)&#123;</span><br><span class="line">            ints[magazine.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ransomNote.length();i++)&#123;</span><br><span class="line">            ints[ransomNote.charAt(i)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(ints[ransomNote.charAt(i)-<span class="string">&#x27;a&#x27;</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ByMySelf 不如上述简洁，空间消耗也大</span></span><br><span class="line">    <span class="comment">//幸亏后面发现了自己的问题，不然还自得的用自己的这个蠢办法</span></span><br><span class="line">    <span class="comment">//从leetcode运行看，确实快了特别多4&gt;18ms</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct2</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; magCh = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;magazine.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(magCh.containsKey(magazine.charAt(i)))&#123;</span><br><span class="line">                magCh.put(magazine.charAt(i),<span class="number">1</span>+magCh.get(magazine.charAt(i)));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                magCh.put(magazine.charAt(i),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ransomNote.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(magCh.containsKey(ransomNote.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">if</span>(magCh.get(ransomNote.charAt(i))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    magCh.put(ransomNote.charAt(i),magCh.get(ransomNote.charAt(i))-<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p><a href="https://www.zhihu.com/question/21923021/answer/281346746">海纳-知乎</a><br><a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC">代码随想录</a></p><p>KMP的经典思想就是:当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。<br>前缀表(next数组)：记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。<br>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串。<br>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串。</p><p>部分匹配表(Partial Match Table)<br>PMT中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度。<br>如果字符串A和B，存在A=BS，其中S是任意的非空字符串，那就称B为A的前缀。例如，”Harry”的前缀包括{”H”, ”Ha”, ”Har”, ”Harr”}，我们把所有前缀组成的集合，称为字符串的前缀集合。同样可以定义后缀A=SB， 其中S是任意的非空字符串，那就称B为A的后缀，例如，”Potter”的后缀包括{”otter”, ”tter”, ”ter”, ”er”, ”r”}，然后把所有后缀组成的集合，称为字符串的后缀集合。要注意的是，字符串本身并不是自己的后缀。</p><p>最长公共前后缀（最长相等前后缀）<br>使用前缀表可以告诉我们匹配失败之后跳到哪里重新匹配</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城-分布式基础</title>
      <link href="/2022/10/03/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/10/03/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E-%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="项目框架图"><a href="#项目框架图" class="headerlink" title="项目框架图"></a>项目框架图</h1><p><img src="https://img-blog.csdnimg.cn/a702d31c9b444e99b7203706a67eb15d.png" alt="谷粒商城-微服务架构图"></p><h1 id="分布式基础概念"><a href="#分布式基础概念" class="headerlink" title="分布式基础概念"></a>分布式基础概念</h1><p>• 微服务、注册中心、配置中心、远程调用、Feign、网关<br>• 2、基础开发<br>• SpringBoot2.0、SpringCloud、Mybatis-Plus、Vue组件化、阿里云对象存储<br>• 3、环境<br>• Vagrant、Linux、Docker、MySQL、Redis、逆向工程&amp;人人开源<br>• 4、开发规范<br>• 数据校验JSR303、全局异常处理、全局统一返回、全局跨域处理<br>• 枚举状态、业务状态码、VO与TO与PO划分、逻辑删除<br>• Lombok：@Data、@Slf4j</p><h1 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h1><p>本项目全部都采用了最新配置，和视频版本不一样。报错改了好久。</p><h1 id="待完成"><a href="#待完成" class="headerlink" title="待完成"></a>待完成</h1><p>单点登录整合jwt?</p><p>柔性事务-可靠消息+最终一致性方案，可靠消息记录日志</p><h1 id="一些奇怪的业务："><a href="#一些奇怪的业务：" class="headerlink" title="一些奇怪的业务："></a>一些奇怪的业务：</h1><p>订单确认页的订单无需提交，直接去购物车里再获取一次，防止订单确认页还未提交，购物车又新加了新的东西。</p><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><p>响应式编程Mono Flux</p><h2 id="老师解决循环依赖的方式–天书"><a href="#老师解决循环依赖的方式–天书" class="headerlink" title="老师解决循环依赖的方式–天书"></a>老师解决循环依赖的方式–天书</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//@Resource</span></span><br><span class="line">    RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//    public MyRabbitConfig(RabbitTemplate rabbitTemplate)&#123;</span></span><br><span class="line">    <span class="comment">//        this.rabbitTemplate = rabbitTemplate;</span></span><br><span class="line">    <span class="comment">//        initRabbitTemplate();</span></span><br><span class="line">    <span class="comment">//    &#125;</span></span><br><span class="line">    <span class="meta">@Primary</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(ConnectionFactory connectionFactory)</span></span>&#123;</span><br><span class="line">        RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(connectionFactory);</span><br><span class="line">        <span class="keyword">this</span>.rabbitTemplate = rabbitTemplate;</span><br><span class="line">        rabbitTemplate.setMessageConverter(messageConverter());</span><br><span class="line">        initRabbitTemplate();</span><br><span class="line">        <span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="日期时间"><a href="#日期时间" class="headerlink" title="日期时间"></a>日期时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">Long startTime = session.getStartTime().getTime();</span><br><span class="line">Long endTime = session.getEndTime().getTime();</span><br><span class="line"><span class="keyword">long</span> time = <span class="keyword">new</span> Date().getTime();</span><br><span class="line"><span class="keyword">if</span> (time &gt;= start &amp;&amp; time &lt;= end) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2020-02-21 00:00:00   2020-02-23 23:59:59</span></span><br><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate plus = now.plusDays(<span class="number">1</span>);</span><br><span class="line">LocalDate plus2 = now.plusDays(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(now);</span><br><span class="line">System.out.println(plus);</span><br><span class="line">System.out.println(plus2);</span><br><span class="line"></span><br><span class="line">LocalTime min = LocalTime.MIN;</span><br><span class="line">LocalTime max = LocalTime.MAX;</span><br><span class="line">System.out.println(min);</span><br><span class="line">System.out.println(max);</span><br><span class="line"></span><br><span class="line">LocalDateTime start = LocalDateTime.of(now, min);</span><br><span class="line">LocalDateTime end = LocalDateTime.of(plus2, max);</span><br><span class="line">System.out.println(start);</span><br><span class="line">System.out.println(end);</span><br><span class="line"></span><br><span class="line">LocalDate now = LocalDate.now();</span><br><span class="line">LocalDate localDate = now.plusDays(<span class="number">2</span>);</span><br><span class="line">LocalDateTime of = LocalDateTime.of(localDate, LocalTime.MAX);</span><br><span class="line">String format = of.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class="line">System.out.println(format);</span><br><span class="line">    </span><br></pre></td></tr></table></figure><p>redis key和value都是string，需要熟悉javaapi<br>//获取这个key前缀下所有的数据<br>Set<String> keys = redisTemplate.keys(SESSIONS_CACHE_PREFIX + “*”);<br>List<String> list = hashOps.multiGet(range);//获取多个Key<br>setIfAbsent只有不存在才占位，原子性</p><p>对于经常查询的字段要加上索引</p><p>@GetMapping(value = “/payOrder”,produces = “text/html”)<br>produces产生的是什么类型的数据，网页text/html，还有application/json<br>produces = MediaType.TEXT_HTML_VALUE</p><p>代理对象</p><p>JPA是Java Persistence API的简称，中文名Java持久层API</p><p>bigDecimal的语法<br>BigDecimal bigDecimal = order.getPayAmount().setScale(2, BigDecimal.ROUND_UP);</p><p>浮点数比较：<br>if (Math.abs(payAmount.subtract(payPrice).doubleValue()) &lt; 0.01) {</p><p>将<code>List&lt;String&gt;</code>转为String，用,分隔<br>String skuAttr = StringUtils.collectionToDelimitedString(cartItem.getSkuAttr(), “;”);</p><p>生成订单号：时间 ID = Time + ID<br>String orderSn = IdWorker.getTimeId();</p><p>将一个实体的值复制到另一个实体，不需要单独一个个get,set了<br>BeanUtils.copyProperties(attr,attrEntity);</p><p>大数据情况下不建议联表查询，笛卡尔积，应分开查询</p><p>日期格式化 统一设置<br>spring<br>  jackson:<br>    date-format: yyyy-MM-dd HH:mm:ss</p><p>ge &gt;=<br>gt &gt;<br>le &lt;=</p><p>如果传过来的数据可能为空，用包装类</p><p>对于不重要查询失败错误，不要回滚事务，直接trycatch不进行处理</p><p>对于部分数据可能有取消原有信息的处理：直接先全部删除所有数据，再依次添加新数据，不用依次判断是否删除数据。</p><p>配置web服务implements WebMvcConfigurer</p><p>parentPath.toArray(new Long[0]);<br>区别(new Long[])parentPath.toArray()</p><p>循环查库<br>循环依赖</p><p>锁机制</p><p>查看端口占用以及查看占用的应用 windows&amp;&amp;linux</p><p>购物车如何同步最新价格？目前是购物车付款时要查询最新的价格。</p><p>？？？<br>RedirectAttributes ra<br>ra.addFlashAttribute();将数据放在session里面可以在页面取出，但是只能取一次<br>ra.addAttribute(“skuId”,skuId);将数据放在url后面</p><p>贫血模型和充血模型</p><p>复杂的json网上可以直接生成java实体类 bejson.com</p><p>stream.map和ForEach区别</p><p>BigDecimal的比较<br>skuReductionTo.getFullPrice().compareTo(new BigDecimal(“0”)) == 1</p><p>给前端返回错误消息，Model model<br>            model.addAttribute(“errors”,errors);</p><p>对于不是json数据的，如表单里的kv，就不用requestBody</p><ul><li><p>排除数据源相关的配置<br>@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})</p></li><li><p>熟悉流式编程<br>过滤、排序、统计分组<br>多线程高效</p></li><li><p>return “redirect:/login.html”;//使用重定向:防止数据重复提交</p><h2 id="打包项目"><a href="#打包项目" class="headerlink" title="打包项目"></a>打包项目</h2><p>不需要打开idea<br>直接在文件夹带pom的目录下，进入命令行<br>mvn clean package -Dmaven.skip.test=true<br>然后分别找到打包好的项目启动<br>mvn install装到仓库，本地有了？？？<br>java -jar .\xxl-sso-web-sample-springboot-1.1.1-SNAPSHOT.jar –server.port=8081</p></li></ul><h2 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h2><p>只能用@Resource，不能用@AutoWired，不知道是不是我自己这边的问题<br>注意用Resource名字必须用stringRedisTemplate，不能用redisTemplate<br>因为是按名字注入的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line">StringRedisTemplate stringRedisTemplate;</span><br></pre></td></tr></table></figure><h2 id="Lambda-表达式中访问的局部变量不能为变量"><a href="#Lambda-表达式中访问的局部变量不能为变量" class="headerlink" title="Lambda 表达式中访问的局部变量不能为变量"></a>Lambda 表达式中访问的局部变量不能为变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Long purchaseId = mergeVo.getPurchaseId();</span><br><span class="line"><span class="keyword">if</span>(purchaseId == <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    purchaseId = purchaseEntity.getId();</span><br><span class="line">&#125;</span><br><span class="line">Long finalPurchaseId = purchaseId;</span><br></pre></td></tr></table></figure><ul><li>这里finalPurchaseId和purchaseId没区别，final是因为lambda表达式的机制要求使用的局部变量不能为变量</li><li>Java 8 之后，在匿名类或 Lambda 表达式中访问的局部变量，如果不是 final 类型的话，编译器自动加上 final 修饰符，即Java8新特性：effectively final</li></ul><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><ul><li>设置容器自动启动<br>docker update redis –restart=always</li></ul><p>docker stat<br><img src="vx_images/71583919221067.png"></p><ul><li><p>linux的mysql和docker中的mysql端口碰撞<br><a href="https://blog.csdn.net/SjwFdb_1__1/article/details/121395526">3306: bind: address already in use</a><br>netstat -tanlp # 查看所有已被占用端口和所在进程ID<br>kill 101427 # 杀死当前进程</p></li><li><p>ctrl+alt+shift+u 查看Pom依赖冲突</p></li></ul><h1 id="整合MyBatis-Plus"><a href="#整合MyBatis-Plus" class="headerlink" title="整合MyBatis-Plus"></a>整合MyBatis-Plus</h1><p><mark>需要看文档熟悉</mark></p><p>1）、导入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 2）、配置<br> 1、配置数据源；<br> 1）、导入数据库的驱动。<a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html">https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html</a><br> 2）、在application.yml配置数据源相关信息<br> 2、配置MyBatis-Plus；<br> 1）、使用@MapperScan<br> 2）、告诉MyBatis-Plus，sql映射文件位置</p><h2 id="service中不需要手动注入dao"><a href="#service中不需要手动注入dao" class="headerlink" title="service中不需要手动注入dao"></a>service中不需要手动注入dao</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryDao</span>, <span class="title">CategoryEntity</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//继承的<span class="title">ServiceImpl</span>已经自动注入了<span class="title">baseMapper</span>就是<span class="title">CategoryDao</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ServiceImpl</span>&lt;<span class="title">M</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Log log = LogFactory.getLog(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> M baseMapper;</span><br></pre></td></tr></table></figure><h2 id="自定义属性"><a href="#自定义属性" class="headerlink" title="自定义属性"></a>自定义属性</h2><p>@TableField(exist = false)<br>private List<CategoryEntity> childrean;</p><h2 id="只有当该字段不为空时，才返回"><a href="#只有当该字段不为空时，才返回" class="headerlink" title="只有当该字段不为空时，才返回"></a>只有当该字段不为空时，才返回</h2><p>@JsonInclude(JsonInclude.Include.NON_EMPTY)<br>应用场景：三级分类最后一个分类的子分类children字段不需要置为空，而是直接不需要</p><h2 id="逻辑删除"><a href="#逻辑删除" class="headerlink" title="逻辑删除"></a>逻辑删除</h2><p> 1）、配置全局的逻辑删除规则（省略）</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line"> <span class="attr">mapper-locations:</span> <span class="string">classpath:/mapper/**/*.xml</span></span><br><span class="line"> <span class="attr">global-config:</span></span><br><span class="line">   <span class="attr">db-config:</span></span><br><span class="line">     <span class="attr">id-type:</span> <span class="string">auto</span></span><br><span class="line">     <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">     <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><p> 2）、配置逻辑删除的组件Bean（低版本）<br> 3）、给Bean加上逻辑删除注解@TableLogic</p><h2 id="批量删除"><a href="#批量删除" class="headerlink" title="批量删除"></a>批量删除</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatchRelation&quot;</span>&gt;</span></span><br><span class="line">        DELETE FROM `pms_attr_attrgroup_relation` WHERE</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;entities&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot; OR &quot;</span>&gt;</span></span><br><span class="line">            (attr_id=#&#123;item.attrId&#125; AND attr_group_id=#&#123;item.attrGroupId&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="非自增主键"><a href="#非自增主键" class="headerlink" title="非自增主键"></a>非自增主键</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IdType</span> </span>&#123;</span><br><span class="line">     <span class="comment">//数据库ID自增</span></span><br><span class="line">    AUTO(<span class="number">0</span>),</span><br><span class="line">    <span class="comment">// 该类型为未设置主键类型(注解里等于跟随全局,全局里约等于 INPUT)</span></span><br><span class="line">    NONE(<span class="number">1</span>),</span><br><span class="line">    <span class="comment">//用户输入ID：该类型可以通过自己注册自动填充插件进行填充</span></span><br><span class="line">    INPUT(<span class="number">2</span>),</span><br><span class="line">    </span><br><span class="line"><span class="meta">@TableId(type = IdType.INPUT)</span></span><br><span class="line"><span class="keyword">private</span> Long spuId;</span><br></pre></td></tr></table></figure><h1 id="springcloud"><a href="#springcloud" class="headerlink" title="springcloud"></a>springcloud</h1><p>结合 SpringCloud Alibaba 我们最终的技术搭配方案：<br>SpringCloud Alibaba - Nacos：注册中心（服务发现/注册）<br>SpringCloud Alibaba - Nacos：配置中心（动态配置管理）<br>SpringCloud - Ribbon：负载均衡<br>SpringCloud - Feign：声明式 HTTP 客户端（调用远程服务）<br>SpringCloud Alibaba - Sentinel：服务容错（限流、降级、熔断）<br>SpringCloud - Gateway：API 网关（<mark>webflux </mark>编程模式）<br>SpringCloud - Sleuth：调用链监控<br>SpringCloud Alibaba - Seata：原 Fescar，即分布式事务解决方案</p><h1 id="feign"><a href="#feign" class="headerlink" title="feign"></a>feign</h1><p> 1、想要远程调用别的服务<br> 1）、引入open-feign</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">//一定要加</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-loadbalancer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 2）、编写一个接口，告诉SpringCloud这个接口需要调用远程服务<br>   1、声明接口的每一个方法都是调用哪个远程服务的那个请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;gulimall-coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CouponFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/coupon/coupon/member/list&quot;)</span> <span class="comment">//地址要写全</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">memberCoupons</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3）、开启远程调用功能<br> @EnableFeignClients(basePackages = “com.vinson.gulimall.member.feign”)</p><h2 id="两种请求模式"><a href="#两种请求模式" class="headerlink" title="两种请求模式"></a>两种请求模式</h2><p>1)、让所有请求过网关；<br>    1、@FeignClient(“gulimall-gateway”)：给gulimall-gateway所在的机器发请求<br>    2、/api/product/skuinfo/info/{skuId}<br>2）、直接让后台指定服务处理<br>    1、@FeignClient(“gulimall-product”)<br>    2、/product/skuinfo/info/{skuId}</p><h2 id="实体类无需一致"><a href="#实体类无需一致" class="headerlink" title="实体类无需一致"></a>实体类无需一致</h2><p>1、CouponFeignService.saveSpuBounds(spuBoundTo);<br>1）、@RequestBody将这个对象转为json。<br>2）、找到gulimall-coupon服务，给/coupon/spubounds/save发送请求。<br>将上一步转的json放在请求体位置，发送请求；<br>3）、对方服务收到请求。请求体里有json数据。<br>(@RequestBody SpuBoundsEntity spuBounds)；将请求体的json转为SpuBoundsEntity；<br>只要json数据模型是兼容的。双方服务无需使用同一个to</p><h2 id="传输的类型"><a href="#传输的类型" class="headerlink" title="传输的类型"></a>传输的类型</h2><p>返回都是R，现在需要将R转为具体某个实体类<br>1、R设计的时候加上泛型<br>R是HashMap，无法使用泛型！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.data = data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/hasstock&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;List&lt;SkuHasStockVo&gt;&gt; getSkuHasStock(<span class="meta">@RequestBody</span> List&lt;Long&gt; skuIds) &#123;</span><br><span class="line">        List&lt;SkuHasStockVo&gt; vos = wareSkuService.getSkuHasStock(skuIds);</span><br><span class="line">        R&lt;List&lt;SkuHasStockVo&gt;&gt; ok = R.ok();</span><br><span class="line">        ok.setData(vos);</span><br><span class="line">        <span class="keyword">return</span> ok;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">R&lt;List&lt;SkuHasStockVo&gt;&gt; skuHasStock = wareFeignService.getSkuHasStock(skuIdList);</span><br><span class="line">List&lt;SkuHasStockVo&gt; data = skuHasStock.getData();</span><br></pre></td></tr></table></figure><p>2、直接返回想要的实体的类型<br>3、自己封装解析结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span> <span class="keyword">extends</span> <span class="title">HashMap</span>&lt;<span class="title">String</span>, <span class="title">Object</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">put(<span class="string">&quot;data&quot;</span>,data);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//利用fastjson逆转</span></span><br><span class="line"><span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getData</span><span class="params">(TypeReference&lt;T&gt; typeReference)</span></span>&#123;</span><br><span class="line">Object data = get(<span class="string">&quot;data&quot;</span>);<span class="comment">//默认map类型</span></span><br><span class="line">String s = JSON.toJSONString(data);</span><br><span class="line">T t = JSON.parseObject(s, typeReference);</span><br><span class="line"><span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="meta">@PostMapping(&quot;/hasstock&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">getSkuHasStock</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;Long&gt; skuIds)</span> </span>&#123;</span><br><span class="line">        List&lt;SkuHasStockVo&gt; vos = wareSkuService.getSkuHasStock(skuIds);</span><br><span class="line">        <span class="keyword">return</span>  R.ok().setData(vos);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">R hasStock = wareFeignService.getSkuHasStock(skuIdList);</span><br><span class="line">            <span class="comment">//受保护，内部类</span></span><br><span class="line">            TypeReference&lt;List&lt;SkuHasStockVo&gt;&gt; typeReference = <span class="keyword">new</span> TypeReference&lt;List&lt;SkuHasStockVo&gt;&gt;() &#123;</span><br><span class="line">            &#125;;</span><br><span class="line">            sotckMap = hasStock.getData(typeReference).stream().collect(Collectors.toMap(SkuHasStockVo::getSkuId, item -&gt; item.getHasStock()));</span><br></pre></td></tr></table></figure><h2 id="远程调用可能会出现异常"><a href="#远程调用可能会出现异常" class="headerlink" title="远程调用可能会出现异常"></a>远程调用可能会出现异常</h2><p>对于查询需求，try-catch一下，然后给个默认值，不需要中断。</p><h2 id="feign调用机制"><a href="#feign调用机制" class="headerlink" title="feign调用机制"></a>feign调用机制</h2><p>Feign调用机制<br>1.构造请求数据,将对象转换为json<br>RequestTemplate template=buildTemplateFromArgs.create(argv);<br>2.发送请求执行(执行成功会解码响应数据)<br>executeAndDecode(template)<br>3.执行请求会有重试机制<br>while(true){<br>    try{<br>        executeAndDecode(template);<br>        }catch(){<br>            try{<br>            retryer.continueOrPropagate(e);<br>        }catch{<br>            throw ex;<br>        }<br>            continue;<br>        }<br>}</p><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p> 1）、引入依赖，</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">//一定要加</span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-bootstrap<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 2）、创建一个bootstrap.properties。<br> spring.application.name=gulimall-coupon<br> spring.cloud.nacos.config.server-addr=127.0.0.1:8848<br> 3）、需要给配置中心默认添加一个叫 数据集（Data Id）gulimall-coupon.properties。默认规则，应用名.properties<br> 4）、给 应用名.properties 添加任何配置<br> 5）、动态获取配置。<br> @RefreshScope：动态获取并刷新配置<br> @Value(“${配置项的名}”)：获取到配置。<br> 如果配置中心和当前应用的配置文件中都配置了相同的项，优先使用配置中心的配置。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p> 1）、命名空间：配置隔离；<br> 默认：public(保留空间)；默认新增的所有配置都在public空间。<br> 1、开发，测试，生产：利用命名空间来做环境隔离。<br> 注意：在bootstrap.properties；配置上，需要使用哪个命名空间下的配置，<br> spring.cloud.nacos.config.namespace=9de62e44-cd2a-4a82-bf5c-95878bd5e871<br> 2、每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置</p><p> 2）、配置集：所有的配置的集合</p><p> 3）、配置集ID：类似文件名。<br> Data ID：类似文件名</p><p> 4）、配置分组：<br> 默认所有的配置集都属于：DEFAULT_GROUP；<br> 1111，618，1212<br> spring.cloud.nacos.config.group=1111</p><p> 项目中的使用：每个微服务创建自己的命名空间，使用配置分组区分环境，dev，test，prod</p><p> 3、同时加载多个配置集<br> 1)、微服务任何配置信息，任何配置文件都可以放在配置中心中<br> 2）、只需要在bootstrap.properties说明加载配置中心中哪些配置文件即可<br> 3）、@Value，@ConfigurationProperties。。。<br> 以前SpringBoot任何方法从配置文件中获取值，都能使用。<br> 配置中心有的优先使用配置中心中的，</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">d5c78392-5fd3-4737-ab6e-3d3038f7bd82</span></span><br><span class="line"><span class="comment"># 默认的配置分组</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">datasource.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].data-id</span>=<span class="string">mybatis.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].data-id</span>=<span class="string">other.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h1 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h1><p><img src="https://img-blog.csdnimg.cn/cc24ba82594e4d94b38e126e7e4c9964.png" alt="在这里插入图片描述"></p><p>将renren-fast加入到注册中心，需要加cloud配置，一定要和原Boot版本对应！！！<br><a href="http://localhost:88/api/captcha.jpg">http://localhost:88/api/captcha.jpg</a><br><a href="http://localhost:8080/renren-fast/captcha.jpg">http://localhost:8080/renren-fast/captcha.jpg</a><br><a href="http://localhost:88/api/product/category/list/tree">http://localhost:88/api/product/category/list/tree</a><br><a href="http://localhost:10000/product/category/list/tree">http://localhost:10000/product/category/list/tree</a><br>通过过滤方法中的路径转换功能</p><ul><li>需要注意的是路由的顺序是由上至下，精确的应该放上面，粗略的放下面</li><li>新版的路径需要加个？</li><li>并且加上Loadbalancer依赖，版本一定要和cloud,boot对应！！！<dependency>          <groupId>org.springframework.cloud</groupId>          <artifactId>spring-cloud-starter-loadbalancer</artifactId>          <version>3.1.1</version></dependency></li></ul><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">gateway:</span></span><br><span class="line">      <span class="attr">discovery:</span></span><br><span class="line">        <span class="attr">locator:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span> <span class="comment">#开启从注册中心动态创建路由的功能，利用微服务名进行路由</span></span><br><span class="line">      <span class="attr">routes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">product_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://gulimall-product</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/product/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/?(?&lt;segment&gt;.*),/$\&#123;segment&#125;</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">id:</span> <span class="string">admin_route</span></span><br><span class="line">          <span class="attr">uri:</span> <span class="string">lb://renren-fast</span></span><br><span class="line">          <span class="attr">predicates:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">Path=/api/**</span></span><br><span class="line">          <span class="attr">filters:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">RewritePath=/api/?(?&lt;segment&gt;.*),/renren-fast/$\&#123;segment&#125;</span></span><br></pre></td></tr></table></figure><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p>跨域：指的是浏览器不能执行其他网站的脚本。它是由浏览器的同源策略造成的，是<br>浏览器对javascript施加的安全限制。<br>• 同源策略：是指协议，域名，端口都要相同，其中有一个不同都会产生跨域；<br><img src="https://img-blog.csdnimg.cn/7e1440898aa54ae4a82949e1f4d9b273.png"><br><img src="https://img-blog.csdnimg.cn/09c86d289b4b4daa8360f041dc6951ac.png"><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">官网</a></p><h3 id="使用nginx部署为同一域"><a href="#使用nginx部署为同一域" class="headerlink" title="使用nginx部署为同一域"></a>使用nginx部署为同一域</h3><p><img src="https://img-blog.csdnimg.cn/c22f3d3f1ff94a94bd438359366cfab6.png"><br>不适合开发阶段</p><h3 id="配置当次请求允许跨域"><a href="#配置当次请求允许跨域" class="headerlink" title="配置当次请求允许跨域"></a>配置当次请求允许跨域</h3><p>1、添加响应头<br>Access-Control-Allow-Origin：支持哪些来源的请求跨域<br>Access-Control-Allow-Methods：支持哪些方法跨域<br>Access-Control-Allow-Credentials：跨域请求默认不包含cookie，设置为true可以包含<br>cookie<br>Access-Control-Expose-Headers：跨域请求暴露的字段<br>CORS请求时，XMLHttpRequest对象的getResponseHeader()方法只能拿到6个基本字段：<br>Cache-Control、Content-Language、Content-Type、Expires、Last-Modified、Pragma。如果想拿到其他字段，就必须在Access-Control-Expose-Headers里面指定。<br>Access-Control-Max-Age：表明该响应的有效时间为多少秒。在有效时间内，浏览器无须为同一请求再次发起预检请求。请注意，浏览器自身维护了一个最大有效时间，如果该首部字段的值超过了最大有效时间，将不会生效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GuliCorsConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsWebFilter <span class="title">corsWebFilter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.addAllowedOriginPattern(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        corsConfiguration.setAllowCredentials(<span class="keyword">true</span>);</span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>,corsConfiguration);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsWebFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@RequestBody:获取请求体，必须发送POST请求<br>SpringMVC自动将请求体的数据（json），转为对应的对象</p><h1 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h1><p>阿里云的对象存储<br><img src="https://img-blog.csdnimg.cn/1a15b6353e114b77af16d875a0faf785.png"></p><h2 id="普通上传方式"><a href="#普通上传方式" class="headerlink" title="普通上传方式"></a>普通上传方式</h2><p>用户经服务器上传，会影响带宽，加大压力</p><h2 id="服务端签名后直传"><a href="#服务端签名后直传" class="headerlink" title="服务端签名后直传"></a>服务端签名后直传</h2><p><img src="https://img-blog.csdnimg.cn/9aa74ca29a2144038d6c698a6f19cbc5.png"><br>看官网<br> 1、引入oss-starter<br> 2、配置key，endpoint相关信息即可<br> 3、使用OSSClient 进行相关操作</p><h1 id="JSR303数据校验"><a href="#JSR303数据校验" class="headerlink" title="JSR303数据校验"></a>JSR303数据校验</h1><p>1）、给Bean添加校验注解:javax.validation.constraints，并定义自己的message提示<br>@NotBlank(message = “品牌名必须提交”)<br>2)、开启校验功能@Valid<br>public R save(@Valid @RequestBody BrandEntity brand){<br>效果：校验错误以后会有默认的响应；<br>3）、给校验的bean后紧跟一个BindingResult，就可以获取到校验的结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(<span class="meta">@Valid</span> UserRegistVo vo, BindingResult result, Model model)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors())&#123;</span><br><span class="line">            <span class="comment">//法一</span></span><br><span class="line"><span class="comment">//            result.getFieldErrors().stream().map(fieldError -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                HashMap&lt;String, String&gt; errors = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="comment">//                String field = fieldError.getField();</span></span><br><span class="line"><span class="comment">//                String message = fieldError.getDefaultMessage();</span></span><br><span class="line"><span class="comment">//                errors.put(field,message);</span></span><br><span class="line"><span class="comment">//                return errors;</span></span><br><span class="line"><span class="comment">//            &#125;);</span></span><br><span class="line">            <span class="comment">//法二</span></span><br><span class="line"><span class="comment">//            Map&lt;String, String&gt; errors = result.getFieldErrors().stream().collect(Collectors.toMap(fieldError -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                return fieldError.getField();</span></span><br><span class="line"><span class="comment">//            &#125;, fieldError -&gt; &#123;</span></span><br><span class="line"><span class="comment">//                return fieldError.getDefaultMessage();</span></span><br><span class="line"><span class="comment">//            &#125;));</span></span><br><span class="line">            <span class="comment">//法三：简写</span></span><br><span class="line">            Map&lt;String, String&gt; errors = result.getFieldErrors().stream().collect(</span><br><span class="line">                    Collectors.toMap(FieldError::getField, FieldError::getDefaultMessage));</span><br><span class="line">            model.addAttribute(<span class="string">&quot;errors&quot;</span>,errors);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;forward:/reg.html&quot;</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>4）、分组校验（多场景的复杂校验）<br>1)、    @NotBlank(message = “品牌名必须提交”,groups = {AddGroup.class,UpdateGroup.class})<br>给校验注解标注什么情况需要进行校验<br>2）、@Validated({AddGroup.class})<br>3)、默认没有指定分组的校验注解@NotBlank，在分组校验情况@Validated({AddGroup.class})下不生效，只会在@Validated生效；</p><p>5）、自定义校验<br>1）、编写一个自定义的校验注解<br>2）、编写一个自定义的校验器 ConstraintValidator<br>3）、关联自定义的校验器和自定义的校验注解<br>看源码实现自定义，找格式搬</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="comment">//可以指定多个不同的校验器，适配不同类型的校验</span></span><br><span class="line"><span class="meta">@Constraint(</span></span><br><span class="line"><span class="meta">        validatedBy = &#123;ListValueConstraintValidator.class&#125;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="meta">@Target(&#123;ElementType.METHOD, ElementType.FIELD, ElementType.ANNOTATION_TYPE, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.TYPE_USE&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> ListValue &#123;</span><br><span class="line">    <span class="function">String <span class="title">message</span><span class="params">()</span> <span class="keyword">default</span> &quot;</span>&#123;com.vinson.common.validator.group.ListValue.message&#125;<span class="string">&quot;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;?&gt;[] groups() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Class&lt;? extends Payload&gt;[] payload() default &#123;&#125;;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    int[] vals() default &#123;&#125;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListValueConstraintValidator</span> <span class="keyword">implements</span> <span class="title">ConstraintValidator</span>&lt;<span class="title">ListValue</span>,<span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Set&lt;Integer&gt; set=<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initialize</span><span class="params">(ListValue listValue)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] vals = listValue.vals();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> val : vals) &#123;</span><br><span class="line">            set.add(val);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//校验</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(Integer integer, ConstraintValidatorContext constraintValidatorContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> set.contains(integer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@NotBlank(message = “品牌名必须提交”)  至少一个字符<br>@NotEmpty可以为空串<br>@Min(value = 0)</p><h1 id="统一的异常处理"><a href="#统一的异常处理" class="headerlink" title="统一的异常处理"></a>统一的异常处理</h1><p> @ControllerAdvice<br> 1）、编写异常处理类，使用@ControllerAdvice。<br> 2）、使用@ExceptionHandler标注方法可以处理的异常。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestControllerAdvice(basePackages = &quot;com.vinson.gulimall.product.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GulimallExceptionControllerAdvice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = MethodArgumentNotValidException.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleValidException</span><span class="params">(MethodArgumentNotValidException e)</span> </span>&#123;</span><br><span class="line">        log.info(e.getMessage() + e.getClass());</span><br><span class="line">        BindingResult bindingResult = e.getBindingResult();</span><br><span class="line">        HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        bindingResult.getFieldErrors().forEach((item) -&gt; &#123;</span><br><span class="line">            map.put(item.getField(), item.getDefaultMessage());</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> R.error(<span class="number">400</span>, <span class="string">&quot;提交数据不合法&quot;</span>).put(<span class="string">&quot;data&quot;</span>, map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(value = Throwable.class)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">handleException</span><span class="params">(Throwable throwable)</span></span>&#123;</span><br><span class="line">        log.error(<span class="string">&quot;错误：&quot;</span>,throwable);<span class="comment">//需要输出log，不然报错啥也看不到</span></span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="系统错误码"><a href="#系统错误码" class="headerlink" title="系统错误码"></a>系统错误码</h2><p>错误码和错误信息定义类</p><ol><li>错误码定义规则为 5 为数字</li><li>前两位表示业务场景，最后三位表示错误码。例如：100001。10:通用 001:系统未知异常</li><li>维护错误码后需要维护错误描述，将他们定义为枚举形式<br>错误码列表：<br>10: 通用<br>001：参数格式校验<br>11: 商品<br>12: 订单<br>13: 购物车<br>14: 物流</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">BizCodeEnum</span> </span>&#123;</span><br><span class="line">    UNKNOW_EXCEPTION(<span class="number">10000</span>,<span class="string">&quot;系统未知异常&quot;</span>),</span><br><span class="line">    VAILD_EXCEPTION(<span class="number">10001</span>,<span class="string">&quot;参数格式校验失败&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    BizCodeEnum(<span class="keyword">int</span> code,String msg)&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> R.error(BizCodeEnum.UNKNOW_EXCEPTION.getCode(), BizCodeEnum.UNKNOW_EXCEPTION.getMsg());</span><br></pre></td></tr></table></figure><h1 id="SPU-与-SKU"><a href="#SPU-与-SKU" class="headerlink" title="SPU 与 SKU"></a>SPU 与 SKU</h1><p>SPU：Standard Product Unit（标准化产品单元）<br>是商品信息聚合的最小单位，是一组可复用、易检索的标准化信息的集合，该集合描述了一个产品的特性。<br>SKU：Stock Keeping Unit（库存量单位）<br>即库存进出计量的基本单元，可以是以件，盒，托盘等为单位。SKU 这是对于大型连锁超市DC（配送中心）物流管理的一个必要的方法。现在已经被引申为产品统一编号的简称，每种产品均对应有唯一的 SKU 号。</p><p>基本属性【规格参数】与销售属性<br>每个分类下的商品共享规格参数，与销售属性。只是有些商品不一定要用这个分类下全部的<br>属性；<br> 属性是以三级分类组织起来的<br> 规格参数中有些是可以提供检索的<br> 规格参数也是基本属性，他们具有自己的分组<br> 属性的分组也是以三级分类组织起来的<br> 属性名确定的，但是值是每一个商品不同来决定的</p><p>spu举例<br><img src="https://img-blog.csdnimg.cn/ca3c251fe8e44098b36367ada068c58d.png" alt="三级分类表"><br>sku举例<br><img src="https://img-blog.csdnimg.cn/67a53797f00b4691b67af0980b4d4cf7.png"><br>数据库设计<br><img src="https://img-blog.csdnimg.cn/417cb3739acf45a986853367a61367d3.png"><br><img src="https://img-blog.csdnimg.cn/1729836b28ea41c7ae06b3c1c4fc9e63.png"></p><h1 id="Object-划分"><a href="#Object-划分" class="headerlink" title="Object 划分"></a>Object 划分</h1><ul><li>PO(persistant object) 持久对象</li><li>DO（Domain Object）领域对象</li><li>TO(Transfer Object) ，数据传输对象<br>A传给B，通过Json的形式，两边都是object，不涉及页面，只在服务之间</li><li>DTO（Data Transfer Object）数据传输对象</li><li>VO(value object) 值对象<br>  View Object：视图对象<br>  不是数据库的数据<br>  接受页面传递来的数据，封装对象<br>  将业务处理完成的对象，封装成页面要用的数据</li><li>BO(business object) 业务对象<br>  我们可以把教育经历对应一个 PO ，工作经历对应一个 PO ，社会关系对应一个 PO 。 建立一个对应简历的               BO 对象处理简历</li><li>POJO(plain ordinary java object) 简单无规则 java 对象</li><li>DAO(data access object) 数据访问对象</li></ul><h1 id="实体类的构造"><a href="#实体类的构造" class="headerlink" title="实体类的构造"></a>实体类的构造</h1><p>优惠生效情况[1111（四个状态位，从右到左）;0 - 无优惠，成长积分是否赠送;1 - 无优惠，购物积分是否赠送;2 - 有优惠，成长积分是否赠送;3 - 有优惠，购物积分是否赠送【状态位0：不赠送，1：赠送】]<br>private Integer work;</p><h1 id="采购流程"><a href="#采购流程" class="headerlink" title="采购流程"></a>采购流程</h1><p>定时任务<br><img src="https://img-blog.csdnimg.cn/1f43935fd0374c6fbac1d853f5785fc0.png"><br>待完善：</p><ul><li>失败理由</li><li>部分失败，应采购10，实采购8</li></ul><h1 id="三级分类"><a href="#三级分类" class="headerlink" title="三级分类"></a>三级分类</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CategoryEntity&gt; <span class="title">listWithTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1查出所有分类</span></span><br><span class="line">        List&lt;CategoryEntity&gt; entities = baseMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        <span class="comment">//2组装父子结构</span></span><br><span class="line">        <span class="comment">//2.1 找到所有一级分类</span></span><br><span class="line">        List&lt;CategoryEntity&gt; level1Menus = entities.stream().filter((categoryEntity -&gt;</span><br><span class="line">                categoryEntity.getParentCid() == <span class="number">0</span>)</span><br><span class="line">        ).map((menu)-&gt;&#123;</span><br><span class="line">            menu.setChildren(getChildrens(menu,entities));</span><br><span class="line">            <span class="keyword">return</span> menu;</span><br><span class="line">        &#125;).sorted((menu1,menu2)-&gt;&#123;</span><br><span class="line">            <span class="keyword">return</span> (menu1.getSort()==<span class="keyword">null</span>?<span class="number">0</span>:menu1.getSort())-(menu2.getSort()==<span class="keyword">null</span>?<span class="number">0</span>:menu2.getSort());</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> entities;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//递归查找所有菜单的子菜单</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> List&lt;CategoryEntity&gt; <span class="title">getChildrens</span><span class="params">(CategoryEntity root,List&lt;CategoryEntity&gt; all)</span></span>&#123;</span><br><span class="line">        List&lt;CategoryEntity&gt; children = all.stream().filter(categoryEntity -&gt; categoryEntity.getParentCid() == root.getCatId()</span><br><span class="line">        ).map(categoryEntity -&gt; &#123;</span><br><span class="line">            categoryEntity.setChildren(getChildrens(categoryEntity, all));</span><br><span class="line">            <span class="keyword">return</span> categoryEntity;</span><br><span class="line">        &#125;).sorted((menu1, menu2) -&gt; &#123;</span><br><span class="line">            <span class="keyword">return</span> (menu1.getSort() == <span class="keyword">null</span> ? <span class="number">0</span> : menu1.getSort()) - (menu2.getSort() == <span class="keyword">null</span> ? <span class="number">0</span> : menu2.getSort());</span><br><span class="line">        &#125;).collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 谷粒商城 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2022/09/30/KMP/"/>
      <url>/2022/09/30/KMP/</url>
      
        <content type="html"><![CDATA[<p>待完成</p><p><a href="https://www.zhihu.com/question/21923021/answer/281346746">海纳-知乎</a><br><a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC">代码随想录</a></p><p>KMP的经典思想就是:当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。<br>前缀表(next数组)：记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。<br>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串。<br>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串。</p><p>部分匹配表(Partial Match Table)<br>PMT中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度。<br>如果字符串A和B，存在A=BS，其中S是任意的非空字符串，那就称B为A的前缀。例如，”Harry”的前缀包括{”H”, ”Ha”, ”Har”, ”Harr”}，我们把所有前缀组成的集合，称为字符串的前缀集合。同样可以定义后缀A=SB， 其中S是任意的非空字符串，那就称B为A的后缀，例如，”Potter”的后缀包括{”otter”, ”tter”, ”ter”, ”er”, ”r”}，然后把所有后缀组成的集合，称为字符串的后缀集合。要注意的是，字符串本身并不是自己的后缀。</p><p>最长公共前后缀（最长相等前后缀）<br>使用前缀表可以告诉我们匹配失败之后跳到哪里重新匹配</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小覆盖子串</title>
      <link href="/2022/09/26/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
      <url>/2022/09/26/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>待完成</p><p>针对这三道题算是找到了一套模板，都不是官解，好像也都不是一个人。</p><h1 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a></h1><p><a href="https://leetcode.cn/u/skyzhou/">skyzhou</a><br>刚开始还理解的不是很透彻。可认为3步走。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span> m = p.length();</span><br><span class="line">        <span class="comment">//第一步：长的大于短的(貌似是废话)</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计短的字符个数</span></span><br><span class="line">        <span class="keyword">int</span>[] alpha = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length(); i++) &#123;</span><br><span class="line">            alpha[p.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> right = <span class="number">0</span>; right &lt; s.length(); right++) &#123;</span><br><span class="line">            <span class="comment">//加入窗口</span></span><br><span class="line">            alpha[s.charAt(right) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="comment">//将不符合条件的字符从窗口删去</span></span><br><span class="line">            <span class="keyword">while</span> (alpha[s.charAt(right) - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                alpha[s.charAt(left) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//窗口长度等于短的：找到结果</span></span><br><span class="line">            <span class="keyword">if</span> (right - left + <span class="number">1</span> == p.length()) &#123;</span><br><span class="line">                ret.add(left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="567-字符串的排列"><a href="#567-字符串的排列" class="headerlink" title="567. 字符串的排列"></a><a href="https://leetcode.cn/problems/permutation-in-string/">567. 字符串的排列</a></h1><p>这题可任务和438一模一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//长度不够</span></span><br><span class="line">        <span class="keyword">if</span>(s1.length()&gt;s2.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计s1字符</span></span><br><span class="line">        <span class="keyword">int</span>[] alpha=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">            alpha[s1.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> right=<span class="number">0</span>;right&lt;s2.length();right++)&#123;</span><br><span class="line">            alpha[s2.charAt(right)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">while</span>(alpha[s2.charAt(right)-<span class="string">&#x27;a&#x27;</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                alpha[s2.charAt(left)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(right-left+<span class="number">1</span>==s1.length())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后看到评论区有人说76题也是类似的，又去挑战了这道困难题，其实昨天76题已经挑战失败了，昨天看到子数组分类时也是做了两题产生了对这题的信心，但是看题目就找不到感觉。</p><h1 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></h1><p>这题还是有感觉的，还是用上面的套路，但是在左移窗口时不知道判断条件怎么解决了，这道题的终止条件不应该是窗口与短的相同，所以不需要立即将窗口中不符合条件的字符删去。</p><p>但是找评论<a href="https://leetcode.cn/u/shapeng1998/">sp1998</a>还是找到了用这个套路解决的，非常简单，加个判断是否。</p><p>评论区也有人用了labuladong的方法做，但是那个模板比这个还是麻烦的，其实也挺相近。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 子字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺旋矩阵算法题总结</title>
      <link href="/2022/09/25/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/09/25/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>目前看到的是两题。可以用一种套路。<br>先看<a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a>比先看<a href="https://leetcode.cn/problems/spiral-matrix/">54.螺旋矩阵</a>更容易理解。59是正方形，54是长方形。</p><h1 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h1><p>参考<a href="https://leetcode.cn/problems/spiral-matrix-ii/solution/luo-xuan-ju-zhen-ii-by-leetcode-solution-f7fp/1298674">https://leetcode.cn/problems/spiral-matrix-ii/solution/luo-xuan-ju-zhen-ii-by-leetcode-solution-f7fp/1298674</a><br>官解确实不咋地，然后一开始看的是代码随想录的，能看懂，但是写的过程需要考虑的其实有点多，变量太多，还是这个最简洁。<br><a href="https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html#%E6%80%9D%E8%B7%AF">代码随想录</a>给出了一个重点是 <code>坚持循环不变量原则</code>，要么左闭右开，要么左开右闭，不能混着来。包括下面这个解也是。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] res=<span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">while</span> (k&lt;=n*n)&#123;</span><br><span class="line">            <span class="comment">//上边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">                res[t][i]=k++;</span><br><span class="line">            &#125;</span><br><span class="line">            t++;</span><br><span class="line">            <span class="comment">//右边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&lt;=b;i++)&#123;</span><br><span class="line">                res[i][r]=k++;</span><br><span class="line">            &#125;</span><br><span class="line">            r--;</span><br><span class="line">            <span class="comment">//下边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&gt;=l;i--)&#123;</span><br><span class="line">                res[b][i]=k++;</span><br><span class="line">            &#125;</span><br><span class="line">            b--;</span><br><span class="line">            <span class="comment">//左边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=b;i&gt;=t;i--)&#123;</span><br><span class="line">                res[i][l]=k++;</span><br><span class="line">            &#125;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54.螺旋矩阵"></a><a href="https://leetcode.cn/problems/spiral-matrix/">54.螺旋矩阵</a></h1><p><a href="https://leetcode.cn/problems/spiral-matrix/solution/cxiang-xi-ti-jie-by-youlookdeliciousc-3/">https://leetcode.cn/problems/spiral-matrix/solution/cxiang-xi-ti-jie-by-youlookdeliciousc-3/</a><br>类似t59，区别是一个正方形，一个是长方形，正方形时最后到最里面会同时越界，但是长方形时每条边都需要判断是否越界，一旦越界需要立刻退出循环，否则其他边未越界，还会继续输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=matrix.length;</span><br><span class="line">    <span class="keyword">int</span> m=matrix[<span class="number">0</span>].length;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r=m-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">            res.add(matrix[t][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        t++;</span><br><span class="line">        <span class="keyword">if</span>(t&gt;b)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&lt;=b;i++)&#123;</span><br><span class="line">            res.add(matrix[i][r]);</span><br><span class="line">        &#125;</span><br><span class="line">        r--;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;l)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&gt;=l;i--)&#123;</span><br><span class="line">            res.add(matrix[b][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        b--;</span><br><span class="line">        <span class="keyword">if</span>(b&lt;t)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=b;i&gt;=t;i--)&#123;</span><br><span class="line">            res.add(matrix[i][l]);</span><br><span class="line">        &#125;</span><br><span class="line">        l++;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 螺旋矩阵 </tag>
            
            <tag> 模拟过程 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据-电信客服项目</title>
      <link href="/2022/09/22/%E7%94%B5%E4%BF%A1%E5%AE%A2%E6%9C%8D%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/09/22/%E7%94%B5%E4%BF%A1%E5%AE%A2%E6%9C%8D%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><code>public &lt;T extends Data&gt; List&lt;T&gt; read(Class&lt;T&gt; clazz) throws IOException;</code></p><p><code>private volatile boolean flg=true;</code></p><p><code>//字符流-转换流-字节流</code><br><code>reader=new BufferedReader(new InputStreamReader(new FileInputStream(path),&quot;utf-8&quot;));</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字格式化为字符串，固定长度，不满补0  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> length)</span></span>&#123;  </span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;  </span><br><span class="line">        stringBuilder.append(<span class="string">&quot;0&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    DecimalFormat df=<span class="keyword">new</span> DecimalFormat(stringBuilder.toString());  </span><br><span class="line">    <span class="keyword">return</span> df.format(num);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反射一定要有无参构造</p><p>flume和kafka不创建主题时会自动创建，但是只有一个分区一个副本</p><p>在较新版本（2.2 及更高版本）的 Kafka 不再需要 ZooKeeper 连接字符串，即- -zookeeper localhost:2181。使用 Kafka Broker的 –bootstrap-server localhost:9092来替代- -zookeeper localhost:2181。<br><a href="https://blog.csdn.net/weixin_45865428/article/details/121264496">https://blog.csdn.net/weixin_45865428/article/details/121264496</a></p><p>就是这个文件里面的cluster.id不一样导致的，您只需要改成和您报错的那个id一样就可以了（不是报错括号里面的那个id哈，是第一个id号哈）<br>注意：如果您的集群都出现了这样的错误，记得每一个都去改，或群发一下也可以；</p><p>如果担心数据的丢失，有一种最简单的办法，即把kafka相关的datas目录和logs目录删除，再来重启kafka即可。<br><a href="https://blog.csdn.net/qq_43224174/article/details/122205378">https://blog.csdn.net/qq_43224174/article/details/122205378</a></p><p>读取resouce目录下的配置文件<br><code>Properties prop=new Properties(); prop.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;consumer.properties&quot; </code>等价于prop.load(CallogConsumer.class.getClassLoader().getResourceAsStream(“consumer.properties”));<br><code>));</code><br><code>Thread.currentThread().getContextClassLoader()</code> 类加载器就是主类，resource目录在classpath下</p><p>在当前线程只连接一次数据库<br><code>private ThreadLocal&lt;Connection&gt; connHolder=new ThreadLocal&lt;&gt;();</code></p><p>synchronized的作用</p><h1 id="NX-amp-amp-XX"><a href="#NX-amp-amp-XX" class="headerlink" title="NX&amp;&amp;XX"></a>NX&amp;&amp;XX</h1><p>Redis中</p><ul><li>  <code>NX</code> – Only set the key if it does not already exist.</li><li>  <code>XX</code> – Only set the key if it already exist.</li><li><code>createNamespaceNX</code>：当命名空间不存在时才创建</li><li><code>createTableXX</code>：当表存在时，先删除原来的表再创建<br>通过捕捉命名空间不存在的异常来判断其是否存在，若捕捉到异常则创建<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createNamespaceNX</span><span class="params">(String namespace)</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        Admin admin=getAdmin();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            admin.getNamespaceDescriptor(namespace);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamespaceNotFoundException e) &#123;  </span><br><span class="line"><span class="comment">//            e.printStackTrace();  </span></span><br><span class="line">            NamespaceDescriptor namespaceDescriptor= NamespaceDescriptor.create(namespace).build();  </span><br><span class="line">            admin.createNamespace(namespaceDescriptor);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="设置常量值的三种方式："><a href="#设置常量值的三种方式：" class="headerlink" title="设置常量值的三种方式："></a>设置常量值的三种方式：</h1><p>法一：枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Names</span> <span class="keyword">implements</span> <span class="title">Val</span> </span>&#123;  </span><br><span class="line">    NAMESPACE(<span class="string">&quot;ct&quot;</span>)  </span><br><span class="line">    , TABLE(<span class="string">&quot;ct:calllog&quot;</span>)  </span><br><span class="line">    , CF_CALLER(<span class="string">&quot;caller&quot;</span>)  </span><br><span class="line">    , CF_INFO(<span class="string">&quot;info&quot;</span>)  </span><br><span class="line">    , TOPIC(<span class="string">&quot;ct&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Names</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object val)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = (String) val;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：常量类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueConstant</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer REGION_COUNT=<span class="number">6</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法三：配置文件<br>ct.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ct.namespace</span>=<span class="string">ct  </span></span><br><span class="line"><span class="meta">ct.table</span>=<span class="string">ct:calllog  </span></span><br><span class="line"><span class="meta">ct.topic</span>=<span class="string">ct  </span></span><br><span class="line"><span class="meta">ct.cf.caller</span>=<span class="string">caller  </span></span><br><span class="line"><span class="meta">ct.cf.info</span>=<span class="string">info</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigConstant</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; valueMap=<span class="keyword">new</span> HashMap&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">        ResourceBundle ct = ResourceBundle.getBundle(<span class="string">&quot;ct&quot;</span>); </span><br><span class="line">        Enumeration&lt;String&gt; keys = ct.getKeys();  </span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements())&#123;  </span><br><span class="line">            String key = keys.nextElement();  </span><br><span class="line">            String value = ct.getString(key);  </span><br><span class="line">            valueMap.put(key,value);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getVal</span><span class="params">(String key)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> valueMap.get(key);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        System.out.println(ConfigConstant.getVal(<span class="string">&quot;ct.cf.caller&quot;</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分区键："><a href="#分区键：" class="headerlink" title="分区键："></a>分区键：</h1><p>负无穷-正无穷<br><code>[a,b]</code>，其中a是以<code>byte[]</code>存储，所以加起来是二维数组<br>6个分区，5个分区键</p><p>00000-1区<br>1100-2区<br>222343-3区<br><code>(-无穷,0),[0,1),[1,+无穷)</code><br><code>(-无穷,0|),[0|,1|),[1|,+无穷)</code><br>|比所有字符都大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>  <span class="keyword">byte</span>[][] genSplitKeys(Integer regionCount)&#123;  </span><br><span class="line">    <span class="keyword">int</span> splitkeyCount=regionCount-<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">byte</span>[][] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[splitkeyCount][];  </span><br><span class="line">    List&lt;<span class="keyword">byte</span>[]&gt; bslist = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; splitkeyCount; i++) &#123;  </span><br><span class="line">        String splitkey=i+<span class="string">&quot;|&quot;</span>;  </span><br><span class="line">        bslist.add(Bytes.toBytes(splitkey));  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//排序  </span></span><br><span class="line">    Collections.sort(bslist,<span class="keyword">new</span> Bytes.ByteArrayComparator());  </span><br><span class="line">    bslist.toArray(bs);<span class="comment">//转成二维数组  </span></span><br><span class="line">    <span class="keyword">return</span> bs;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照月份分区<br>2_133_201803~2_133_201803|</p><h1 id="rowkey设计"><a href="#rowkey设计" class="headerlink" title="rowkey设计"></a>rowkey设计</h1><p>rowkey设计<br>1）长度原则<br>     最大值64KB，推荐长度为10 ~ 100byte<br>     最好8的倍数，能短则短，rowkey如果太长会影响性能<br>2）唯一原则 ： rowkey应该具备唯一性<br>3）散列原则<br>     3-1）盐值散列：不能使用时间戳直接作为rowkey<br>          在rowkey前增加随机数<br>     3-2）字符串反转 ：1312312334342， 1312312334345<br>          电话号码：133 + 0123 + 4567<br>     3-3) 计算分区号：hashMap</p><p>计算分区号，判断rowkey在哪个分区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将同一个人同一月的放在一个分区</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">genRegionNum</span><span class="params">(String tel,String date)</span></span>&#123;  </span><br><span class="line">    String usercode = tel.substring(tel.length() - <span class="number">4</span>); <span class="comment">//电话号码最后四位无规律 </span></span><br><span class="line">    String yearMonth = date.substring(<span class="number">0</span>, <span class="number">6</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> userCodeHash = usercode.hashCode();  </span><br><span class="line">    <span class="keyword">int</span> yearMonthHash = yearMonth.hashCode();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//crc校验采用异或算法,hash  </span></span><br><span class="line">    <span class="keyword">int</span> crc=Math.abs(userCodeHash^yearMonthHash);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> regionNum = crc % ValueConstant.REGION_COUNT;  </span><br><span class="line">    <span class="keyword">return</span> regionNum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加注解封装属性，列名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableRef(&quot;ct:calllog&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calllog</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Rowkey</span>  </span><br><span class="line">    <span class="keyword">private</span> String rowkey;  </span><br><span class="line">    <span class="meta">@Column(family = &quot;caller&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String call1;  </span><br><span class="line">    <span class="meta">@Column(family = &quot;caller&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String call2;</span><br></pre></td></tr></table></figure><p>Column.Annotation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;  </span><br><span class="line">    <span class="function">String <span class="title">family</span><span class="params">()</span> <span class="keyword">default</span> &quot;info&quot;</span>;  </span><br><span class="line">    <span class="function">String <span class="title">column</span><span class="params">()</span> <span class="keyword">default</span>  &quot;&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rowkey.Annotation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;FIELD&#125;)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Rowkey &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TableRef.Annotation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE&#125;)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableRef &#123;  </span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = obj.getClass();  </span><br><span class="line">TableRef tableRef = (TableRef)clazz.getAnnotation(TableRef.class);  </span><br><span class="line">String tableName = tableRef.value();  </span><br><span class="line">  </span><br><span class="line">Field[] fs = clazz.getDeclaredFields();  </span><br><span class="line">String stringRowkey=<span class="string">&quot;&quot;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (Field f : fs) &#123;  </span><br><span class="line">    Rowkey rowkey = f.getAnnotation(Rowkey.class);  </span><br><span class="line">    <span class="keyword">if</span> (rowkey!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);<span class="comment">//属性私有  </span></span><br><span class="line">        stringRowkey= (String) f.get(obj);  </span><br><span class="line">        <span class="keyword">break</span>;    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据量大的适合提高查询效率"><a href="#数据量大的适合提高查询效率" class="headerlink" title="数据量大的适合提高查询效率"></a>数据量大的适合提高查询效率</h1><p>存储两份通话记录，一个是主叫-被叫，一个被叫-主叫，通过flg属性做区分<br>将flg=1作为一个列族，flg=0作为另一个列族，因为不同列族对应不同store</p><h1 id="协处理器"><a href="#协处理器" class="headerlink" title="协处理器"></a>协处理器</h1><p>触发器<br>当插入一条主叫记录时自动插入被叫记录<br>若每次发两条不符合业务需求</p><blockquote><p>方法的命名规则<br>login<br>logout<br>prePut<br>doPut ：模板方法设计模式<br>   存在父子类：<br>   父类搭建算法的骨架<br>   1 tel取用户代码，2 时间取年月，3 异或运算，4 hash散列<br>   子类重写算法的细节<br>   do1. tel取后4位，do2，201810， do3 ^, 4, % &amp;<br>postPut</p></blockquote><p>使用协处理器保存被叫用户的数据<br>    协处理器的使用<br>    1. 创建类<br>    2. 让表找到协处理类（和表有关联）<br>    3. 将项目打成jar包发布到hbase中（关联的jar包也需要发布），并且需要分发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertCalleeCoprocessor</span> <span class="keyword">extends</span> <span class="title">BaseRegionObserver</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postPut</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e, Put put, WALEdit edit, Durability durability)</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        Table table = e.getEnvironment().getTable(TableName.valueOf(Names.TABLE.getValue()));  </span><br><span class="line">  </span><br><span class="line">        String rowkey = Bytes.toString(put.getRow());  </span><br><span class="line">        <span class="comment">// 1_133_2019_144_1010_1  </span></span><br><span class="line">        String[] values = rowkey.split(<span class="string">&quot;_&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        CoprocessorDao dao = <span class="keyword">new</span> CoprocessorDao();  </span><br><span class="line">        String call1 = values[<span class="number">1</span>];  </span><br><span class="line">        String call2 = values[<span class="number">3</span>];  </span><br><span class="line">        String calltime = values[<span class="number">2</span>];  </span><br><span class="line">        String duration = values[<span class="number">4</span>];  </span><br><span class="line">        String flg = values[<span class="number">5</span>];  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ( <span class="string">&quot;1&quot;</span>.equals(flg) ) &#123;  </span><br><span class="line">            <span class="comment">// 只有主叫用户保存后才需要触发被叫用户的保存  </span></span><br><span class="line">            String calleeRowkey = dao.getRegionNum(call2, calltime) + <span class="string">&quot;_&quot;</span> + call2 + <span class="string">&quot;_&quot;</span> + calltime + <span class="string">&quot;_&quot;</span> + call1 + <span class="string">&quot;_&quot;</span> + duration + <span class="string">&quot;_0&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            Put calleePut = <span class="keyword">new</span> Put(Bytes.toBytes(calleeRowkey));  </span><br><span class="line">            <span class="keyword">byte</span>[] calleeFamily = Bytes.toBytes(Names.CF_CALLEE.getValue());  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;call1&quot;</span>), Bytes.toBytes(call2));  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;call2&quot;</span>), Bytes.toBytes(call1));  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;calltime&quot;</span>), Bytes.toBytes(calltime));  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;duration&quot;</span>), Bytes.toBytes(duration));  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;flg&quot;</span>), Bytes.toBytes(<span class="string">&quot;0&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            table.put(calleePut);  </span><br><span class="line">  </span><br><span class="line">            table.close();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CoprocessorDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRegionNum</span><span class="params">(String tel, String time)</span> </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> genRegionNum(tel, time);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baseDao.<span class="function">java</span></span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(coprocessorClass!=<span class="keyword">null</span>&amp;&amp;!<span class="string">&quot;&quot;</span>.equals(coprocessorClass)</span>)</span>&#123;  </span><br><span class="line">    tableDescriptor.addCoprocessor(coprocessorClass);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> flume </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
