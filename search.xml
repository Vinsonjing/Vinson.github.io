<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>leetcode刷题总结</title>
      <link href="/2022/10/05/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/"/>
      <url>/2022/10/05/%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>所以大家使用自己熟悉的编程语言写算法，一定要知道常用的容器底层都是如何实现的，最基本的就是map、set等等，否则自己写的代码，自己对其性能分析都分析不清楚！ By代码随想录</p></blockquote><h1 id="优先队列-单调队列"><a href="#优先队列-单调队列" class="headerlink" title="优先队列/单调队列"></a>优先队列/单调队列</h1><h2 id="239-滑动窗口最大值"><a href="#239-滑动窗口最大值" class="headerlink" title="239. 滑动窗口最大值"></a>239. 滑动窗口最大值</h2><p><a href="https://leetcode.cn/problems/sliding-window-maximum/solution/hua-dong-chuang-kou-zui-da-zhi-by-leetco-ki6m/">leetcode官解</a></p><h3 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] maxSlidingWindow2(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="comment">//存储元素及索引，索引为了判断是否在窗口内</span></span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; priorityQueue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//元素大小不同按元素大小排列，元素大小相同按下标进行排列</span></span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">0</span>]!=o2[<span class="number">0</span>]?o2[<span class="number">0</span>]-o1[<span class="number">0</span>]:o2[<span class="number">1</span>]-o1[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length - k + <span class="number">1</span>]; <span class="comment">//共有n-k+1个元素</span></span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            priorityQueue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums[i],i&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res[index++]=priorityQueue.peek()[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;nums.length;i++)&#123;</span><br><span class="line">            priorityQueue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;nums[i],i&#125;);</span><br><span class="line">            <span class="keyword">while</span>(priorityQueue.peek()[<span class="number">1</span>]&lt;i-k+<span class="number">1</span>)&#123;<span class="comment">//窗口大小[i-k+1,i]</span></span><br><span class="line">                priorityQueue.poll();</span><br><span class="line">            &#125;</span><br><span class="line">            res[index++]=priorityQueue.peek()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(nlogn)，堆的入队出队时间是O(logn)，共n个元素<br>空间复杂度：O(n)</p><h3 id="单调队列"><a href="#单调队列" class="headerlink" title="*单调队列"></a>*单调队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//双端队列，思想和优先队列相似</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] maxSlidingWindow(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        Deque&lt;Integer&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty()&amp;&amp;nums[i]&gt;=nums[deque.peekLast()])&#123;</span><br><span class="line">                deque.pollLast();<span class="comment">//保证最左边的是最大值，如果不大于左边的就直接入队，并且是递减的</span></span><br><span class="line">            &#125;</span><br><span class="line">            deque.offerLast(i);<span class="comment">//存放的是索引</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length - k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> index=<span class="number">0</span>;</span><br><span class="line">        res[index++]=nums[deque.peekFirst()];<span class="comment">//最左边的是最大值</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=k;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty()&amp;&amp;nums[i]&gt;=nums[deque.peekLast()])&#123;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            deque.offerLast(i);<span class="comment">//存放的索引</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (deque.peekFirst()&lt;i-k+<span class="number">1</span>)&#123;</span><br><span class="line">                deque.pollFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            res[index++]=nums[deque.peekFirst()];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n)<br>空间复杂度：O(k)</p><h3 id="分块-预处理"><a href="#分块-预处理" class="headerlink" title="分块 + 预处理"></a>分块 + 预处理</h3><p>将数组 nums 从左到右按照 k 个一组进行分组，最后一组中元素的数量可能会不足 k 个。<br>如果我们知道了左半部的最大值和右半部分的最大值，那么两个选最大的即可。<br>前缀数组存放右半部分的最大值，后缀数组存放左半部分的最大值<br><a href="https://leetcode.cn/problems/sliding-window-maximum/solution/xiang-xi-tong-su-de-si-lu-fen-xi-duo-jie-fa-by-5-3/">参考2</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] maxSlidingWindow3(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">int</span> n=nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] prefixMax = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//右边界</span></span><br><span class="line">        <span class="keyword">int</span>[] suffixMax = <span class="keyword">new</span> <span class="keyword">int</span>[n];<span class="comment">//左边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%k==<span class="number">0</span>)&#123;</span><br><span class="line">                prefixMax[i]=nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                prefixMax[i]=Math.max(nums[i],prefixMax[i-<span class="number">1</span>]);<span class="comment">//保证每个分组中右边的比左边的大</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==n-<span class="number">1</span>||(i+<span class="number">1</span>)%k==<span class="number">0</span>)&#123;</span><br><span class="line">                suffixMax[i]=nums[i];</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                suffixMax[i]=Math.max(nums[i],suffixMax[i+<span class="number">1</span>]);<span class="comment">//每个分组左边的比右边的大</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n - k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n-k+<span class="number">1</span>;i++)&#123;</span><br><span class="line">            res[i]=Math.max(suffixMax[i],prefixMax[i+k-<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O(n)<br>空间复杂度O(n)</p><h4 id="238-除自身以外数组的乘积"><a href="#238-除自身以外数组的乘积" class="headerlink" title="238. 除自身以外数组的乘积"></a>238. 除自身以外数组的乘积</h4><h5 id="左右乘积列表"><a href="#左右乘积列表" class="headerlink" title="左右乘积列表"></a>左右乘积列表</h5><p>分别计算左边所有数字的乘积（前缀）和右边所有数字的乘积（右缀）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">    <span class="keyword">int</span> n=nums.length;</span><br><span class="line">    <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span>[] right = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    left[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    right[n-<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;n;i++)&#123;</span><br><span class="line">        left[i]=left[i-<span class="number">1</span>]*nums[i-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n-<span class="number">2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        right[i]=right[i+<span class="number">1</span>]*nums[i+<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        res[i]=left[i]*right[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N)<br>空间复杂度：O(N)</p><h5 id="动态生成右边乘积"><a href="#动态生成右边乘积" class="headerlink" title="动态生成右边乘积"></a>动态生成右边乘积</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] productExceptSelf(<span class="keyword">int</span>[] nums) &#123;</span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        <span class="keyword">int</span>[] left = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="comment">//首先生成左边乘积</span></span><br><span class="line">        left[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            left[i] = left[i - <span class="number">1</span>] * nums[i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//从右边开始动态生成乘积</span></span><br><span class="line">        <span class="keyword">int</span> R = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">            left[i] = left[i] * R;</span><br><span class="line">            R = R * nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(N)O(N)<br>空间复杂度：O(1)<br>输出数组不算进空间复杂度中，因此我们只需要常数的空间存放变量。</p><h2 id="1696-跳跃游戏-VI"><a href="#1696-跳跃游戏-VI" class="headerlink" title="1696. 跳跃游戏 VI"></a>1696. 跳跃游戏 VI</h2><p><a href="https://leetcode.cn/problems/jump-game-vi/solution/tiao-yue-you-xi-cong-dong-tai-gui-hua-da-3hc3/">参考：跳跃游戏——从动态规划到滑动窗口</a></p><h3 id="动态规划–超时"><a href="#动态规划–超时" class="headerlink" title="动态规划–超时"></a>动态规划–超时</h3><p>dp思路：dp[i]表示以i为结尾的最大值<br>对每个dp[i]，都遍历dp(i-k,i-1)找最小值cur<br>dp[i] = cur + nums[i]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxResult2</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        Arrays.fill(dp, Integer.MIN_VALUE);</span><br><span class="line">        dp[<span class="number">0</span>] = nums[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = Math.max(<span class="number">0</span>, i - k); j &lt; i; j++) &#123;</span><br><span class="line">                dp[i] = Math.max(dp[i], dp[j]);<span class="comment">//每次找前k步中最大的值</span></span><br><span class="line">            &#125;</span><br><span class="line">            dp[i] += nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>仔细观察不难发现，在第i - 1个元素上，我们比较了dp[i - 2]、dp[i - 3]、…、dp[i - k - 1]的最大值，在第i个元素上，我们比较了dp[i - 1]、dp[i - 2]、…、dp[i - k]的最大值；在第i + 1个元素上，我们比较了dp[i]、dp[i - 1]、dp[i - 2]、…、dp[i - k + 1]的最大值；对于数组中的几乎每个元素，我们都做了K次比较，而且有很多次比较是完全重复的，这毫无疑问是一种极大的浪费。</p><h3 id="动态规划-滑动窗口-单调队列"><a href="#动态规划-滑动窗口-单调队列" class="headerlink" title="动态规划 + 滑动窗口(单调队列)"></a>动态规划 + 滑动窗口(单调队列)</h3><p>每次用一个变量maxWindow表示此前dp数组中的最大值，然后在第i个元素上，用dp[i - 1]与maxWindow比较，如果dp[i - 1]大于maxWindow，就可以将maxWindow的值更新为dp[i - 1]，这样的话，每次只需要进行一次比较，就可以解决问题了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">maxResult</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//单调队列</span></span><br><span class="line">        Deque&lt;Integer&gt; deque=<span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[nums.length];</span><br><span class="line">        dp[<span class="number">0</span>]=nums[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="comment">//更新队列</span></span><br><span class="line">            <span class="keyword">while</span> (!deque.isEmpty()&amp;&amp;dp[deque.peekLast()]&lt;=dp[i-<span class="number">1</span>])&#123;</span><br><span class="line">                deque.pollLast();</span><br><span class="line">            &#125;</span><br><span class="line">            deque.offerLast(i-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">while</span> (deque.peekFirst()&lt;i-k)&#123; <span class="comment">//找的是前面一个窗口，窗口不包括当前的</span></span><br><span class="line">                deque.pollFirst();</span><br><span class="line">            &#125;</span><br><span class="line">            dp[i]=dp[deque.peekFirst()]+nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[nums.length-<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="347-前-K-个高频元素"><a href="#347-前-K-个高频元素" class="headerlink" title="347. 前 K 个高频元素"></a>347. 前 K 个高频元素</h2><h3 id="优先队列-1"><a href="#优先队列-1" class="headerlink" title="优先队列"></a>优先队列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] topKFrequent1(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="comment">//优先队列的元素是数组时，需要指定按哪个元素排序</span></span><br><span class="line">        PriorityQueue&lt;<span class="keyword">int</span>[]&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;(<span class="keyword">new</span> Comparator&lt;<span class="keyword">int</span>[]&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span>[] o1, <span class="keyword">int</span>[] o2)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1[<span class="number">1</span>]-o2[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//统计所有频次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//堆中只存前k个</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;</span><br><span class="line">            <span class="keyword">if</span> (queue.size()&lt;k) &#123;<span class="comment">//堆没满，直接添加</span></span><br><span class="line">                queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(queue.peek()[<span class="number">1</span>]&lt;entry.getValue())&#123;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                    queue.offer(<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;entry.getKey(),entry.getValue()&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;k;i++)&#123;</span><br><span class="line">            res[i]=queue.poll()[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(Nlogk)<br>空间复杂度：O(N)</p><h3 id="map找最大"><a href="#map找最大" class="headerlink" title="map找最大"></a>map找最大</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] topKFrequent2(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        HashMap&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//统计所有频次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            map.put(nums[i], map.getOrDefault(nums[i], <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找最大</span></span><br><span class="line">        <span class="keyword">int</span> maxTimes = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer value : map.values()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (value &gt; maxTimes) &#123;</span><br><span class="line">                maxTimes = value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//依次找前k个加入结果集</span></span><br><span class="line">        <span class="keyword">int</span>[] res = <span class="keyword">new</span> <span class="keyword">int</span>[k];</span><br><span class="line">        Set&lt;Map.Entry&lt;Integer, Integer&gt;&gt; entries = map.entrySet();</span><br><span class="line">        <span class="keyword">while</span> (k &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Map.Entry&lt;Integer, Integer&gt; entry : entries) &#123;</span><br><span class="line">                <span class="keyword">if</span> (entry.getValue() == maxTimes) &#123;</span><br><span class="line">                    res[k - <span class="number">1</span>] = entry.getKey();</span><br><span class="line">                    k--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            maxTimes--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>思路不错，但是时间复杂度O(nk)? By<a href="https://leetcode.cn/u/crazybamboo/">CrazyBamboo</a></p><h3 id="快排"><a href="#快排" class="headerlink" title="?快排"></a>?快排</h3><h4 id="215-数组中的第K个最大元素"><a href="#215-数组中的第K个最大元素" class="headerlink" title="?215. 数组中的第K个最大元素"></a>?215. 数组中的第K个最大元素</h4><h5 id="手动实现堆"><a href="#手动实现堆" class="headerlink" title="手动实现堆"></a>手动实现堆</h5><h5 id="优先队列-内置"><a href="#优先队列-内置" class="headerlink" title="优先队列(内置)"></a>优先队列(内置)</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果利用内置标准库实现，可以认为简单题了，应尝试自己实现堆</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findKthLargest</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">        PriorityQueue&lt;Integer&gt; queue = <span class="keyword">new</span> PriorityQueue&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(queue.size()&lt;k)&#123;</span><br><span class="line">                queue.offer(nums[i]);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(queue.peek()&lt;nums[i])&#123;</span><br><span class="line">                    queue.poll();</span><br><span class="line">                    queue.offer(nums[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.peek();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="快排-1"><a href="#快排-1" class="headerlink" title="快排"></a>快排</h5><h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h1 id="分块"><a href="#分块" class="headerlink" title="分块"></a>分块</h1><h1 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h1><p>二分查找：有序数组，无重复元素</p><h2 id="704-二分查找"><a href="#704-二分查找" class="headerlink" title="704. 二分查找"></a>704. 二分查找</h2><p>重点是left&lt;=right和mid+1 -1的对应关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">search</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">       <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">       <span class="keyword">while</span> (left&lt;=right)&#123;<span class="comment">//包括相等</span></span><br><span class="line">           <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">           <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">               right=mid-<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">               left=mid+<span class="number">1</span>;</span><br><span class="line">           &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">               <span class="keyword">return</span> mid;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="35-搜索插入位置"><a href="#35-搜索插入位置" class="headerlink" title="35.搜索插入位置"></a>35.搜索插入位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">searchInsert</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(target&lt;nums[mid])&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(target&gt;nums[mid])&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> left;<span class="comment">//注意返回的是left，可以两边画图算一下</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>与传统二分查找的不同是 找不到则返回应该插入的位置，而不是返回-1。</p><h2 id="34-在排序数组中查找元素的第一个和最后一个位置"><a href="#34-在排序数组中查找元素的第一个和最后一个位置" class="headerlink" title="34. 在排序数组中查找元素的第一个和最后一个位置"></a>34. 在排序数组中查找元素的第一个和最后一个位置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">int</span> leftBorder=getLeftBorder(nums,target);</span><br><span class="line">        <span class="keyword">int</span> rightBorder=getRightBorder(nums,target);</span><br><span class="line">        <span class="keyword">if</span>(leftBorder==-<span class="number">2</span>||rightBorder==-<span class="number">2</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(rightBorder&gt;leftBorder+<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;leftBorder+<span class="number">1</span>,rightBorder-<span class="number">1</span>&#125;;<span class="comment">//找的是不包括target的边界</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;-<span class="number">1</span>,-<span class="number">1</span>&#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getRightBorder</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rightborder=-<span class="number">2</span>;<span class="comment">//防止找不到</span></span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&gt;target)&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;<span class="comment">//nums[middle] == target的时候更新left</span></span><br><span class="line">                rightborder=left;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> rightborder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getLeftBorder</span><span class="params">(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=nums.length-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> leftBorder=-<span class="number">2</span>;<span class="comment">//防止找不到</span></span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;<span class="comment">//nums[middle] == target的时候更新right</span></span><br><span class="line">                leftBorder=right;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> leftBorder;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>两次二分查找，找左边界和右边界。</p><h2 id="367-有效的完全平方数"><a href="#367-有效的完全平方数" class="headerlink" title="367. 有效的完全平方数"></a>367. 有效的完全平方数</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPerfectSquare</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=num;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>((<span class="keyword">long</span>)mid*mid&lt;num)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="keyword">long</span>)mid*mid&gt;num)&#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解决数学问题</p><h2 id="69-x-的平方根"><a href="#69-x-的平方根" class="headerlink" title="69. x 的平方根"></a>69. x 的平方根</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> right=x;</span><br><span class="line">        <span class="keyword">int</span> ans=-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (left&lt;=right)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid=left+(right-left)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>((<span class="keyword">long</span>)mid*mid&lt;=x)&#123;</span><br><span class="line">                left=mid+<span class="number">1</span>;</span><br><span class="line">                ans=mid;<span class="comment">//保存左边界</span></span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                right=mid-<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>367的升级<br>与传统二分查找不同的是将相等和小于的情况合并，找出近似值，而不是精确值。<br>注意：判断条件相乘时可能会导致两个大数相乘，超出int范围，需要转为long类型，这也是29题的难点，29题要求只能用32位数字的范围。</p><h2 id="？29-两数相除"><a href="#？29-两数相除" class="headerlink" title="？29. 两数相除"></a>？29. 两数相除</h2><h3 id="二分查找-快速乘-大数相乘"><a href="#二分查找-快速乘-大数相乘" class="headerlink" title="二分查找+快速乘(大数相乘)"></a>二分查找+快速乘(大数相乘)</h3><p>做不出来 +数字范围(溢出)</p><h1 id="快速幂-快速乘"><a href="#快速幂-快速乘" class="headerlink" title="快速幂|快速乘"></a>快速幂|快速乘</h1><h2 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50. Pow(x, n)"></a>50. Pow(x, n)</h2><h3 id="快速幂-递归"><a href="#快速幂-递归" class="headerlink" title="快速幂 + 递归"></a>快速幂 + 递归</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//分治法：递归</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//虽然没有报错，但是理论上有问题</span></span><br><span class="line"><span class="comment">//        return n &gt;= 0 ? quickMul(x, n) : 1 / quickMul(x, -n);</span></span><br><span class="line">        <span class="comment">//因为用例中n有一个是Integer.MIN_VALUE，转为正数后会溢出</span></span><br><span class="line">        <span class="keyword">long</span> N=n;</span><br><span class="line">        <span class="keyword">return</span> N&gt;= <span class="number">0</span> ? quickMul(x, N) : <span class="number">1</span> / quickMul(x, -N);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">quickMul</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">long</span>  n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> y = quickMul(x, n / <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> n % <span class="number">2</span> == <span class="number">0</span> ? y * y : y * y * x;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="快速幂-迭代"><a href="#快速幂-迭代" class="headerlink" title="快速幂 + 迭代"></a>快速幂 + 迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPowBest</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> N=n;</span><br><span class="line">        <span class="keyword">return</span> N&gt;=<span class="number">0</span>?quickMulBest(x,N):<span class="number">1</span>/quickMulBest(x,-N);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">double</span> <span class="title">quickMulBest</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">long</span>  n)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//贡献初始值为x</span></span><br><span class="line">        <span class="keyword">double</span> x_con=x;</span><br><span class="line">        <span class="keyword">double</span> res=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (n&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//最低位二进制为1，计入贡献</span></span><br><span class="line">                res*=x_con;</span><br><span class="line">            &#125;</span><br><span class="line">            x_con*=x_con;<span class="comment">//下一位的贡献</span></span><br><span class="line">            n/=<span class="number">2</span>;<span class="comment">//舍弃当前最低位，这样每次只需判断最低位</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>![IMG_20221005_142302](vx_images/302362314239472.jpg =500x)</p><h2 id="快速乘"><a href="#快速乘" class="headerlink" title="快速乘"></a>快速乘</h2><h1 id="字母异位词"><a href="#字母异位词" class="headerlink" title="字母异位词"></a>字母异位词</h1><p>49.字母异位词分组</p><h2 id="一个方法：双指针-滑动窗口"><a href="#一个方法：双指针-滑动窗口" class="headerlink" title="一个方法：双指针/滑动窗口"></a>一个方法：双指针/滑动窗口</h2><p>438.找到字符串中所有字母异位词<br>567. 字符串的排列<br>76. 最小覆盖子串</p><ol start="383"><li>赎金信</li><li>有效的字母异位词</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用map的空间消耗要比数组大一些的，因为map要维护红黑树或者哈希表，而且还要做哈希函数，是费时的！数据量大的话就能体现出来差别了。 所以数组更加简单直接有效！</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;magazine.length();i++)&#123;</span><br><span class="line">            ints[magazine.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ransomNote.length();i++)&#123;</span><br><span class="line">            ints[ransomNote.charAt(i)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">if</span>(ints[ransomNote.charAt(i)-<span class="string">&#x27;a&#x27;</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ByMySelf 不如上述简洁，空间消耗也大</span></span><br><span class="line">    <span class="comment">//幸亏后面发现了自己的问题，不然还自得的用自己的这个蠢办法</span></span><br><span class="line">    <span class="comment">//从leetcode运行看，确实快了特别多4&gt;18ms</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct2</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Character, Integer&gt; magCh = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;magazine.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(magCh.containsKey(magazine.charAt(i)))&#123;</span><br><span class="line">                magCh.put(magazine.charAt(i),<span class="number">1</span>+magCh.get(magazine.charAt(i)));</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                magCh.put(magazine.charAt(i),<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;ransomNote.length();i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(magCh.containsKey(ransomNote.charAt(i)))&#123;</span><br><span class="line">                <span class="keyword">if</span>(magCh.get(ransomNote.charAt(i))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    magCh.put(ransomNote.charAt(i),magCh.get(ransomNote.charAt(i))-<span class="number">1</span>);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h1><p><a href="https://www.zhihu.com/question/21923021/answer/281346746">海纳-知乎</a><br><a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC">代码随想录</a></p><p>KMP的经典思想就是:当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。<br>前缀表(next数组)：记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。<br>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串。<br>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串。</p><p>部分匹配表(Partial Match Table)<br>PMT中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度。<br>如果字符串A和B，存在A=BS，其中S是任意的非空字符串，那就称B为A的前缀。例如，”Harry”的前缀包括{”H”, ”Ha”, ”Har”, ”Harr”}，我们把所有前缀组成的集合，称为字符串的前缀集合。同样可以定义后缀A=SB， 其中S是任意的非空字符串，那就称B为A的后缀，例如，”Potter”的后缀包括{”otter”, ”tter”, ”ter”, ”er”, ”r”}，然后把所有后缀组成的集合，称为字符串的后缀集合。要注意的是，字符串本身并不是自己的后缀。</p><p>最长公共前后缀（最长相等前后缀）<br>使用前缀表可以告诉我们匹配失败之后跳到哪里重新匹配</p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谷粒商城项目学习笔记</title>
      <link href="/2022/10/03/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/03/%E8%B0%B7%E7%B2%92%E5%95%86%E5%9F%8E%E9%A1%B9%E7%9B%AE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>设置容器自动启动<br>docker update redis –restart=always</p><p>linux的mysql和docker中的mysql端口碰撞<br><a href="https://blog.csdn.net/SjwFdb_1__1/article/details/121395526">3306: bind: address already in use</a><br>netstat -tanlp # 查看所有已被占用端口和所在进程ID<br>kill 101427 # 杀死当前进程</p><p>ctrl+alt+shift+u 查看Pom依赖冲突</p><p>结合 SpringCloud Alibaba 我们最终的技术搭配方案：<br>SpringCloud Alibaba - Nacos：注册中心（服务发现/注册）<br>SpringCloud Alibaba - Nacos：配置中心（动态配置管理）<br>SpringCloud - Ribbon：负载均衡<br>SpringCloud - Feign：声明式 HTTP 客户端（调用远程服务）<br>SpringCloud Alibaba - Sentinel：服务容错（限流、降级、熔断）<br>SpringCloud - Gateway：API 网关（<mark>webflux </mark>编程模式）<br>SpringCloud - Sleuth：调用链监控<br>SpringCloud Alibaba - Seata：原 Fescar，即分布式事务解决方案</p><h1 id="熟悉流式编程"><a href="#熟悉流式编程" class="headerlink" title="熟悉流式编程"></a>熟悉流式编程</h1><h1 id="整合MyBatis-Plus"><a href="#整合MyBatis-Plus" class="headerlink" title="整合MyBatis-Plus"></a>整合MyBatis-Plus</h1><pre><code> 1）、导入依赖  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">     &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">     &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></code></pre><p> 2）、配置<br> 1、配置数据源；<br> 1）、导入数据库的驱动。<a href="https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html">https://dev.mysql.com/doc/connector-j/8.0/en/connector-j-versions.html</a><br> 2）、在application.yml配置数据源相关信息<br> 2、配置MyBatis-Plus；<br> 1）、使用@MapperScan<br> 2）、告诉MyBatis-Plus，sql映射文件位置</p><h2 id="service中不需要手动注入dao"><a href="#service中不需要手动注入dao" class="headerlink" title="service中不需要手动注入dao"></a>service中不需要手动注入dao</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CategoryServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">CategoryDao</span>, <span class="title">CategoryEntity</span>&gt;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">//继承的<span class="title">ServiceImpl</span>已经自动注入了<span class="title">baseMapper</span>就是<span class="title">CategoryDao</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">ServiceImpl</span>&lt;<span class="title">M</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">T</span>&gt;, <span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">IService</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Log log = LogFactory.getLog(<span class="keyword">this</span>.getClass());</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">protected</span> M baseMapper;</span><br></pre></td></tr></table></figure><h1 id="feign"><a href="#feign" class="headerlink" title="feign"></a>feign</h1><p> 1、想要远程调用别的服务<br> 1）、引入open-feign<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-openfeign&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br><span class="line">       &lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-loadbalancer&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><br> 2）、编写一个接口，告诉SpringCloud这个接口需要调用远程服务<br>   1、声明接口的每一个方法都是调用哪个远程服务的那个请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@FeignClient(&quot;gulimall-coupon&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CouponFeignService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/coupon/coupon/member/list&quot;)</span> <span class="comment">//地址要写全</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> R <span class="title">memberCoupons</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3）、开启远程调用功能<br> @EnableFeignClients(basePackages = “com.vinson.gulimall.member.feign”)</p><h1 id="使用Nacos作为配置中心统一管理配置"><a href="#使用Nacos作为配置中心统一管理配置" class="headerlink" title="使用Nacos作为配置中心统一管理配置"></a>使用Nacos作为配置中心统一管理配置</h1><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p> 1）、引入依赖，<br> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">           &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">           &lt;artifactId&gt;spring-cloud-starter-bootstrap&lt;/artifactId&gt;</span><br><span class="line">       &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><br> 2）、创建一个bootstrap.properties。<br> spring.application.name=gulimall-coupon<br> spring.cloud.nacos.config.server-addr=127.0.0.1:8848<br> 3）、需要给配置中心默认添加一个叫 数据集（Data Id）gulimall-coupon.properties。默认规则，应用名.properties<br> 4）、给 应用名.properties 添加任何配置<br> 5）、动态获取配置。<br> @RefreshScope：动态获取并刷新配置<br> @Value(“${配置项的名}”)：获取到配置。<br> 如果配置中心和当前应用的配置文件中都配置了相同的项，优先使用配置中心的配置。</p><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><p> 1）、命名空间：配置隔离；<br> 默认：public(保留空间)；默认新增的所有配置都在public空间。<br> 1、开发，测试，生产：利用命名空间来做环境隔离。<br> 注意：在bootstrap.properties；配置上，需要使用哪个命名空间下的配置，<br> spring.cloud.nacos.config.namespace=9de62e44-cd2a-4a82-bf5c-95878bd5e871<br> 2、每一个微服务之间互相隔离配置，每一个微服务都创建自己的命名空间，只加载自己命名空间下的所有配置</p><p> 2）、配置集：所有的配置的集合</p><p> 3）、配置集ID：类似文件名。<br> Data ID：类似文件名</p><p> 4）、配置分组：<br> 默认所有的配置集都属于：DEFAULT_GROUP；<br> 1111，618，1212<br> spring.cloud.nacos.config.group=1111</p><p> 项目中的使用：每个微服务创建自己的命名空间，使用配置分组区分环境，dev，test，prod</p><p> 3、同时加载多个配置集<br> 1)、微服务任何配置信息，任何配置文件都可以放在配置中心中<br> 2）、只需要在bootstrap.properties说明加载配置中心中哪些配置文件即可<br> 3）、@Value，@ConfigurationProperties。。。<br> 以前SpringBoot任何方法从配置文件中获取值，都能使用。<br> 配置中心有的优先使用配置中心中的，</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">gulimall-coupon</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.namespace</span>=<span class="string">d5c78392-5fd3-4737-ab6e-3d3038f7bd82</span></span><br><span class="line"><span class="comment"># 默认的配置分组</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.group</span>=<span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].data-id</span>=<span class="string">datasource.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[0].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].data-id</span>=<span class="string">mybatis.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[1].refresh</span>=<span class="string">true</span></span><br><span class="line"></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].data-id</span>=<span class="string">other.yml</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].group</span>=<span class="string">dev</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.extension-configs[2].refresh</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h1 id="网关"><a href="#网关" class="headerlink" title="网关"></a>网关</h1><p><img src="https://img-blog.csdnimg.cn/cc24ba82594e4d94b38e126e7e4c9964.png" alt="在这里插入图片描述"><br>排除数据源相关的配置<br>@SpringBootApplication(exclude = {DataSourceAutoConfiguration.class})</p><h1 id="三级分类"><a href="#三级分类" class="headerlink" title="三级分类"></a>三级分类</h1>]]></content>
      
      
      <categories>
          
          <category> 项目 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMP</title>
      <link href="/2022/09/30/KMP/"/>
      <url>/2022/09/30/KMP/</url>
      
        <content type="html"><![CDATA[<p>待完成</p><p><a href="https://www.zhihu.com/question/21923021/answer/281346746">海纳-知乎</a><br><a href="https://programmercarl.com/0028.%E5%AE%9E%E7%8E%B0strStr.html#%E5%85%B6%E4%BB%96%E8%AF%AD%E8%A8%80%E7%89%88%E6%9C%AC">代码随想录</a></p><p>KMP的经典思想就是:当出现字符串不匹配时，可以记录一部分之前已经匹配的文本内容，利用这些信息避免从头再去做匹配。<br>前缀表(next数组)：记录下标i之前（包括i）的字符串中，有多大长度的相同前缀后缀。<br>前缀是指不包含最后一个字符的所有以第一个字符开头的连续子串。<br>后缀是指不包含第一个字符的所有以最后一个字符结尾的连续子串。</p><p>部分匹配表(Partial Match Table)<br>PMT中的值是字符串的前缀集合与后缀集合的交集中最长元素的长度。<br>如果字符串A和B，存在A=BS，其中S是任意的非空字符串，那就称B为A的前缀。例如，”Harry”的前缀包括{”H”, ”Ha”, ”Har”, ”Harr”}，我们把所有前缀组成的集合，称为字符串的前缀集合。同样可以定义后缀A=SB， 其中S是任意的非空字符串，那就称B为A的后缀，例如，”Potter”的后缀包括{”otter”, ”tter”, ”ter”, ”er”, ”r”}，然后把所有后缀组成的集合，称为字符串的后缀集合。要注意的是，字符串本身并不是自己的后缀。</p><p>最长公共前后缀（最长相等前后缀）<br>使用前缀表可以告诉我们匹配失败之后跳到哪里重新匹配</p>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMP </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最小覆盖子串</title>
      <link href="/2022/09/26/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/"/>
      <url>/2022/09/26/%E6%9C%80%E5%B0%8F%E8%A6%86%E7%9B%96%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<p>待完成</p><p>针对这三道题算是找到了一套模板，都不是官解，好像也都不是一个人。</p><h1 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词"></a><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/">438. 找到字符串中所有字母异位词</a></h1><p><a href="https://leetcode.cn/u/skyzhou/">skyzhou</a><br>刚开始还理解的不是很透彻。可认为3步走。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">findAnagrams</span><span class="params">(String s, String p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span> m = p.length();</span><br><span class="line">        <span class="comment">//第一步：长的大于短的(貌似是废话)</span></span><br><span class="line">        <span class="keyword">if</span> (n &lt; m) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计短的字符个数</span></span><br><span class="line">        <span class="keyword">int</span>[] alpha = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.length(); i++) &#123;</span><br><span class="line">            alpha[p.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>;</span><br><span class="line">        List&lt;Integer&gt; ret = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> right = <span class="number">0</span>; right &lt; s.length(); right++) &#123;</span><br><span class="line">            <span class="comment">//加入窗口</span></span><br><span class="line">            alpha[s.charAt(right) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="comment">//将不符合条件的字符从窗口删去</span></span><br><span class="line">            <span class="keyword">while</span> (alpha[s.charAt(right) - <span class="string">&#x27;a&#x27;</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                alpha[s.charAt(left) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//窗口长度等于短的：找到结果</span></span><br><span class="line">            <span class="keyword">if</span> (right - left + <span class="number">1</span> == p.length()) &#123;</span><br><span class="line">                ret.add(left);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="567-字符串的排列"><a href="#567-字符串的排列" class="headerlink" title="567. 字符串的排列"></a><a href="https://leetcode.cn/problems/permutation-in-string/">567. 字符串的排列</a></h1><p>这题可任务和438一模一样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkInclusion</span><span class="params">(String s1, String s2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//长度不够</span></span><br><span class="line">        <span class="keyword">if</span>(s1.length()&gt;s2.length())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//统计s1字符</span></span><br><span class="line">        <span class="keyword">int</span>[] alpha=<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;s1.length();i++)&#123;</span><br><span class="line">            alpha[s1.charAt(i)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//双指针</span></span><br><span class="line">        <span class="keyword">int</span> left=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> right=<span class="number">0</span>;right&lt;s2.length();right++)&#123;</span><br><span class="line">            alpha[s2.charAt(right)-<span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">            <span class="keyword">while</span>(alpha[s2.charAt(right)-<span class="string">&#x27;a&#x27;</span>]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">                alpha[s2.charAt(left)-<span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                left++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(right-left+<span class="number">1</span>==s1.length())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>然后看到评论区有人说76题也是类似的，又去挑战了这道困难题，其实昨天76题已经挑战失败了，昨天看到子数组分类时也是做了两题产生了对这题的信心，但是看题目就找不到感觉。</p><h1 id="76-最小覆盖子串"><a href="#76-最小覆盖子串" class="headerlink" title="76. 最小覆盖子串"></a><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串</a></h1><p>这题还是有感觉的，还是用上面的套路，但是在左移窗口时不知道判断条件怎么解决了，这道题的终止条件不应该是窗口与短的相同，所以不需要立即将窗口中不符合条件的字符删去。</p><p>但是找评论<a href="https://leetcode.cn/u/shapeng1998/">sp1998</a>还是找到了用这个套路解决的，非常简单，加个判断是否。</p><p>评论区也有人用了labuladong的方法做，但是那个模板比这个还是麻烦的，其实也挺相近。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 滑动窗口 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 子字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>螺旋矩阵算法题总结</title>
      <link href="/2022/09/25/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95%E9%A2%98%E6%80%BB%E7%BB%93/"/>
      <url>/2022/09/25/%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5%E7%AE%97%E6%B3%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>目前看到的是两题。可以用一种套路。<br>先看<a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a>比先看<a href="https://leetcode.cn/problems/spiral-matrix/">54.螺旋矩阵</a>更容易理解。59是正方形，54是长方形。</p><h1 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a><a href="https://leetcode.cn/problems/spiral-matrix-ii/">59. 螺旋矩阵 II</a></h1><p>参考<a href="https://leetcode.cn/problems/spiral-matrix-ii/solution/luo-xuan-ju-zhen-ii-by-leetcode-solution-f7fp/1298674">https://leetcode.cn/problems/spiral-matrix-ii/solution/luo-xuan-ju-zhen-ii-by-leetcode-solution-f7fp/1298674</a><br>官解确实不咋地，然后一开始看的是代码随想录的，能看懂，但是写的过程需要考虑的其实有点多，变量太多，还是这个最简洁。<br><a href="https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html#%E6%80%9D%E8%B7%AF">代码随想录</a>给出了一个重点是 <code>坚持循环不变量原则</code>，要么左闭右开，要么左开右闭，不能混着来。包括下面这个解也是。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> r=n-<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> k=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] res=<span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">while</span> (k&lt;=n*n)&#123;</span><br><span class="line">            <span class="comment">//上边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">                res[t][i]=k++;</span><br><span class="line">            &#125;</span><br><span class="line">            t++;</span><br><span class="line">            <span class="comment">//右边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&lt;=b;i++)&#123;</span><br><span class="line">                res[i][r]=k++;</span><br><span class="line">            &#125;</span><br><span class="line">            r--;</span><br><span class="line">            <span class="comment">//下边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&gt;=l;i--)&#123;</span><br><span class="line">                res[b][i]=k++;</span><br><span class="line">            &#125;</span><br><span class="line">            b--;</span><br><span class="line">            <span class="comment">//左边</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=b;i&gt;=t;i--)&#123;</span><br><span class="line">                res[i][l]=k++;</span><br><span class="line">            &#125;</span><br><span class="line">            l++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="54-螺旋矩阵"><a href="#54-螺旋矩阵" class="headerlink" title="54.螺旋矩阵"></a><a href="https://leetcode.cn/problems/spiral-matrix/">54.螺旋矩阵</a></h1><p><a href="https://leetcode.cn/problems/spiral-matrix/solution/cxiang-xi-ti-jie-by-youlookdeliciousc-3/">https://leetcode.cn/problems/spiral-matrix/solution/cxiang-xi-ti-jie-by-youlookdeliciousc-3/</a><br>类似t59，区别是一个正方形，一个是长方形，正方形时最后到最里面会同时越界，但是长方形时每条边都需要判断是否越界，一旦越界需要立刻退出循环，否则其他边未越界，还会继续输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=matrix.length;</span><br><span class="line">    <span class="keyword">int</span> m=matrix[<span class="number">0</span>].length;</span><br><span class="line">    List&lt;Integer&gt; res=<span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> b=n-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> l=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> r=m-<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=l;i&lt;=r;i++)&#123;</span><br><span class="line">            res.add(matrix[t][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        t++;</span><br><span class="line">        <span class="keyword">if</span>(t&gt;b)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=t;i&lt;=b;i++)&#123;</span><br><span class="line">            res.add(matrix[i][r]);</span><br><span class="line">        &#125;</span><br><span class="line">        r--;</span><br><span class="line">        <span class="keyword">if</span>(r&lt;l)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=r;i&gt;=l;i--)&#123;</span><br><span class="line">            res.add(matrix[b][i]);</span><br><span class="line">        &#125;</span><br><span class="line">        b--;</span><br><span class="line">        <span class="keyword">if</span>(b&lt;t)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=b;i&gt;=t;i--)&#123;</span><br><span class="line">            res.add(matrix[i][l]);</span><br><span class="line">        &#125;</span><br><span class="line">        l++;</span><br><span class="line">        <span class="keyword">if</span>(l&gt;r)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 螺旋矩阵 </tag>
            
            <tag> 模拟过程 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大数据-电信客服项目</title>
      <link href="/2022/09/22/%E7%94%B5%E4%BF%A1%E5%AE%A2%E6%9C%8D%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2022/09/22/%E7%94%B5%E4%BF%A1%E5%AE%A2%E6%9C%8D%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<p><code>public &lt;T extends Data&gt; List&lt;T&gt; read(Class&lt;T&gt; clazz) throws IOException;</code></p><p><code>private volatile boolean flg=true;</code></p><p><code>//字符流-转换流-字节流</code><br><code>reader=new BufferedReader(new InputStreamReader(new FileInputStream(path),&quot;utf-8&quot;));</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数字格式化为字符串，固定长度，不满补0  </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">format</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> length)</span></span>&#123;  </span><br><span class="line">    StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;  </span><br><span class="line">        stringBuilder.append(<span class="string">&quot;0&quot;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">    DecimalFormat df=<span class="keyword">new</span> DecimalFormat(stringBuilder.toString());  </span><br><span class="line">    <span class="keyword">return</span> df.format(num);  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反射一定要有无参构造</p><p>flume和kafka不创建主题时会自动创建，但是只有一个分区一个副本</p><p>在较新版本（2.2 及更高版本）的 Kafka 不再需要 ZooKeeper 连接字符串，即- -zookeeper localhost:2181。使用 Kafka Broker的 –bootstrap-server localhost:9092来替代- -zookeeper localhost:2181。<br><a href="https://blog.csdn.net/weixin_45865428/article/details/121264496">https://blog.csdn.net/weixin_45865428/article/details/121264496</a></p><p>就是这个文件里面的cluster.id不一样导致的，您只需要改成和您报错的那个id一样就可以了（不是报错括号里面的那个id哈，是第一个id号哈）<br>注意：如果您的集群都出现了这样的错误，记得每一个都去改，或群发一下也可以；</p><p>如果担心数据的丢失，有一种最简单的办法，即把kafka相关的datas目录和logs目录删除，再来重启kafka即可。<br><a href="https://blog.csdn.net/qq_43224174/article/details/122205378">https://blog.csdn.net/qq_43224174/article/details/122205378</a></p><p>读取resouce目录下的配置文件<br><code>Properties prop=new Properties(); prop.load(Thread.currentThread().getContextClassLoader().getResourceAsStream(&quot;consumer.properties&quot; </code>等价于prop.load(CallogConsumer.class.getClassLoader().getResourceAsStream(“consumer.properties”));<br><code>));</code><br><code>Thread.currentThread().getContextClassLoader()</code> 类加载器就是主类，resource目录在classpath下</p><p>在当前线程只连接一次数据库<br><code>private ThreadLocal&lt;Connection&gt; connHolder=new ThreadLocal&lt;&gt;();</code></p><p>synchronized的作用</p><h1 id="NX-amp-amp-XX"><a href="#NX-amp-amp-XX" class="headerlink" title="NX&amp;&amp;XX"></a>NX&amp;&amp;XX</h1><p>Redis中</p><ul><li>  <code>NX</code> – Only set the key if it does not already exist.</li><li>  <code>XX</code> – Only set the key if it already exist.</li><li><code>createNamespaceNX</code>：当命名空间不存在时才创建</li><li><code>createTableXX</code>：当表存在时，先删除原来的表再创建<br>通过捕捉命名空间不存在的异常来判断其是否存在，若捕捉到异常则创建<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">createNamespaceNX</span><span class="params">(String namespace)</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        Admin admin=getAdmin();  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            admin.getNamespaceDescriptor(namespace);  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NamespaceNotFoundException e) &#123;  </span><br><span class="line"><span class="comment">//            e.printStackTrace();  </span></span><br><span class="line">            NamespaceDescriptor namespaceDescriptor= NamespaceDescriptor.create(namespace).build();  </span><br><span class="line">            admin.createNamespace(namespaceDescriptor);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><h1 id="设置常量值的三种方式："><a href="#设置常量值的三种方式：" class="headerlink" title="设置常量值的三种方式："></a>设置常量值的三种方式：</h1><p>法一：枚举</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Names</span> <span class="keyword">implements</span> <span class="title">Val</span> </span>&#123;  </span><br><span class="line">    NAMESPACE(<span class="string">&quot;ct&quot;</span>)  </span><br><span class="line">    , TABLE(<span class="string">&quot;ct:calllog&quot;</span>)  </span><br><span class="line">    , CF_CALLER(<span class="string">&quot;caller&quot;</span>)  </span><br><span class="line">    , CF_INFO(<span class="string">&quot;info&quot;</span>)  </span><br><span class="line">    , TOPIC(<span class="string">&quot;ct&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Names</span><span class="params">(String name)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">value</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValue</span><span class="params">(Object val)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.name = (String) val;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getValue</span><span class="params">()</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> name;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法二：常量类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueConstant</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Integer REGION_COUNT=<span class="number">6</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>法三：配置文件<br>ct.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">ct.namespace</span>=<span class="string">ct  </span></span><br><span class="line"><span class="meta">ct.table</span>=<span class="string">ct:calllog  </span></span><br><span class="line"><span class="meta">ct.topic</span>=<span class="string">ct  </span></span><br><span class="line"><span class="meta">ct.cf.caller</span>=<span class="string">caller  </span></span><br><span class="line"><span class="meta">ct.cf.info</span>=<span class="string">info</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigConstant</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,String&gt; valueMap=<span class="keyword">new</span> HashMap&lt;&gt;();  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">static</span> &#123;  </span><br><span class="line"><span class="comment">//读取配置文件</span></span><br><span class="line">        ResourceBundle ct = ResourceBundle.getBundle(<span class="string">&quot;ct&quot;</span>); </span><br><span class="line">        Enumeration&lt;String&gt; keys = ct.getKeys();  </span><br><span class="line">        <span class="keyword">while</span> (keys.hasMoreElements())&#123;  </span><br><span class="line">            String key = keys.nextElement();  </span><br><span class="line">            String value = ct.getString(key);  </span><br><span class="line">            valueMap.put(key,value);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getVal</span><span class="params">(String key)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">return</span> valueMap.get(key);  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;  </span><br><span class="line">        System.out.println(ConfigConstant.getVal(<span class="string">&quot;ct.cf.caller&quot;</span>));  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="分区键："><a href="#分区键：" class="headerlink" title="分区键："></a>分区键：</h1><p>负无穷-正无穷<br><code>[a,b]</code>，其中a是以<code>byte[]</code>存储，所以加起来是二维数组<br>6个分区，5个分区键</p><p>00000-1区<br>1100-2区<br>222343-3区<br><code>(-无穷,0),[0,1),[1,+无穷)</code><br><code>(-无穷,0|),[0|,1|),[1|,+无穷)</code><br>|比所有字符都大</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span>  <span class="keyword">byte</span>[][] genSplitKeys(Integer regionCount)&#123;  </span><br><span class="line">    <span class="keyword">int</span> splitkeyCount=regionCount-<span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">byte</span>[][] bs = <span class="keyword">new</span> <span class="keyword">byte</span>[splitkeyCount][];  </span><br><span class="line">    List&lt;<span class="keyword">byte</span>[]&gt; bslist = <span class="keyword">new</span> ArrayList&lt;&gt;();  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; splitkeyCount; i++) &#123;  </span><br><span class="line">        String splitkey=i+<span class="string">&quot;|&quot;</span>;  </span><br><span class="line">        bslist.add(Bytes.toBytes(splitkey));  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">//排序  </span></span><br><span class="line">    Collections.sort(bslist,<span class="keyword">new</span> Bytes.ByteArrayComparator());  </span><br><span class="line">    bslist.toArray(bs);<span class="comment">//转成二维数组  </span></span><br><span class="line">    <span class="keyword">return</span> bs;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按照月份分区<br>2_133_201803~2_133_201803|</p><h1 id="rowkey设计"><a href="#rowkey设计" class="headerlink" title="rowkey设计"></a>rowkey设计</h1><p>rowkey设计<br>1）长度原则<br>     最大值64KB，推荐长度为10 ~ 100byte<br>     最好8的倍数，能短则短，rowkey如果太长会影响性能<br>2）唯一原则 ： rowkey应该具备唯一性<br>3）散列原则<br>     3-1）盐值散列：不能使用时间戳直接作为rowkey<br>          在rowkey前增加随机数<br>     3-2）字符串反转 ：1312312334342， 1312312334345<br>          电话号码：133 + 0123 + 4567<br>     3-3) 计算分区号：hashMap</p><p>计算分区号，判断rowkey在哪个分区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//将同一个人同一月的放在一个分区</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">genRegionNum</span><span class="params">(String tel,String date)</span></span>&#123;  </span><br><span class="line">    String usercode = tel.substring(tel.length() - <span class="number">4</span>); <span class="comment">//电话号码最后四位无规律 </span></span><br><span class="line">    String yearMonth = date.substring(<span class="number">0</span>, <span class="number">6</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> userCodeHash = usercode.hashCode();  </span><br><span class="line">    <span class="keyword">int</span> yearMonthHash = yearMonth.hashCode();  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">//crc校验采用异或算法,hash  </span></span><br><span class="line">    <span class="keyword">int</span> crc=Math.abs(userCodeHash^yearMonthHash);  </span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> regionNum = crc % ValueConstant.REGION_COUNT;  </span><br><span class="line">    <span class="keyword">return</span> regionNum;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加注解封装属性，列名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableRef(&quot;ct:calllog&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calllog</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Rowkey</span>  </span><br><span class="line">    <span class="keyword">private</span> String rowkey;  </span><br><span class="line">    <span class="meta">@Column(family = &quot;caller&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String call1;  </span><br><span class="line">    <span class="meta">@Column(family = &quot;caller&quot;)</span>  </span><br><span class="line">    <span class="keyword">private</span> String call2;</span><br></pre></td></tr></table></figure><p>Column.Annotation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.FIELD&#125;)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Column &#123;  </span><br><span class="line">    <span class="function">String <span class="title">family</span><span class="params">()</span> <span class="keyword">default</span> &quot;info&quot;</span>;  </span><br><span class="line">    <span class="function">String <span class="title">column</span><span class="params">()</span> <span class="keyword">default</span>  &quot;&quot;</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Rowkey.Annotation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;FIELD&#125;)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Rowkey &#123;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>TableRef.Annotation</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;TYPE&#125;)</span>  </span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TableRef &#123;  </span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = obj.getClass();  </span><br><span class="line">TableRef tableRef = (TableRef)clazz.getAnnotation(TableRef.class);  </span><br><span class="line">String tableName = tableRef.value();  </span><br><span class="line">  </span><br><span class="line">Field[] fs = clazz.getDeclaredFields();  </span><br><span class="line">String stringRowkey=<span class="string">&quot;&quot;</span>;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (Field f : fs) &#123;  </span><br><span class="line">    Rowkey rowkey = f.getAnnotation(Rowkey.class);  </span><br><span class="line">    <span class="keyword">if</span> (rowkey!=<span class="keyword">null</span>)&#123;  </span><br><span class="line">        f.setAccessible(<span class="keyword">true</span>);<span class="comment">//属性私有  </span></span><br><span class="line">        stringRowkey= (String) f.get(obj);  </span><br><span class="line">        <span class="keyword">break</span>;    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数据量大的适合提高查询效率"><a href="#数据量大的适合提高查询效率" class="headerlink" title="数据量大的适合提高查询效率"></a>数据量大的适合提高查询效率</h1><p>存储两份通话记录，一个是主叫-被叫，一个被叫-主叫，通过flg属性做区分<br>将flg=1作为一个列族，flg=0作为另一个列族，因为不同列族对应不同store</p><h1 id="协处理器"><a href="#协处理器" class="headerlink" title="协处理器"></a>协处理器</h1><p>触发器<br>当插入一条主叫记录时自动插入被叫记录<br>若每次发两条不符合业务需求</p><blockquote><p>方法的命名规则<br>login<br>logout<br>prePut<br>doPut ：模板方法设计模式<br>   存在父子类：<br>   父类搭建算法的骨架<br>   1 tel取用户代码，2 时间取年月，3 异或运算，4 hash散列<br>   子类重写算法的细节<br>   do1. tel取后4位，do2，201810， do3 ^, 4, % &amp;<br>postPut</p></blockquote><p>使用协处理器保存被叫用户的数据<br>    协处理器的使用<br>    1. 创建类<br>    2. 让表找到协处理类（和表有关联）<br>    3. 将项目打成jar包发布到hbase中（关联的jar包也需要发布），并且需要分发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertCalleeCoprocessor</span> <span class="keyword">extends</span> <span class="title">BaseRegionObserver</span> </span>&#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postPut</span><span class="params">(ObserverContext&lt;RegionCoprocessorEnvironment&gt; e, Put put, WALEdit edit, Durability durability)</span> <span class="keyword">throws</span> IOException </span>&#123;  </span><br><span class="line">        Table table = e.getEnvironment().getTable(TableName.valueOf(Names.TABLE.getValue()));  </span><br><span class="line">  </span><br><span class="line">        String rowkey = Bytes.toString(put.getRow());  </span><br><span class="line">        <span class="comment">// 1_133_2019_144_1010_1  </span></span><br><span class="line">        String[] values = rowkey.split(<span class="string">&quot;_&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        CoprocessorDao dao = <span class="keyword">new</span> CoprocessorDao();  </span><br><span class="line">        String call1 = values[<span class="number">1</span>];  </span><br><span class="line">        String call2 = values[<span class="number">3</span>];  </span><br><span class="line">        String calltime = values[<span class="number">2</span>];  </span><br><span class="line">        String duration = values[<span class="number">4</span>];  </span><br><span class="line">        String flg = values[<span class="number">5</span>];  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">if</span> ( <span class="string">&quot;1&quot;</span>.equals(flg) ) &#123;  </span><br><span class="line">            <span class="comment">// 只有主叫用户保存后才需要触发被叫用户的保存  </span></span><br><span class="line">            String calleeRowkey = dao.getRegionNum(call2, calltime) + <span class="string">&quot;_&quot;</span> + call2 + <span class="string">&quot;_&quot;</span> + calltime + <span class="string">&quot;_&quot;</span> + call1 + <span class="string">&quot;_&quot;</span> + duration + <span class="string">&quot;_0&quot;</span>;  </span><br><span class="line">  </span><br><span class="line">            Put calleePut = <span class="keyword">new</span> Put(Bytes.toBytes(calleeRowkey));  </span><br><span class="line">            <span class="keyword">byte</span>[] calleeFamily = Bytes.toBytes(Names.CF_CALLEE.getValue());  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;call1&quot;</span>), Bytes.toBytes(call2));  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;call2&quot;</span>), Bytes.toBytes(call1));  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;calltime&quot;</span>), Bytes.toBytes(calltime));  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;duration&quot;</span>), Bytes.toBytes(duration));  </span><br><span class="line">            calleePut.addColumn(calleeFamily, Bytes.toBytes(<span class="string">&quot;flg&quot;</span>), Bytes.toBytes(<span class="string">&quot;0&quot;</span>));  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">            table.put(calleePut);  </span><br><span class="line">  </span><br><span class="line">            table.close();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">CoprocessorDao</span> <span class="keyword">extends</span> <span class="title">BaseDao</span> </span>&#123;  </span><br><span class="line">  </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getRegionNum</span><span class="params">(String tel, String time)</span> </span>&#123;  </span><br><span class="line">            <span class="keyword">return</span> genRegionNum(tel, time);  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">baseDao.<span class="function">java</span></span><br><span class="line"><span class="function"><span class="title">if</span><span class="params">(coprocessorClass!=<span class="keyword">null</span>&amp;&amp;!<span class="string">&quot;&quot;</span>.equals(coprocessorClass)</span>)</span>&#123;  </span><br><span class="line">    tableDescriptor.addCoprocessor(coprocessorClass);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
            <tag> flume </tag>
            
            <tag> zookeeper </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
